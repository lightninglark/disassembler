00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/1/2017 7:50:11 AM

00000000                             1  ************************************************************
00000000                             2  * TEAM NEVERY LUCKY DISSASSEMBLER
00000000                             3  * This file includes Parameter logic (Order, EA, DN/AN/LIST)
00000000                             4  * Logic.
00000000                             5  ************************************************************
00000000                             6  
00000000                             7  
00000000                             8  
00000000                             9  
00000000                            10  *============================================================
00000000                            11  *================OPERAND ORDER SUBROUTINES===================
00000000                            12  *============================================================
00000000                            13  * WE'LL MAY STILL NEED TO IMPLEMENT SOME TYPE OF AN_SRC,
00000000                            14  * AN_DEST, DATA_SRC (But maybe not since we'll know the 
00000000                            15  * specific order of operands for those functions.
00000000                            16  
00000000                            17  
00000000                            18  *---------------------EA SOURCE with Dn dest----------------
00000000                            19  * Logic for an EA source operand for opcodes: 
00000000                            20  * ADD, AND, OR, SUB
00000000                            21  *-----------------------------------------------------------
00000000  4EB9 0000019E             22  EASRC_DDES  JSR         GEN_EA_CODE *Deal with EA code First
00000006  18FC 002C                 23              MOVE.B      #',',(A4)+
0000000A  18FC 0044                 24              MOVE.B      #'D',(A4)+
0000000E  4EB9 00000206             25              JSR         REG_CODE    *Decode Dn and add number to string
00000014  4E75                      26              RTS
00000016                            27  
00000016                            28  *---------------------EA SOURCE with An dest----------------
00000016                            29  * Logic for an EA source operand for opcodes: 
00000016                            30  * LEA, ADDA, (Maybe MOVEA)
00000016                            31  *-----------------------------------------------------------
00000016  4EB9 0000019E             32  EASRC_ADES  JSR         GEN_EA_CODE *Deal with EA code first
0000001C  18FC 002C                 33              MOVE.B      #',',(A4)+
00000020  18FC 0041                 34              MOVE.B      #'A',(A4)+
00000024  4EB9 00000206             35              JSR         REG_CODE    *Decode Dn and add number to string
0000002A  4E75                      36              RTS        
0000002C                            37  
0000002C                            38  *---------------------DN SOURCE-----------------------------
0000002C                            39  * Logic for a DN source operand for opcodes:
0000002C                            40  * ADD, AND, OR, SUB
0000002C                            41  *-----------------------------------------------------------
0000002C  18FC 0044                 42  DN_SRC      MOVE.B      #'D',(A4)+
00000030  4EB9 00000206             43              JSR         REG_CODE    *Decode Dn and add number to string
00000036  18FC 002C                 44              MOVE.B      #',',(A4)+
0000003A  4EB9 0000019E             45              JSR         GEN_EA_CODE *Deal with EA code Second
00000040  4E75                      46              RTS
00000042                            47  
00000042                            48  *---------------------Data source, EA dest------------------
00000042                            49  * Logic for opcodes with a #<data> source, <EA> destination
00000042                            50  * opcodes: SUBI, ADDI
00000042                            51  *-----------------------------------------------------------
00000042  4EB9 0000036A             52  IDATASRC_EA JSR     IDATA       *Add immediate data
00000048  18FC 002C                 53              MOVE.B  #',',(A4)+  
0000004C  4EB9 0000019E             54              JSR     GEN_EA_CODE *Add ea code
00000052  4E75                      55              RTS
00000054                            56  
00000054                            57  
00000054                            58  *---------------------MM OPERATION ORDER--------------------
00000054                            59  * Identifies whether the order of the parameters is:
00000054                            60  * <EA>,<list> or <list>,<EA>. It then branches to the 
00000054                            61  * appropriate order based subroutines. This subroutine is
00000054                            62  * for opcodes: MOVEM
00000054                            63  *-----------------------------------------------------------
00000054  4EB9 0000018E             64  MM_OP_ORD   JSR         MM_DR       *Isolate DR bit into D2
0000005A                            65  
0000005A  B43C 0000                 66              CMP.B       #0,D2       *Is it Register to Memory
0000005E  6700 000A                 67              BEQ         MM_R2M
00000062  B43C 0001                 68              CMP.B       #1,D2       *Is it Memory to Register
00000066  6700 000A                 69              BEQ         MM_M2R
0000006A                            70              
0000006A  4EB9 00000090             71  MM_R2M      JSR         MM_LS_SRC
00000070  4E75                      72              RTS
00000072                            73  
00000072  4EB9 0000007A             74  MM_M2R      JSR         MM_EA_SRC
00000078  4E75                      75              RTS
0000007A                            76  
0000007A                            77  *---------------------MM EA SOURCE--------------------------
0000007A                            78  * Logic for an EA source operand for MOVEM
0000007A                            79  *-----------------------------------------------------------
0000007A  4EB9 0000019E             80  MM_EA_SRC   JSR         GEN_EA_CODE *Add EA code
00000080  18FC 002C                 81              MOVE.B      #',',(A4)+
00000084                            82              *JSR         ISO_MASK    *Isolate the Mask
00000084                            83              
00000084                            84              *Bandaid, instead of decoding list, just display hex value
00000084  18FC 0024                 85              MOVE.B      #'$',(A4)+
00000088  4EB9 000003BA             86              JSR         W_IMD
0000008E                            87                      
0000008E                            88              *deal with list
0000008E  4E75                      89              RTS
00000090                            90  
00000090                            91  *---------------------MM LIST SOURCE------------------------
00000090                            92  * Logic for a LIST source operand for MOVEM
00000090                            93  *-----------------------------------------------------------
00000090                            94  MM_LS_SRC   *Bandaid, instead of decoding list, just display hex value
00000090  18FC 0024                 95              MOVE.B      #'$',(A4)+
00000094  4EB9 000003BA             96              JSR         W_IMD
0000009A                            97              
0000009A                            98              *Deal with list first
0000009A  18FC 002C                 99              MOVE.B      #',',(A4)+
0000009E  4EB9 0000019E            100              JSR         GEN_EA_CODE *Add EA code
000000A4  4E75                     101              RTS
000000A6                           102  
000000A6                           103  *---------------------MOVEQ_EA-------------------------------
000000A6                           104  * Logic for the MOVEQ.L OPCODE to produce an operand.
000000A6                           105  * D2/D3/D6 avaliable for shifting
000000A6                           106  * Data must end up in D1 before longword to ascii trans
000000A6                           107  *-----------------------------------------------------------
000000A6  4281                     108  MOVEQ_EA    CLR.L       D1          *Make sure D1 is clear
000000A8  3207                     109              MOVE.W      D7,D1       *copy original opcode
000000AA  18FC 0020                110              MOVE.B      #' ',(A4)+
000000AE  18FC 0020                111              MOVE.B      #' ',(A4)+
000000B2  18FC 0023                112              MOVE.B      #'#',(A4)+
000000B6  18FC 0024                113              MOVE.B      #'$',(A4)+
000000BA  4EB9 00000482            114              JSR         B_H2A       *Add data in 8 least sig bits (byte)
000000C0  18FC 002C                115              MOVE.B      #',',(A4)+
000000C4  18FC 0044                116              MOVE.B      #'D',(A4)+
000000C8                           117              
000000C8  4281                     118              CLR.L       D1
000000CA  123C 000D                119              MOVE.B      #13,D1
000000CE  E94B                     120              LSL.W       #4,D3       *Shifting to isolate Dest REGISTER
000000D0  E26B                     121              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
000000D2                           122              
000000D2  4EB9 00000206            123              JSR         REG_CODE    *Decode Dn and add number to string            
000000D8                           124  
000000D8  4E75                     125              RTS
000000DA                           126              
000000DA                           127  *---------------------ADDQ_EA-------------------------------
000000DA                           128  * Logic for the ADDQ OPCODE to produce an operand.
000000DA                           129  * D1/D2/D3/D6 avaliable for shifting
000000DA                           130  *-----------------------------------------------------------
000000DA  4281                     131  ADDQ_EA     CLR.L       D1          *Make sure D1 is clear
000000DC  3207                     132              MOVE.W      D7,D1       *Move untoched opcode into D1 for Manipulation
000000DE                           133              
000000DE  E949                     134              LSL.W       #4,D1       *Clear more sig bits
000000E0  4282                     135              CLR.L       D2          * for shifting
000000E2  143C 000D                136              MOVE.B      #13,D2      *To move data bits into lsb
000000E6  E469                     137              LSR.W       D2,D1       *Data now in lsb
000000E8                           138              
000000E8  18FC 0023                139              MOVE.B      #'#',(A4)+
000000EC  18FC 0024                140              MOVE.B      #'$',(A4)+
000000F0  4EB9 000003D2            141              JSR         ADDQ_ID     *Jump to ADDQ_ID (immeidate data selector)
000000F6  18FC 002C                142              MOVE.B      #',',(A4)+  *Add seperator
000000FA  4EB9 0000019E            143              JSR         GEN_EA_CODE *Add the ea code
00000100                           144              
00000100  4E75                     145              RTS
00000102                           146  
00000102                           147  *---------------------Data source, EA dest------------------
00000102                           148  * Logic for opcodes with a #<data> source, <EA> destination
00000102                           149  * opcodes: SUBI, ADDI
00000102                           150  *-----------------------------------------------------------
00000102  4EB9 00000448            151  SR_MEM      JSR         SR_MEM_ADDS     *Add Size characters
00000108  4EB9 0000019E            152              JSR         GEN_EA_CODE
0000010E  4E75                     153              RTS
00000110                           154  
00000110                           155  
00000110                           156  *---------------------Data source, EA dest------------------
00000110                           157  * Logic for opcodes with a #<data> source, <EA> destination
00000110                           158  * opcodes: SUBI, ADDI Size is in D4
00000110                           159  *-----------------------------------------------------------
00000110  4EB9 0000016A            160  SR_REG      JSR         ISO_IR      *Place in D3
00000116  4EB9 0000017E            161              JSR         ISO_RCOUNT  *Place in D2
0000011C  B63C 0000                162              CMP.B       #0, D3      *Is it an immediate data shift?
00000120  6700 000A                163              BEQ         IMD_SR
00000124  B63C 0001                164              CMP.B       #1, D3      *Is it an Dn shift?
00000128  6700 0016                165              BEQ         DN_SR
0000012C                           166              
0000012C                           167              
0000012C  18FC 0023                168  IMD_SR      MOVE.B      #'#',(A4)+
00000130  18FC 0024                169              MOVE.B      #'$',(A4)+
00000134  4281                     170              CLR.L       D1
00000136  3202                     171              MOVE.W      D2,D1
00000138  4EB9 000003D2            172              JSR         ADDQ_ID     *Same number sequence as ADDQ (add number of shifts)
0000013E  4E75                     173              RTS
00000140                           174  
00000140                           175  
00000140  1602                     176  DN_SR       MOVE.B      D2,D3
00000142  18FC 0044                177              MOVE.B      #'D',(A4)+
00000146  4EB9 000002B6            178              JSR         REG_TBL
0000014C  18FC 002C                179              MOVE.B      #',',(A4)+
00000150  18FC 0044                180              MOVE.B      #'D',(A4)+
00000154                           181              
00000154  4281                     182              CLR.L       D1
00000156  123C 000D                183              MOVE.B      #13,D1
0000015A  4283                     184              CLR.L       D3
0000015C  3607                     185              MOVE.W      D7,D3
0000015E  E36B                     186              LSL.W       D1,D3       *Shifting to isolate REGISTER (#13 already in D1)
00000160  E26B                     187              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
00000162  4EB9 000002B6            188              JSR         REG_TBL
00000168                           189              
00000168  4E75                     190              RTS         
0000016A                           191  
0000016A                           192  *============================================================
0000016A                           193  *======================BIT ISOLATORS=========================
0000016A                           194  *============================================================
0000016A                           195  
0000016A                           196  *-------------------------MM_DR-----------------------------
0000016A                           197  * For:SHIFTS/ROTATIONS. Place IR bit in D3
0000016A                           198  *-----------------------------------------------------------
0000016A  4281                     199  ISO_IR      CLR.L       D1
0000016C  4283                     200              CLR.L       D3
0000016E                           201              
0000016E  3607                     202              MOVE.W      D7,D3
00000170                           203              
00000170  123C 000A                204              MOVE.B      #10,D1
00000174  E36B                     205              LSL.W       D1,D3
00000176  123C 000F                206              MOVE.B      #15,D1
0000017A  E26B                     207              LSR.W       D1,D3
0000017C                           208                
0000017C  4E75                     209              RTS
0000017E                           210  
0000017E                           211  *-------------------------MM_DR-----------------------------
0000017E                           212  * For:SHIFTS/ROTATIONS. Place Reg/Gount in D2
0000017E                           213  *-----------------------------------------------------------
0000017E  4281                     214  ISO_RCOUNT  CLR.L       D1
00000180  4282                     215              CLR.L       D2
00000182                           216               
00000182  3407                     217              MOVE.W      D7,D2
00000184                           218              
00000184  E94A                     219              LSL.W       #4,D2
00000186  123C 000D                220              MOVE.B      #13,D1
0000018A  E26A                     221              LSR.W       D1,D2
0000018C                           222              
0000018C  4E75                     223              RTS
0000018E                           224  
0000018E                           225  *-------------------------MM_DR-----------------------------
0000018E                           226  * For:MOVEM. This subroutine isolates the MOVEM DR bit into
0000018E                           227  *     D2
0000018E                           228  *-----------------------------------------------------------
0000018E  4281                     229  MM_DR       CLR.L       D1
00000190  4282                     230              CLR.L       D2
00000192  3407                     231              MOVE.W      D7,D2
00000194  EB4A                     232              LSL.W       #5,D2
00000196  123C 000F                233              MOVE.B      #15,D1
0000019A  E26A                     234              LSR.W       D1,D2
0000019C  4E75                     235              RTS
0000019E                           236  
0000019E                           237  *-------------------------GEN EA CODE-----------------------
0000019E                           238  * For: SUBI, ADDI, MOVEM, LEA, JSR, ADDQ, OR, DIVU, SUB,
0000019E                           239  *     MULS, AND, ADD, ADDA
0000019E                           240  * Probably for: LSL/LSR, ASL/ASR,ROL/ROR.
0000019E                           241  *
0000019E                           242  *     - Isolates EA mode into D6
0000019E                           243  *     - Isolates EA register into D3
0000019E                           244  *     - initiates EA decode chain
0000019E                           245  *-----------------------------------------------------------
0000019E  4283                     246  GEN_EA_CODE CLR.L       D3          *Make sure D3 is clear
000001A0  4286                     247              CLR.L       D6          *Make sure D6 is clear
000001A2  4281                     248              CLR.L       D1          *Make sure D1 is clear for shifting
000001A4                           249              
000001A4  3607                     250              MOVE.W      D7,D3       *Move untouched opcode into D3
000001A6  3C07                     251              MOVE.W      D7,D6       *Move untouched opcode into D6
000001A8                           252              
000001A8  123C 000A                253              MOVE.B      #10,D1      *Shifting to isolate MODE
000001AC  E36E                     254              LSL.W       D1,D6       
000001AE  123C 000D                255              MOVE.B      #13,D1
000001B2  E26E                     256              LSR.W       D1,D6       *Move MODE bits to LSB position
000001B4                           257              
000001B4  E36B                     258              LSL.W       D1,D3       *Shifting to isolate REGISTER (#13 already in D1)
000001B6  E26B                     259              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
000001B8                           260              
000001B8  4EB9 0000021C            261              JSR         EA_TBL      *Decode MODE to select correct <EA>
000001BE  4E75                     262              RTS
000001C0                           263              
000001C0                           264  *-------------------------MOVE EA CODE-----------------------
000001C0                           265  * For: MOVE, MOVEA
000001C0                           266  *
000001C0                           267  *     - Isolates Source Mode and Reg into D3, D6 respec.
000001C0                           268  *     - initiates SOURCE decode chain
000001C0                           269  *     - Isolates Dest Mode and REg into D3, and D6 respec.
000001C0                           270  *     - initiates DEST decode chain
000001C0                           271  *     - Code flows like this:
000001C0                           272  *       SOURCE
000001C0                           273  *       SEPERATOR
000001C0                           274  *       DESTINATION
000001C0                           275  *-----------------------------------------------------------
000001C0  4283                     276  MOV_EA_CODE CLR.L       D3          *Make sure D3 is clear
000001C2  4286                     277              CLR.L       D6          *Make sure D6 is clear
000001C4  4281                     278              CLR.L       D1          *Make sure D1 is clear for shifting
000001C6                           279              
000001C6  3607                     280              MOVE.W      D7,D3       *Move untouched opcode into D3
000001C8  3C07                     281              MOVE.W      D7,D6       *Move untouched opcode into D6
000001CA                           282              
000001CA  123C 000A                283              MOVE.B      #10,D1      *Shifting to isolate MODE
000001CE  E36E                     284              LSL.W       D1,D6       
000001D0  123C 000D                285              MOVE.B      #13,D1
000001D4  E26E                     286              LSR.W       D1,D6       *Move MODE bits to LSB position
000001D6                           287              
000001D6  E36B                     288              LSL.W       D1,D3       *Shifting to isolate REGISTER (#13 already in D1)
000001D8  E26B                     289              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
000001DA                           290              
000001DA  4EB9 0000021C            291              JSR         EA_TBL      *Decode MODE to select correct <EA>
000001E0                           292              
000001E0  18FC 002C                293              MOVE.B      #',',(A4)+  *SEPERATOR
000001E4                           294              
000001E4  4283                     295              CLR.L       D3          *Make sure D3 is clear
000001E6  4286                     296              CLR.L       D6          *Make sure D6 is clear
000001E8  4281                     297              CLR.L       D1          *Make sure D1 is clear for shifting
000001EA                           298              
000001EA  3607                     299              MOVE.W      D7,D3       *Move untouched opcode into D3
000001EC  3C07                     300              MOVE.W      D7,D6       *Move untouched opcode into D6
000001EE                           301              
000001EE  123C 0007                302              MOVE.B      #7,D1      *Shifting to isolate MODE
000001F2  E36E                     303              LSL.W       D1,D6       
000001F4  123C 000D                304              MOVE.B      #13,D1
000001F8  E26E                     305              LSR.W       D1,D6       *Move MODE bits to LSB position
000001FA                           306              
000001FA  E94B                     307              LSL.W       #4,D3       *Shifting to isolate Dest REGISTER
000001FC  E26B                     308              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
000001FE                           309              
000001FE  4EB9 0000021C            310              JSR         EA_TBL      *Decode MODE to select correct <EA>
00000204                           311              
00000204  4E75                     312              RTS
00000206                           313              
00000206                           314              
00000206                           315  *-------------------------DECODE REG NUM--------------------
00000206                           316  * This function decides a DN to get the data register number
00000206                           317  * It then adds the number to the output strings
00000206                           318  *-----------------------------------------------------------
00000206  4283                     319  REG_CODE    CLR.L       D3          *Make sure D3 is empty to isolate Dn register
00000208  3607                     320              MOVE.W      D7,D3       *Copy untoched opcode into D3 for manipulation
0000020A  E94B                     321              LSL.W       #4,D3       *Isolate bits and move to LSB position
0000020C  4282                     322              CLR.L       D2
0000020E  143C 000D                323              MOVE.B      #13,D2
00000212  E46B                     324              LSR.W       D2,D3
00000214  4EB9 000002B6            325              JSR         REG_TBL     *Jump to register table.
0000021A  4E75                     326              RTS
0000021C                           327              
0000021C                           328  
0000021C                           329  
0000021C                           330  *===========================================================
0000021C                           331  *=========================JUMP TABLES=======================
0000021C                           332  *===========================================================
0000021C                           333  
0000021C                           334  *-------------------------EA_TBL----------------------------
0000021C                           335  * This is a jump table for selecting the correct addressing
0000021C                           336  * MODE which is in D6.
0000021C                           337  * Possible Modes: Dn = 0, An = 1, (An) = 2, (An)+ = 3,
0000021C                           338  *                  -(An) = 4, Absolutes = 111
0000021C                           339  *-----------------------------------------------------------
0000021C  BC3C 0000                340  EA_TBL      CMP.B       #0,D6       *Select correct <EA> mode
00000220  6700 0030                341              BEQ         DRD
00000224  BC3C 0001                342              CMP.B       #1,D6
00000228  6700 0034                343              BEQ         ARD
0000022C  BC3C 0002                344              CMP.B       #2,D6
00000230  6700 0038                345              BEQ         ARI
00000234  BC3C 0003                346              CMP.B       #3,D6
00000238  6700 0044                347              BEQ         ARI_INC
0000023C  BC3C 0004                348              CMP.B       #4,D6
00000240  6700 0054                349              BEQ         ARI_DEC
00000244  BC3C 0007                350              CMP.B       #7,D6
00000248  6700 0064                351              BEQ         ABS_ADDR
Line 352 ERROR: Undefined symbol
0000024C  4EF9 004DBB8E            352              JMP         INVALID     *Got here? Must be bad data.
00000252                           353  
00000252  18FC 0044                354  DRD         MOVE.B      #'D',(A4)+
00000256  4EB9 000002B6            355              JSR         REG_TBL     *Reg num should be in D3
0000025C  4E75                     356              RTS
0000025E                           357  
0000025E  18FC 0041                358  ARD         MOVE.B      #'A',(A4)+
00000262  4EB9 000002B6            359              JSR         REG_TBL     *Reg num should be in D3
00000268  4E75                     360              RTS
0000026A                           361  
0000026A  18FC 0028                362  ARI         MOVE.B      #'(',(A4)+
0000026E  18FC 0041                363              MOVE.B      #'A',(A4)+
00000272  4EB9 000002B6            364              JSR         REG_TBL     *Reg num should be in D3
00000278  18FC 0029                365              MOVE.B      #')',(A4)+
0000027C  4E75                     366              RTS
0000027E                           367  
0000027E  18FC 0028                368  ARI_INC     MOVE.B      #'(',(A4)+
00000282  18FC 0041                369              MOVE.B      #'A',(A4)+
00000286  4EB9 000002B6            370              JSR         REG_TBL     *Reg num should be in D3
0000028C  18FC 0029                371              MOVE.B      #')',(A4)+
00000290  18FC 002B                372              MOVE.B      #'+',(A4)+
00000294  4E75                     373              RTS
00000296                           374  
00000296  18FC 002D                375  ARI_DEC     MOVE.B      #'-',(A4)+
0000029A  18FC 0028                376              MOVE.B      #'(',(A4)+
0000029E  18FC 0041                377              MOVE.B      #'A',(A4)+
000002A2  4EB9 000002B6            378              JSR         REG_TBL     *Reg num should be in D3
000002A8  18FC 0029                379              MOVE.B      #')',(A4)+
000002AC  4E75                     380              RTS
000002AE                           381  
000002AE  4EB9 0000032C            382  ABS_ADDR    JSR         ABS_TBL
000002B4  4E75                     383              RTS
000002B6                           384              
000002B6                           385  *-------------------------REG_TBL---------------------------
000002B6                           386  * This is a jump table for selecting register (both data and
000002B6                           387  * address) numbers. It looks for the bit value in D3
000002B6                           388  *-----------------------------------------------------------
000002B6  B63C 0000                389  REG_TBL     CMP.B       #0,D3       *Select correct number to add to output strings
000002BA  6700 0040                390              BEQ         NUM_0
000002BE  B63C 0001                391              CMP.B       #1,D3
000002C2  6700 003E                392              BEQ         NUM_1
000002C6  B63C 0002                393              CMP.B       #2,D3
000002CA  6700 003C                394              BEQ         NUM_2
000002CE  B63C 0003                395              CMP.B       #3,D3
000002D2  6700 003A                396              BEQ         NUM_3
000002D6  B63C 0004                397              CMP.B       #4,D3
000002DA  6700 0038                398              BEQ         NUM_4
000002DE  B63C 0005                399              CMP.B       #5,D3
000002E2  6700 0036                400              BEQ         NUM_5
000002E6  B63C 0006                401              CMP.B       #6,D3
000002EA  6700 0034                402              BEQ         NUM_6
000002EE  B63C 0007                403              CMP.B       #7,D3
000002F2  6700 0032                404              BEQ         NUM_7
Line 405 ERROR: Undefined symbol
000002F6  4EF9 004DBB8E            405              JMP         INVALID     *Got here? Must be bad data.
000002FC                           406              
000002FC  18FC 0030                407  NUM_0       MOVE.B      #'0',(A4)+
00000300  4E75                     408              RTS              
00000302  18FC 0031                409  NUM_1       MOVE.B      #'1',(A4)+
00000306  4E75                     410              RTS
00000308  18FC 0032                411  NUM_2       MOVE.B      #'2',(A4)+
0000030C  4E75                     412              RTS
0000030E  18FC 0033                413  NUM_3       MOVE.B      #'3',(A4)+
00000312  4E75                     414              RTS
00000314  18FC 0034                415  NUM_4       MOVE.B      #'4',(A4)+
00000318  4E75                     416              RTS
0000031A  18FC 0035                417  NUM_5       MOVE.B      #'5',(A4)+
0000031E  4E75                     418              RTS
00000320  18FC 0036                419  NUM_6       MOVE.B      #'6',(A4)+
00000324  4E75                     420              RTS
00000326  18FC 0037                421  NUM_7       MOVE.B      #'7',(A4)+
0000032A  4E75                     422              RTS
0000032C                           423  
0000032C                           424  *-------------------------ABS_TBL----------------------------
0000032C                           425  * This is a jump table for selecting the correct ABSOLUTE
0000032C                           426  * Addressing mode [(xxx).W, (xxx).L, #<data>.
0000032C                           427  * 3 Possibilities: (xxx).W = 0, (xxx).L = 1, #<data> = 4
0000032C                           428  * Register number should be in D3
0000032C                           429  *-----------------------------------------------------------
0000032C  B63C 0000                430  ABS_TBL     CMP.B       #0,D3       *Select correct number to add to output strings
00000330  6700 0018                431              BEQ         ABW
00000334  B63C 0001                432              CMP.B       #1,D3
00000338  6700 0020                433              BEQ         ABL
0000033C  B63C 0004                434              CMP.B       #4,D3
00000340  6700 0028                435              BEQ         IDATA
Line 436 ERROR: Undefined symbol
00000344  4EF9 004DBB8E            436              JMP         INVALID     *Got here? Must be bad data.
0000034A                           437              
0000034A  18FC 0024                438  ABW         MOVE.B      #'$',(A4)+
0000034E  4281                     439              CLR.L       D1          *Make sure D1 is clear
00000350  321D                     440              MOVE.W      (A5)+, D1   *Increment counter by WORD (grab word data)
00000352  4EB9 000004C4            441              JSR         W_H2A       *convert absolute value to ascii and add to good string
00000358  4E75                     442              RTS
0000035A                           443  
0000035A  18FC 0024                444  ABL         MOVE.B      #'$',(A4)+
0000035E  4281                     445              CLR.L       D1          *Make sure D1 is clear
00000360  221D                     446              MOVE.L      (A5)+, D1   *Increment counter by WORD (grab word data)
00000362  4EB9 00000506            447              JSR         L_H2A
00000368  4E75                     448              RTS
0000036A                           449              
0000036A  18FC 0023                450  IDATA       MOVE.B      #'#',(A4)+
0000036E  18FC 0024                451              MOVE.B      #'$',(A4)+  *Immediate value will be in Hex
00000372  4EB9 0000037A            452              JSR         IMD_TBL
00000378  4E75                     453              RTS
0000037A                           454              
0000037A                           455  *-------------------------IMD_TBL---------------------------
0000037A                           456  * This is a jump table for selecting the correct Immediate
0000037A                           457  * Data output based on the size code. Size code should be in
0000037A                           458  * D4
0000037A                           459  *-----------------------------------------------------------
0000037A  B83C 0000                460  IMD_TBL     CMP.B       #0,D4       *Is it byte size code?
0000037E  6700 002E                461              BEQ         B_IMD       
00000382  B83C 0004                462              CMP.B       #4,D4
00000386  6700 0026                463              BEQ         B_IMD
0000038A                           464  
0000038A  B83C 0001                465              CMP.B       #1,D4       *Is it a word size code?
0000038E  6700 002A                466              BEQ         W_IMD
00000392  B83C 0005                467              CMP.B       #5,D4
00000396  6700 0022                468              BEQ         W_IMD
0000039A                           469              
0000039A  B83C 0002                470              CMP.B       #2,D4       *Is it a long word size code?
0000039E  6700 0026                471              BEQ         L_IMD
000003A2  B83C 0006                472              CMP.B       #6,D4
000003A6  6700 001E                473              BEQ         L_IMD
000003AA                           474              
Line 475 ERROR: Undefined symbol
000003AA  6000 B7E2                475              BRA         INVALID     *Got here? Must be bad data.
000003AE                           476              
000003AE  4281                     477  B_IMD       CLR.L       D1
000003B0  321D                     478              MOVE.W      (A5)+,D1    *Make sure D1 is clear
000003B2  4EB9 00000482            479              JSR         B_H2A       *Incremeint by WORD (but translate byte only)
000003B8  4E75                     480              RTS
000003BA                           481  
000003BA  4281                     482  W_IMD       CLR.L       D1          *Make sure D1 is clear
000003BC  321D                     483              MOVE.W      (A5)+, D1   *Increment counter by WORD (grab word data)
000003BE  4EB9 000004C4            484              JSR         W_H2A
000003C4  4E75                     485              RTS
000003C6                           486  
000003C6  4281                     487  L_IMD       CLR.L       D1          *Make sure D1 is clear
000003C8  221D                     488              MOVE.L      (A5)+, D1   *Increment counter by LONGWORD (grab LONGWORD data)
000003CA  4EB9 00000506            489              JSR         L_H2A
000003D0  4E75                     490              RTS
000003D2                           491  
000003D2                           492  *---------------------ADDQ_ID-------------------------------
000003D2                           493  * A simple immeidate data selector for ADDQ. Simply adds
000003D2                           494  * the the correct character (1 thru 8) to good string based
000003D2                           495  * on data bits in D1. ALSO USED FOR SHIFT/ROTATIONS
000003D2                           496  *-----------------------------------------------------------
000003D2  B23C 0000                497  ADDQ_ID     CMP.B       #0,D1       *Select correct number to add to output strings
000003D6  6700 0040                498              BEQ         AQ_0
000003DA  B23C 0001                499              CMP.B       #1,D1
000003DE  6700 003E                500              BEQ         AQ_1
000003E2  B23C 0002                501              CMP.B       #2,D1
000003E6  6700 003C                502              BEQ         AQ_2
000003EA  B23C 0003                503              CMP.B       #3,D1
000003EE  6700 003A                504              BEQ         AQ_3
000003F2  B23C 0004                505              CMP.B       #4,D1
000003F6  6700 0038                506              BEQ         AQ_4
000003FA  B23C 0005                507              CMP.B       #5,D1
000003FE  6700 0036                508              BEQ         AQ_5
00000402  B23C 0006                509              CMP.B       #6,D1
00000406  6700 0034                510              BEQ         AQ_6
0000040A  B23C 0007                511              CMP.B       #7,D1
0000040E  6700 0032                512              BEQ         AQ_7
Line 513 ERROR: Undefined symbol
00000412  4EF9 004DBB8E            513              JMP         INVALID     *Got here? Something is wrong.
00000418                           514              
00000418  18FC 0038                515  AQ_0        MOVE.B      #'8',(A4)+
0000041C  4E75                     516              RTS              
0000041E  18FC 0031                517  AQ_1        MOVE.B      #'1',(A4)+
00000422  4E75                     518              RTS
00000424  18FC 0032                519  AQ_2        MOVE.B      #'2',(A4)+
00000428  4E75                     520              RTS
0000042A  18FC 0033                521  AQ_3        MOVE.B      #'3',(A4)+
0000042E  4E75                     522              RTS
00000430  18FC 0034                523  AQ_4        MOVE.B      #'4',(A4)+
00000434  4E75                     524              RTS
00000436  18FC 0035                525  AQ_5        MOVE.B      #'5',(A4)+
0000043A  4E75                     526              RTS
0000043C  18FC 0036                527  AQ_6        MOVE.B      #'6',(A4)+
00000440  4E75                     528              RTS
00000442  18FC 0037                529  AQ_7        MOVE.B      #'7',(A4)+
00000446  4E75                     530              RTS          
00000448                           531  
00000448                           532              
00000448                           533  
00000448                           534  *============================================================
00000448                           535  *=========================HELPER SUBROUTINES=================
00000448                           536  *============================================================
00000448                           537  
00000448                           538  *-------------------------Add Size code to SR MEM-----------
00000448                           539  * Helper function to add size characters to SR_MEM
00000448                           540  *
00000448                           541  *-----------------------------------------------------------
00000448  4282                     542  SR_MEM_ADDS CLR.L       D2
0000044A  3407                     543              MOVE.W      D7,D2
0000044C                           544              
0000044C  4281                     545              CLR.L       D1
0000044E  123C 000D                546              MOVE.B      #13,D1
00000452  E36A                     547              LSL.W       D1,D2       *Shifting to isolate REGISTER (#13 already in D1)
00000454  E26A                     548              LSR.W       D1,D2
00000456                           549              
00000456  B43C 0000                550              CMP.B       #0,D2       *is it a word?
0000045A  6700 000A                551              BEQ         SR_MEM_W
0000045E  B43C 0001                552              CMP.B       #1,D2       *is it a word?
00000462  6700 0010                553              BEQ         SR_MEM_L
00000466                           554              
00000466  18FC 0057                555  SR_MEM_W    MOVE.B      #'W',(A4)+
0000046A  18FC 0020                556              MOVE.B      #' ',(A4)+
0000046E  18FC 0020                557              MOVE.B      #' ',(A4)+
00000472  4E75                     558              RTS
00000474                           559  
00000474  18FC 0057                560  SR_MEM_L    MOVE.B      #'W',(A4)+
00000478  18FC 0020                561              MOVE.B      #' ',(A4)+
0000047C  18FC 0020                562              MOVE.B      #' ',(A4)+
00000480  4E75                     563              RTS
00000482                           564  
00000482                           565  *-------------------------INVALID DATA----------------------
00000482                           566  * This subroutine adds invalid data to invalid string.
00000482                           567  *-----------------------------------------------------------
00000482                           568  INV_DATA *need to implement currently invalid data is treated as an invalid opcode.
00000482                           569  
00000482                           570  
00000482                           571  *-------------------------Byte Hex to Ascii-----------------
00000482                           572  * Converts a Byte value hex address to ascii in D1
00000482                           573  *-----------------------------------------------------------
00000482  4280                     574  B_H2A       CLR.L       D0          *Make sure D0 is clear (for counting)
00000484  4282                     575              CLR.L       D2          *Make sure D2 is empty (each individual char)
00000486  4283                     576              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
00000488  103C 0002                577              MOVE.B      #$2,D0      *Counter
0000048C  6000 0002                578              BRA         B_ISO_DIG   *Begin isolating chars
00000490                           579              
00000490  E919                     580  B_ISO_DIG   ROL.B       #4,D1       *Move first significant hex char to least sig position
00000492                           581              
00000492  1401                     582              MOVE.B      D1,D2       *Move to D2 to isolate least sig hex char
00000494                           583              
00000494  163C 0004                584              MOVE.B      #4,D3      *Shift left 28 times
00000498  E72A                     585              LSL.B       D3,D2       *Isolated hex digit now is $X0000000
0000049A  E91A                     586              ROL.B       #4,D2       *Isolated hex digit is now $0000000X
0000049C                           587              
0000049C  0C02 0009                588              CMPI.B      #$9,D2      *Is it a number?
000004A0  6F00 0006                589              BLE         B_NUM       *If it is, process number
000004A4  6000 000A                590              BRA         B_LET       *If not, process letter
000004A8                           591              
000004A8  0602 0030                592  B_NUM       ADDI.B      #$30,D2     *Make it an ascii number
000004AC  6000 000A                593              BRA         B_ADD_CHAR  *add to strings and continue
000004B0                           594              
000004B0  0602 0037                595  B_LET       ADDI.B      #$37,D2     *Make it an ascii letter
000004B4  6000 0002                596              BRA         B_ADD_CHAR  *add to strings and continue
000004B8                           597  
000004B8  18C2                     598  B_ADD_CHAR  MOVE.B      D2,(A4)+    *Add to the good data string
000004BA  5300                     599              SUBI.B      #$1,D0      *decrement counter
000004BC  0C00 0000                600              CMPI.B      #$0,D0      *Check if we're done            
000004C0  6ECE                     601              BGT         B_ISO_DIG   *If not, continue tranlation   
000004C2                           602              
000004C2  4E75                     603              RTS
000004C4                           604  
000004C4                           605  *-------------------------Word Hex to Ascii-----------------
000004C4                           606  * Converts a Word length hex value to ASCII in D1
000004C4                           607  *-----------------------------------------------------------
000004C4  4280                     608  W_H2A       CLR.L       D0          *Make sure D0 is clear (for counting)
000004C6  4282                     609              CLR.L       D2          *Make sure D2 is empty (each individual char)
000004C8  4283                     610              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
000004CA  103C 0004                611              MOVE.B      #$4,D0      *Counter
000004CE  6000 0002                612              BRA         W_ISO_DIG   *Begin isolating chars
000004D2                           613              
000004D2  E959                     614  W_ISO_DIG   ROL.W       #4,D1       *Move first significant hex char to least sig position
000004D4                           615              
000004D4  1401                     616              MOVE.B      D1,D2       *Move to D2 to isolate least sig hex char
000004D6                           617              
000004D6  163C 000C                618              MOVE.B      #12,D3      *Shift left 28 times
000004DA  E76A                     619              LSL.W       D3,D2       *Isolated hex digit now is $X0000000
000004DC  E95A                     620              ROL.W       #4,D2       *Isolated hex digit is now $0000000X
000004DE                           621              
000004DE  0C02 0009                622              CMPI.B      #$9,D2      *Is it a number?
000004E2  6F00 0006                623              BLE         W_NUM       *If it is, process number
000004E6  6000 000A                624              BRA         W_LET       *If not, process letter
000004EA                           625              
000004EA  0602 0030                626  W_NUM       ADDI.B      #$30,D2     *Make it an ascii number
000004EE  6000 000A                627              BRA         W_ADD_CHAR  *add to strings and continue
000004F2                           628              
000004F2  0602 0037                629  W_LET       ADDI.B      #$37,D2     *Make it an ascii letter
000004F6  6000 0002                630              BRA         W_ADD_CHAR  *add to strings and continue
000004FA                           631  
000004FA  18C2                     632  W_ADD_CHAR  MOVE.B      D2,(A4)+    *Add to the good data string
000004FC  5300                     633              SUBI.B      #$1,D0      *decrement counter
000004FE  0C00 0000                634              CMPI.B      #$0,D0      *Check if we're done            
00000502  6ECE                     635              BGT         W_ISO_DIG   *If not, continue tranlation   
00000504                           636              
00000504  4E75                     637              RTS
00000506                           638  *-------------------------Long Hex to Ascii-----------------
00000506                           639  * Converts a Longword hex sequence to ascii in D1
00000506                           640  *-----------------------------------------------------------
00000506  4280                     641  L_H2A       CLR.L       D0          *Make sure D0 is clear (for counting)
00000508  4282                     642              CLR.L       D2          *Make sure D2 is empty (each individual char)
0000050A  4283                     643              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
0000050C  103C 0008                644              MOVE.B      #$8,D0      *Counter
00000510  6000 0002                645              BRA         L_ISO_DIG   *Begin isolating chars
00000514                           646              
00000514  E999                     647  L_ISO_DIG   ROL.L       #4,D1       *Move first significant hex char to least sig position
00000516                           648              
00000516  1401                     649              MOVE.B      D1,D2       *Move to D2 to isolate least sig hex char
00000518                           650              
00000518  163C 001C                651              MOVE.B      #28,D3      *Shift left 28 times
0000051C  E7AA                     652              LSL.L       D3,D2       *Isolated hex digit now is $X0000000
0000051E  E99A                     653              ROL.L       #4,D2       *Isolated hex digit is now $0000000X
00000520                           654              
00000520  0C02 0009                655              CMPI.B      #$9,D2      *Is it a number?
00000524  6F00 0006                656              BLE         L_NUM       *If it is, process number
00000528  6000 000A                657              BRA         L_LET       *If not, process letter
0000052C                           658              
0000052C  0602 0030                659  L_NUM       ADDI.B      #$30,D2     *Make it an ascii number
00000530  6000 000A                660              BRA         L_ADD_CHAR  *add to strings and continue
00000534                           661              
00000534  0602 0037                662  L_LET       ADDI.B      #$37,D2     *Make it an ascii letter
00000538  6000 0002                663              BRA         L_ADD_CHAR  *add to strings and continue
0000053C                           664  
0000053C  18C2                     665  L_ADD_CHAR  MOVE.B      D2,(A4)+    *Add to the good data string
0000053E  5300                     666              SUBI.B      #$1,D0      *decrement counter
00000540  0C00 0000                667              CMPI.B      #$0,D0      *Check if we're done            
00000544  6ECE                     668              BGT         L_ISO_DIG   *If not, continue tranlation   
00000546                           669              
00000546  4E75                     670              RTS
00000548                           671  
00000548                           672  
00000548                           673  
00000548                           674  
00000548                           675  
00000548                           676  
00000548                           677  
00000548                           678  
Line 679 WARNING: END directive missing, starting address not set

5 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABL                 35A
ABS_ADDR            2AE
ABS_TBL             32C
ABW                 34A
ADDQ_EA             DA
ADDQ_ID             3D2
AQ_0                418
AQ_1                41E
AQ_2                424
AQ_3                42A
AQ_4                430
AQ_5                436
AQ_6                43C
AQ_7                442
ARD                 25E
ARI                 26A
ARI_DEC             296
ARI_INC             27E
B_ADD_CHAR          4B8
B_H2A               482
B_IMD               3AE
B_ISO_DIG           490
B_LET               4B0
B_NUM               4A8
DN_SR               140
DN_SRC              2C
DRD                 252
EASRC_ADES          16
EASRC_DDES          0
EA_TBL              21C
GEN_EA_CODE         19E
IDATA               36A
IDATASRC_EA         42
IMD_SR              12C
IMD_TBL             37A
INV_DATA            482
ISO_IR              16A
ISO_RCOUNT          17E
L_ADD_CHAR          53C
L_H2A               506
L_IMD               3C6
L_ISO_DIG           514
L_LET               534
L_NUM               52C
MM_DR               18E
MM_EA_SRC           7A
MM_LS_SRC           90
MM_M2R              72
MM_OP_ORD           54
MM_R2M              6A
MOVEQ_EA            A6
MOV_EA_CODE         1C0
NUM_0               2FC
NUM_1               302
NUM_2               308
NUM_3               30E
NUM_4               314
NUM_5               31A
NUM_6               320
NUM_7               326
REG_CODE            206
REG_TBL             2B6
SR_MEM              102
SR_MEM_ADDS         448
SR_MEM_L            474
SR_MEM_W            466
SR_REG              110
W_ADD_CHAR          4FA
W_H2A               4C4
W_IMD               3BA
W_ISO_DIG           4D2
W_LET               4F2
W_NUM               4EA
