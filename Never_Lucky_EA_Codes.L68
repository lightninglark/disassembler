00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/22/2017 9:33:48 AM

00000000                             1  ************************************************************
00000000                             2  * TEAM NEVERY LUCKY DISSASSEMBLER
00000000                             3  * This file includes Parameter logic (Order, EA, DN/AN/LIST)
00000000                             4  * Logic.
00000000                             5  ************************************************************
00000000                             6  
00000000                             7  *============================================================
00000000                             8  *================OPERAND ORDER SUBROUTINES===================
00000000                             9  *============================================================
00000000                            10  * WE'LL MAY STILL NEED TO IMPLEMENT SOME TYPE OF AN_SRC,
00000000                            11  * AN_DEST, DATA_SRC (But maybe not since we'll know the 
00000000                            12  * specific order of operands for those functions.
00000000                            13  
00000000                            14  *---------------------EA SOURCE-----------------------------
00000000                            15  * Logic for an EA source operand for opcodes: 
00000000                            16  * ADD, AND, OR, SUB
00000000                            17  *-----------------------------------------------------------
00000000  4EB9 00000032             18  EA_SRC      JSR         GEN_EA_CODE *Deal with EA code First
00000006  18FC 002C                 19              MOVE.B      #',',(A4)+
0000000A  18FC 0044                 20              MOVE.B      #'D',(A4)+
0000000E  4EB9 00000056             21              JSR         DN_CODE     *Decode Dn and add number to string
00000014  4E75                      22              RTS
00000016                            23  
00000016                            24  *---------------------DN SOURCE-----------------------------
00000016                            25  * Logic for a DN source operand for opcodes:
00000016                            26  * ADD, AND, OR, SUB
00000016                            27  *-----------------------------------------------------------
00000016  18FC 0044                 28  DN_SRC      MOVE.B      #'D',(A4)+
0000001A  4EB9 00000056             29              JSR         DN_CODE     *Decode Dn and add number to string
00000020  18FC 002C                 30              MOVE.B      #',',(A4)+
00000024  4EB9 00000032             31              JSR         GEN_EA_CODE *Deal with EA code Second
0000002A  4E75                      32              RTS
0000002C                            33  
0000002C                            34  *---------------------MM OPERATION ORDER--------------------
0000002C                            35  * Identifies whether the order of the parameters is:
0000002C                            36  * <EA>,<list> or <list>,<EA>. It then branches to the 
0000002C                            37  * appropriate order based subroutines. This subroutine is
0000002C                            38  * for opcodes: MOVEM
0000002C                            39  *-----------------------------------------------------------
0000002C                            40  MM_OP_ORD 
0000002C  4E75                      41              RTS
0000002E                            42  
0000002E                            43  *---------------------MM EA SOURCE--------------------------
0000002E                            44  * Logic for an EA source operand for MOVEM
0000002E                            45  *-----------------------------------------------------------
0000002E                            46  MM_EA_SRC   *Deal with EA code first
0000002E                            47              *Deal with list second
0000002E  4E75                      48              RTS
00000030                            49  
00000030                            50  *---------------------MM LIST SOURCE------------------------
00000030                            51  * Logic for a LIST source operand for MOVEM
00000030                            52  *-----------------------------------------------------------
00000030                            53  MM_LS_SRC   *Deal with list first
00000030                            54              *Deal with EA code second
00000030  4E75                      55              RTS
00000032                            56  
00000032                            57  
00000032                            58  *============================================================
00000032                            59  *======================BIT ISOLATORS=========================
00000032                            60  *============================================================
00000032                            61  
00000032                            62  *-------------------------GEN EA CODE-----------------------
00000032                            63  * For: SUBI, ADDI, MOVEM, LEA, JSR, ADDQ, OR, DIVU, SUB,
00000032                            64  *     MULS, AND, ADD, ADDA
00000032                            65  * Probably for: LSL/LSR, ASL/ASR,ROL/ROR.
00000032                            66  *
00000032                            67  *     - Isolates EA mode into D4
00000032                            68  *     - Isolates EA register into D3
00000032                            69  *     - initiates EA decode chain
00000032                            70  *-----------------------------------------------------------
00000032  4283                      71  GEN_EA_CODE CLR.L       D3          *Make sure D3 is clear
00000034  4284                      72              CLR.L       D4          *Make sure D4 is clear
00000036  4281                      73              CLR.L       D1          *Make sure D1 is clear for shifting
00000038                            74              
00000038  3607                      75              MOVE.W      D7,D3       *Move untouched opcode into D3
0000003A  3807                      76              MOVE.W      D7,D4       *Move untouched opcode into D4
0000003C                            77              
0000003C  123C 000A                 78              MOVE.B      #10,D1      *Shifting to isolate MODE
00000040  E36C                      79              LSL.W       D1,D4       
00000042  123C 000D                 80              MOVE.B      #13,D1
00000046  E26C                      81              LSR.W       D1,D4       *Move MODE bits to LSB position
00000048                            82              
00000048  E36B                      83              LSL.W       D1,D3       *Shifting to isolate REGISTER (#13 already in D1)
0000004A  E26B                      84              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
0000004C                            85              
0000004C  4EB9 0000006C             86              JSR         EA_TBL      *Decode MODE to select correct <EA>
00000052  4E75                      87              RTS
00000054                            88              
00000054                            89  *-------------------------MOVE EA CODE-----------------------
00000054                            90  * For: MOVE, MOVEA
00000054                            91  *
00000054                            92  *     - Isolates Source Mode and Reg into D3, D4 respec.
00000054                            93  *     - initiates SOURCE decode chain
00000054                            94  *     - Isolates Dest Mode and REg into D3, and D4 respec.
00000054                            95  *     - initiates DEST decode chain
00000054                            96  *-----------------------------------------------------------
00000054                            97  MOV_EA_CODE
00000054  4E75                      98              RTS
00000056                            99              
00000056                           100              
00000056                           101  *-------------------------DECODE DN--------------------------
00000056                           102  * This function decides a DN to get the data register number
00000056                           103  * It then adds the number to the output strings
00000056                           104  *------------------------------------------------------------
00000056  4283                     105  DN_CODE     CLR.L       D3          *Make sure D4 is empty to isolate Dn register
00000058  3607                     106              MOVE.W      D7,D3       *Copy untoched opcode into D3 for manipulation
0000005A  E94B                     107              LSL.W       #4,D3       *Isolate bits and move to LSB position
0000005C  4282                     108              CLR.L       D2
0000005E  143C 000D                109              MOVE.B      #13,D2
00000062  E46B                     110              LSR.W       D2,D3
00000064  4EB9 00000106            111              JSR         REG_TBL     *Jump to register table.
0000006A  4E75                     112              RTS
0000006C                           113  
0000006C                           114  *============================================================
0000006C                           115  *=========================JUMP TABLES========================
0000006C                           116  *============================================================
0000006C                           117  
0000006C                           118  *-------------------------EA_TBL----------------------------
0000006C                           119  * This is a jump table for selecting the correct addressing
0000006C                           120  * MODE which is in D3.
0000006C                           121  * Possible Modes: Dn = 0, An = 1, (An) = 2, (An)+ = 3,
0000006C                           122  *                  -(An) = 4, Absolutes = 111
0000006C                           123  *-----------------------------------------------------------
0000006C  B83C 0000                124  EA_TBL      CMP.B       #0,D4       *Select correct <EA> mode
00000070  6700 0030                125              BEQ         DRD
00000074  B83C 0001                126              CMP.B       #1,D4
00000078  6700 0034                127              BEQ         ARD
0000007C  B83C 0002                128              CMP.B       #2,D4
00000080  6700 0038                129              BEQ         ARI
00000084  B83C 0003                130              CMP.B       #3,D4
00000088  6700 0044                131              BEQ         ARI_INC
0000008C  B83C 0004                132              CMP.B       #4,D4
00000090  6700 0054                133              BEQ         ARI_DEC
00000094  B83C 0007                134              CMP.B       #7,D4
00000098  6700 0064                135              BEQ         ABS_ADDR
Line 136 ERROR: Undefined symbol
0000009C  4EF9 004DBB8E            136              JMP         INVALID     *Got here? Must be bad data.
000000A2                           137  
000000A2  18FC 0044                138  DRD         MOVE.B      #'D',(A4)+
000000A6  4EB9 00000106            139              JSR         REG_TBL     *Reg num should be in D3
000000AC  4E75                     140              RTS
000000AE                           141  
000000AE  18FC 0041                142  ARD         MOVE.B      #'A',(A4)+
000000B2  4EB9 00000106            143              JSR         REG_TBL     *Reg num should be in D3
000000B8  4E75                     144              RTS
000000BA                           145  
000000BA  18FC 0028                146  ARI         MOVE.B      #'(',(A4)+
000000BE  18FC 0041                147              MOVE.B      #'A',(A4)+
000000C2  4EB9 00000106            148              JSR         REG_TBL     *Reg num should be in D3
000000C8  18FC 0029                149              MOVE.B      #')',(A4)+
000000CC  4E75                     150              RTS
000000CE                           151  
000000CE  18FC 0028                152  ARI_INC     MOVE.B      #'(',(A4)+
000000D2  18FC 0041                153              MOVE.B      #'A',(A4)+
000000D6  4EB9 00000106            154              JSR         REG_TBL     *Reg num should be in D3
000000DC  18FC 0029                155              MOVE.B      #')',(A4)+
000000E0  18FC 002B                156              MOVE.B      #'+',(A4)+
000000E4  4E75                     157              RTS
000000E6                           158  
000000E6  18FC 002D                159  ARI_DEC     MOVE.B      #'-',(A4)+
000000EA  18FC 0028                160              MOVE.B      #'(',(A4)+
000000EE  18FC 0041                161              MOVE.B      #'A',(A4)+
000000F2  4EB9 00000106            162              JSR         REG_TBL     *Reg num should be in D3
000000F8  18FC 0029                163              MOVE.B      #')',(A4)+
000000FC  4E75                     164              RTS
000000FE                           165  
000000FE  4EB9 0000017C            166  ABS_ADDR    JSR         ABS_TBL
00000104  4E75                     167              RTS
00000106                           168              
00000106                           169  *-------------------------REG_TBL---------------------------
00000106                           170  * This is a jump table for selecting register (both data and
00000106                           171  * address) numbers. It looks for the bit value in D3
00000106                           172  *-----------------------------------------------------------
00000106  B63C 0000                173  REG_TBL     CMP.B       #0,D3       *Select correct number to add to output strings
0000010A  6700 0040                174              BEQ         NUM_0
0000010E  B63C 0001                175              CMP.B       #1,D3
00000112  6700 003E                176              BEQ         NUM_1
00000116  B63C 0002                177              CMP.B       #2,D3
0000011A  6700 003C                178              BEQ         NUM_2
0000011E  B63C 0003                179              CMP.B       #3,D3
00000122  6700 003A                180              BEQ         NUM_3
00000126  B63C 0004                181              CMP.B       #4,D3
0000012A  6700 0038                182              BEQ         NUM_4
0000012E  B63C 0005                183              CMP.B       #5,D3
00000132  6700 0036                184              BEQ         NUM_5
00000136  B63C 0006                185              CMP.B       #6,D3
0000013A  6700 0034                186              BEQ         NUM_6
0000013E  B63C 0007                187              CMP.B       #7,D3
00000142  6700 0032                188              BEQ         NUM_7
Line 189 ERROR: Undefined symbol
00000146  4EF9 004DBB8E            189              JMP         INVALID     *Got here? Must be bad data.
0000014C                           190              
0000014C  18FC 0030                191  NUM_0       MOVE.B      #'0',(A4)+
00000150  4E75                     192              RTS              
00000152  18FC 0031                193  NUM_1       MOVE.B      #'1',(A4)+
00000156  4E75                     194              RTS
00000158  18FC 0032                195  NUM_2       MOVE.B      #'2',(A4)+
0000015C  4E75                     196              RTS
0000015E  18FC 0033                197  NUM_3       MOVE.B      #'3',(A4)+
00000162  4E75                     198              RTS
00000164  18FC 0034                199  NUM_4       MOVE.B      #'4',(A4)+
00000168  4E75                     200              RTS
0000016A  18FC 0035                201  NUM_5       MOVE.B      #'5',(A4)+
0000016E  4E75                     202              RTS
00000170  18FC 0036                203  NUM_6       MOVE.B      #'6',(A4)+
00000174  4E75                     204              RTS
00000176  18FC 0037                205  NUM_7       MOVE.B      #'7',(A4)+
0000017A  4E75                     206              RTS
0000017C                           207  
0000017C                           208  *-------------------------ABS_TBL----------------------------
0000017C                           209  * This is a jump table for selecting the correct ABSOLUTE
0000017C                           210  * Addressing mode [(xxx).W, (xxx).L, #<data>.
0000017C                           211  * 3 Possibilities: (xxx).W = 0, (xxx).L = 1, #<data> = 4
0000017C                           212  * Register number should be in D3
0000017C                           213  *-----------------------------------------------------------
0000017C  B63C 0000                214  ABS_TBL     CMP.B       #0,D3       *Select correct number to add to output strings
00000180  6700 0018                215              BEQ         ABW
00000184  B63C 0001                216              CMP.B       #1,D3
00000188  6700 0026                217              BEQ         ABL
0000018C  B63C 0004                218              CMP.B       #4,D3
00000190  6700 002E                219              BEQ         IDATA
Line 220 ERROR: Undefined symbol
00000194  4EF9 004DBB8E            220              JMP         INVALID     *Got here? Must be bad data.
0000019A                           221              
0000019A  18FC 0024                222  ABW         MOVE.B      #'$',(A4)+
0000019E  4281                     223              CLR.L       D1          *Make sure D1 is clear
000001A0  4280                     224              CLR.L       D0          *Make sure D0 is clear (for counting)
000001A2  103C 0004                225              MOVE.B      #$4,D0      *Counter (4 for word address)
000001A6  321D                     226              MOVE.W      (A5)+, D1   *Increment counter by WORD (grab word data)
000001A8                           227              *Need to implement D4 -> ASCII -> GOOD string (or modify HEX_ASCII_G
000001A8  4EB9 000001D6            228              JSR         EA_H2A       *convert absolute value to ascii and add to good string
000001AE  4E75                     229              RTS
000001B0                           230  
000001B0  18FC 0024                231  ABL         MOVE.B      #'$',(A4)+
000001B4  4281                     232              CLR.L       D1          *Make sure D4 is clear
000001B6  4280                     233              CLR.L       D0          *Make sure D0 is clear (for counting)
000001B8  103C 0008                234              MOVE.B      #$8,D0      *Counter (8 for long address)
000001BC  221D                     235              MOVE.L      (A5)+, D1   *Increment counter by WORD (grab word data)
000001BE                           236              *Need to implement D4 -> ASCII -> GOOD string (or modify HEX_ASCII_G 
000001BE  4E75                     237              RTS
000001C0                           238              
000001C0  18FC 0023                239  IDATA       MOVE.B      #'#',(A4)+
000001C4  4281                     240              CLR.L       D1          *Make sure D4 is clear
000001C6  4280                     241              CLR.L       D0          *Make sure D0 is clear (for counting)
000001C8  103C 0004                242              MOVE.B      #$4,D0      *Counter (4 for word address)
000001CC  321D                     243              MOVE.W      (A5)+, D1   *Increment counter by WORD (grab word data)
000001CE                           244              *Need to implement D4 -> ASCII -> GOOD string (or modify HEX_ASCII_G
000001CE  4EB9 000001D6            245              JSR         EA_H2A
000001D4                           246              
000001D4  4E75                     247              RTS
000001D6                           248  *============================================================
000001D6                           249  *=========================HELPER SUBROUTINES=================
000001D6                           250  *============================================================
000001D6                           251  
000001D6                           252  *-------------------------ABS Hex to Ascii-----------------
000001D6                           253  * 
000001D6                           254  *-----------------------------------------------------------
000001D6  4282                     255  EA_H2A      CLR.L       D2          *Make sure D2 is empty (each individual char)
000001D8  4283                     256              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
000001DA  103C 0004                257              MOVE.B      #$4,D0      *Counter
000001DE  6000 0002                258              BRA         EA_ISO_DIG  *Begin isolating chars
000001E2                           259              
000001E2  E999                     260  EA_ISO_DIG  ROL.L       #4,D1       *Move first significant hex char to least sig position
000001E4                           261              
000001E4  2401                     262              MOVE.L      D1,D2       *Move to D2 to isolate least sig hex char
000001E6                           263              
000001E6  163C 001C                264              MOVE.B      #28,D3      *Shift left 28 times
000001EA  E7AA                     265              LSL.L       D3,D2       *Isolated hex digit now is $X0000000
000001EC  E99A                     266              ROL.L       #4,D2       *Isolated hex digit is now $0000000X
000001EE                           267              
000001EE  0C02 0009                268              CMPI.B      #$9,D2      *Is it a number?
000001F2  6F00 0006                269              BLE         EA_NUM      *If it is, process number
000001F6  6000 000A                270              BRA         EA_LET      *If not, process letter
000001FA                           271              
000001FA  0602 0030                272  EA_NUM      ADDI.B      #$30,D2     *Make it an ascii number
000001FE  6000 000A                273              BRA         EA_ADD_CHAR *add to strings and continue
00000202                           274              
00000202  0602 0037                275  EA_LET      ADDI.B      #$37,D2     *Make it an ascii letter
00000206  6000 0002                276              BRA         EA_ADD_CHAR *add to strings and continue
0000020A                           277  
0000020A  18C2                     278  EA_ADD_CHAR MOVE.B      D2,(A4)+    *Add to the good data string
0000020C  5300                     279              SUBI.B      #$1,D0      *decrement counter
0000020E  0C00 0000                280              CMPI.B      #$0,D0      *Check if we're done            
00000212  6ECE                     281              BGT         EA_ISO_DIG   *If not, continue tranlation   
00000214                           282              
00000214  4E75                     283              RTS
00000216                           284  
00000216                           285  
00000216                           286  
00000216                           287  
Line 288 WARNING: END directive missing, starting address not set

3 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABL                 1B0
ABS_ADDR            FE
ABS_TBL             17C
ABW                 19A
ARD                 AE
ARI                 BA
ARI_DEC             E6
ARI_INC             CE
DN_CODE             56
DN_SRC              16
DRD                 A2
EA_ADD_CHAR         20A
EA_H2A              1D6
EA_ISO_DIG          1E2
EA_LET              202
EA_NUM              1FA
EA_SRC              0
EA_TBL              6C
GEN_EA_CODE         32
IDATA               1C0
MM_EA_SRC           2E
MM_LS_SRC           30
MM_OP_ORD           2C
MOV_EA_CODE         54
NUM_0               14C
NUM_1               152
NUM_2               158
NUM_3               15E
NUM_4               164
NUM_5               16A
NUM_6               170
NUM_7               176
REG_TBL             106
