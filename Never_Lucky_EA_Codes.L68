00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/23/2017 4:34:29 PM

00000000                             1  ************************************************************
00000000                             2  * TEAM NEVERY LUCKY DISSASSEMBLER
00000000                             3  * This file includes Parameter logic (Order, EA, DN/AN/LIST)
00000000                             4  * Logic.
00000000                             5  ************************************************************
00000000                             6  
00000000                             7  *============================================================
00000000                             8  *================OPERAND ORDER SUBROUTINES===================
00000000                             9  *============================================================
00000000                            10  * WE'LL MAY STILL NEED TO IMPLEMENT SOME TYPE OF AN_SRC,
00000000                            11  * AN_DEST, DATA_SRC (But maybe not since we'll know the 
00000000                            12  * specific order of operands for those functions.
00000000                            13  
00000000                            14  *---------------------EA SOURCE-----------------------------
00000000                            15  * Logic for an EA source operand for opcodes: 
00000000                            16  * ADD, AND, OR, SUB
00000000                            17  *-----------------------------------------------------------
00000000  4EB9 00000032             18  EA_SRC      JSR         GEN_EA_CODE *Deal with EA code First
00000006  18FC 002C                 19              MOVE.B      #',',(A4)+
0000000A  18FC 0044                 20              MOVE.B      #'D',(A4)+
0000000E  4EB9 0000009A             21              JSR         REG_CODE    *Decode Dn and add number to string
00000014  4E75                      22              RTS
00000016                            23  
00000016                            24  *---------------------DN SOURCE-----------------------------
00000016                            25  * Logic for a DN source operand for opcodes:
00000016                            26  * ADD, AND, OR, SUB
00000016                            27  *-----------------------------------------------------------
00000016  18FC 0044                 28  DN_SRC      MOVE.B      #'D',(A4)+
0000001A  4EB9 0000009A             29              JSR         REG_CODE     *Decode Dn and add number to string
00000020  18FC 002C                 30              MOVE.B      #',',(A4)+
00000024  4EB9 00000032             31              JSR         GEN_EA_CODE *Deal with EA code Second
0000002A  4E75                      32              RTS
0000002C                            33  
0000002C                            34  *---------------------MM OPERATION ORDER--------------------
0000002C                            35  * Identifies whether the order of the parameters is:
0000002C                            36  * <EA>,<list> or <list>,<EA>. It then branches to the 
0000002C                            37  * appropriate order based subroutines. This subroutine is
0000002C                            38  * for opcodes: MOVEM
0000002C                            39  *-----------------------------------------------------------
0000002C                            40  MM_OP_ORD 
0000002C  4E75                      41              RTS
0000002E                            42  
0000002E                            43  *---------------------MM EA SOURCE--------------------------
0000002E                            44  * Logic for an EA source operand for MOVEM
0000002E                            45  *-----------------------------------------------------------
0000002E                            46  MM_EA_SRC   *Deal with EA code first
0000002E                            47              *Deal with list second
0000002E  4E75                      48              RTS
00000030                            49  
00000030                            50  *---------------------MM LIST SOURCE------------------------
00000030                            51  * Logic for a LIST source operand for MOVEM
00000030                            52  *-----------------------------------------------------------
00000030                            53  MM_LS_SRC   *Deal with list first
00000030                            54              *Deal with EA code second
00000030  4E75                      55              RTS
00000032                            56  
00000032                            57  
00000032                            58  *============================================================
00000032                            59  *======================BIT ISOLATORS=========================
00000032                            60  *============================================================
00000032                            61  
00000032                            62  *-------------------------GEN EA CODE-----------------------
00000032                            63  * For: SUBI, ADDI, MOVEM, LEA, JSR, ADDQ, OR, DIVU, SUB,
00000032                            64  *     MULS, AND, ADD, ADDA
00000032                            65  * Probably for: LSL/LSR, ASL/ASR,ROL/ROR.
00000032                            66  *
00000032                            67  *     - Isolates EA mode into D6
00000032                            68  *     - Isolates EA register into D3
00000032                            69  *     - initiates EA decode chain
00000032                            70  *-----------------------------------------------------------
00000032  4283                      71  GEN_EA_CODE CLR.L       D3          *Make sure D3 is clear
00000034  4286                      72              CLR.L       D6          *Make sure D6 is clear
00000036  4281                      73              CLR.L       D1          *Make sure D1 is clear for shifting
00000038                            74              
00000038  3607                      75              MOVE.W      D7,D3       *Move untouched opcode into D3
0000003A  3C07                      76              MOVE.W      D7,D6       *Move untouched opcode into D6
0000003C                            77              
0000003C  123C 000A                 78              MOVE.B      #10,D1      *Shifting to isolate MODE
00000040  E36E                      79              LSL.W       D1,D6       
00000042  123C 000D                 80              MOVE.B      #13,D1
00000046  E26E                      81              LSR.W       D1,D6       *Move MODE bits to LSB position
00000048                            82              
00000048  E36B                      83              LSL.W       D1,D3       *Shifting to isolate REGISTER (#13 already in D1)
0000004A  E26B                      84              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
0000004C                            85              
0000004C  4EB9 000000B0             86              JSR         EA_TBL      *Decode MODE to select correct <EA>
00000052  4E75                      87              RTS
00000054                            88              
00000054                            89  *-------------------------MOVE EA CODE-----------------------
00000054                            90  * For: MOVE, MOVEA
00000054                            91  *
00000054                            92  *     - Isolates Source Mode and Reg into D3, D6 respec.
00000054                            93  *     - initiates SOURCE decode chain
00000054                            94  *     - Isolates Dest Mode and REg into D3, and D6 respec.
00000054                            95  *     - initiates DEST decode chain
00000054                            96  *     - Code flows like this:
00000054                            97  *       SOURCE
00000054                            98  *       SEPERATOR
00000054                            99  *       DESTINATION
00000054                           100  *-----------------------------------------------------------
00000054  4283                     101  MOV_EA_CODE CLR.L       D3          *Make sure D3 is clear
00000056  4286                     102              CLR.L       D6          *Make sure D6 is clear
00000058  4281                     103              CLR.L       D1          *Make sure D1 is clear for shifting
0000005A                           104              
0000005A  3607                     105              MOVE.W      D7,D3       *Move untouched opcode into D3
0000005C  3C07                     106              MOVE.W      D7,D6       *Move untouched opcode into D6
0000005E                           107              
0000005E  123C 000A                108              MOVE.B      #10,D1      *Shifting to isolate MODE
00000062  E36E                     109              LSL.W       D1,D6       
00000064  123C 000D                110              MOVE.B      #13,D1
00000068  E26E                     111              LSR.W       D1,D6       *Move MODE bits to LSB position
0000006A                           112              
0000006A  E36B                     113              LSL.W       D1,D3       *Shifting to isolate REGISTER (#13 already in D1)
0000006C  E26B                     114              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
0000006E                           115              
0000006E  4EB9 000000B0            116              JSR         EA_TBL      *Decode MODE to select correct <EA>
00000074                           117              
00000074  18FC 002C                118              MOVE.B      #',',(A4)+  *SEPERATOR
00000078                           119              
00000078  4283                     120              CLR.L       D3          *Make sure D3 is clear
0000007A  4286                     121              CLR.L       D6          *Make sure D6 is clear
0000007C  4281                     122              CLR.L       D1          *Make sure D1 is clear for shifting
0000007E                           123              
0000007E  3607                     124              MOVE.W      D7,D3       *Move untouched opcode into D3
00000080  3C07                     125              MOVE.W      D7,D6       *Move untouched opcode into D6
00000082                           126              
00000082  123C 0007                127              MOVE.B      #7,D1      *Shifting to isolate MODE
00000086  E36E                     128              LSL.W       D1,D6       
00000088  123C 000D                129              MOVE.B      #13,D1
0000008C  E26E                     130              LSR.W       D1,D6       *Move MODE bits to LSB position
0000008E                           131              
0000008E  E94B                     132              LSL.W       #4,D3       *Shifting to isolate Dest REGISTER
00000090  E26B                     133              LSR.W       D1,D3       *Move REG bits to LSB position (#13 already in D1)
00000092                           134              
00000092  4EB9 000000B0            135              JSR         EA_TBL      *Decode MODE to select correct <EA>
00000098                           136              
00000098  4E75                     137              RTS
0000009A                           138              
0000009A                           139              
0000009A                           140  *-------------------------DECODE DN--------------------------
0000009A                           141  * This function decides a DN to get the data register number
0000009A                           142  * It then adds the number to the output strings
0000009A                           143  *------------------------------------------------------------
0000009A  4283                     144  REG_CODE    CLR.L       D3          *Make sure D3 is empty to isolate Dn register
0000009C  3607                     145              MOVE.W      D7,D3       *Copy untoched opcode into D3 for manipulation
0000009E  E94B                     146              LSL.W       #4,D3       *Isolate bits and move to LSB position
000000A0  4282                     147              CLR.L       D2
000000A2  143C 000D                148              MOVE.B      #13,D2
000000A6  E46B                     149              LSR.W       D2,D3
000000A8  4EB9 0000014A            150              JSR         REG_TBL     *Jump to register table.
000000AE  4E75                     151              RTS
000000B0                           152  
000000B0                           153  *============================================================
000000B0                           154  *=========================JUMP TABLES========================
000000B0                           155  *============================================================
000000B0                           156  
000000B0                           157  *-------------------------EA_TBL----------------------------
000000B0                           158  * This is a jump table for selecting the correct addressing
000000B0                           159  * MODE which is in D6.
000000B0                           160  * Possible Modes: Dn = 0, An = 1, (An) = 2, (An)+ = 3,
000000B0                           161  *                  -(An) = 4, Absolutes = 111
000000B0                           162  *-----------------------------------------------------------
000000B0  BC3C 0000                163  EA_TBL      CMP.B       #0,D6       *Select correct <EA> mode
000000B4  6700 0030                164              BEQ         DRD
000000B8  BC3C 0001                165              CMP.B       #1,D6
000000BC  6700 0034                166              BEQ         ARD
000000C0  BC3C 0002                167              CMP.B       #2,D6
000000C4  6700 0038                168              BEQ         ARI
000000C8  BC3C 0003                169              CMP.B       #3,D6
000000CC  6700 0044                170              BEQ         ARI_INC
000000D0  BC3C 0004                171              CMP.B       #4,D6
000000D4  6700 0054                172              BEQ         ARI_DEC
000000D8  BC3C 0007                173              CMP.B       #7,D6
000000DC  6700 0064                174              BEQ         ABS_ADDR
Line 175 ERROR: Undefined symbol
000000E0  4EF9 004DBB8E            175              JMP         INVALID     *Got here? Must be bad data.
000000E6                           176  
000000E6  18FC 0044                177  DRD         MOVE.B      #'D',(A4)+
000000EA  4EB9 0000014A            178              JSR         REG_TBL     *Reg num should be in D3
000000F0  4E75                     179              RTS
000000F2                           180  
000000F2  18FC 0041                181  ARD         MOVE.B      #'A',(A4)+
000000F6  4EB9 0000014A            182              JSR         REG_TBL     *Reg num should be in D3
000000FC  4E75                     183              RTS
000000FE                           184  
000000FE  18FC 0028                185  ARI         MOVE.B      #'(',(A4)+
00000102  18FC 0041                186              MOVE.B      #'A',(A4)+
00000106  4EB9 0000014A            187              JSR         REG_TBL     *Reg num should be in D3
0000010C  18FC 0029                188              MOVE.B      #')',(A4)+
00000110  4E75                     189              RTS
00000112                           190  
00000112  18FC 0028                191  ARI_INC     MOVE.B      #'(',(A4)+
00000116  18FC 0041                192              MOVE.B      #'A',(A4)+
0000011A  4EB9 0000014A            193              JSR         REG_TBL     *Reg num should be in D3
00000120  18FC 0029                194              MOVE.B      #')',(A4)+
00000124  18FC 002B                195              MOVE.B      #'+',(A4)+
00000128  4E75                     196              RTS
0000012A                           197  
0000012A  18FC 002D                198  ARI_DEC     MOVE.B      #'-',(A4)+
0000012E  18FC 0028                199              MOVE.B      #'(',(A4)+
00000132  18FC 0041                200              MOVE.B      #'A',(A4)+
00000136  4EB9 0000014A            201              JSR         REG_TBL     *Reg num should be in D3
0000013C  18FC 0029                202              MOVE.B      #')',(A4)+
00000140  4E75                     203              RTS
00000142                           204  
00000142  4EB9 000001C0            205  ABS_ADDR    JSR         ABS_TBL
00000148  4E75                     206              RTS
0000014A                           207              
0000014A                           208  *-------------------------REG_TBL---------------------------
0000014A                           209  * This is a jump table for selecting register (both data and
0000014A                           210  * address) numbers. It looks for the bit value in D3
0000014A                           211  *-----------------------------------------------------------
0000014A  B63C 0000                212  REG_TBL     CMP.B       #0,D3       *Select correct number to add to output strings
0000014E  6700 0040                213              BEQ         NUM_0
00000152  B63C 0001                214              CMP.B       #1,D3
00000156  6700 003E                215              BEQ         NUM_1
0000015A  B63C 0002                216              CMP.B       #2,D3
0000015E  6700 003C                217              BEQ         NUM_2
00000162  B63C 0003                218              CMP.B       #3,D3
00000166  6700 003A                219              BEQ         NUM_3
0000016A  B63C 0004                220              CMP.B       #4,D3
0000016E  6700 0038                221              BEQ         NUM_4
00000172  B63C 0005                222              CMP.B       #5,D3
00000176  6700 0036                223              BEQ         NUM_5
0000017A  B63C 0006                224              CMP.B       #6,D3
0000017E  6700 0034                225              BEQ         NUM_6
00000182  B63C 0007                226              CMP.B       #7,D3
00000186  6700 0032                227              BEQ         NUM_7
Line 228 ERROR: Undefined symbol
0000018A  4EF9 004DBB8E            228              JMP         INVALID     *Got here? Must be bad data.
00000190                           229              
00000190  18FC 0030                230  NUM_0       MOVE.B      #'0',(A4)+
00000194  4E75                     231              RTS              
00000196  18FC 0031                232  NUM_1       MOVE.B      #'1',(A4)+
0000019A  4E75                     233              RTS
0000019C  18FC 0032                234  NUM_2       MOVE.B      #'2',(A4)+
000001A0  4E75                     235              RTS
000001A2  18FC 0033                236  NUM_3       MOVE.B      #'3',(A4)+
000001A6  4E75                     237              RTS
000001A8  18FC 0034                238  NUM_4       MOVE.B      #'4',(A4)+
000001AC  4E75                     239              RTS
000001AE  18FC 0035                240  NUM_5       MOVE.B      #'5',(A4)+
000001B2  4E75                     241              RTS
000001B4  18FC 0036                242  NUM_6       MOVE.B      #'6',(A4)+
000001B8  4E75                     243              RTS
000001BA  18FC 0037                244  NUM_7       MOVE.B      #'7',(A4)+
000001BE  4E75                     245              RTS
000001C0                           246  
000001C0                           247  *-------------------------ABS_TBL----------------------------
000001C0                           248  * This is a jump table for selecting the correct ABSOLUTE
000001C0                           249  * Addressing mode [(xxx).W, (xxx).L, #<data>.
000001C0                           250  * 3 Possibilities: (xxx).W = 0, (xxx).L = 1, #<data> = 4
000001C0                           251  * Register number should be in D3
000001C0                           252  *-----------------------------------------------------------
000001C0  B63C 0000                253  ABS_TBL     CMP.B       #0,D3       *Select correct number to add to output strings
000001C4  6700 0018                254              BEQ         ABW
000001C8  B63C 0001                255              CMP.B       #1,D3
000001CC  6700 0020                256              BEQ         ABL
000001D0  B63C 0004                257              CMP.B       #4,D3
000001D4  6700 0028                258              BEQ         IDATA
Line 259 ERROR: Undefined symbol
000001D8  4EF9 004DBB8E            259              JMP         INVALID     *Got here? Must be bad data.
000001DE                           260              
000001DE  18FC 0024                261  ABW         MOVE.B      #'$',(A4)+
000001E2  4281                     262              CLR.L       D1          *Make sure D1 is clear
000001E4  321D                     263              MOVE.W      (A5)+, D1   *Increment counter by WORD (grab word data)
000001E6  4EB9 000002A8            264              JSR         W_H2A       *convert absolute value to ascii and add to good string
000001EC  4E75                     265              RTS
000001EE                           266  
000001EE  18FC 0024                267  ABL         MOVE.B      #'$',(A4)+
000001F2  4281                     268              CLR.L       D1          *Make sure D1 is clear
000001F4  221D                     269              MOVE.L      (A5)+, D1   *Increment counter by WORD (grab word data)
000001F6  4EB9 000002EA            270              JSR         L_H2A
000001FC  4E75                     271              RTS
000001FE                           272              
000001FE  18FC 0023                273  IDATA       MOVE.B      #'#',(A4)+
00000202  18FC 0024                274              MOVE.B      #'$',(A4)+  *Immediate value will be in Hex
00000206  4EB9 0000020E            275              JSR         IMD_TBL
0000020C  4E75                     276              RTS
0000020E                           277              
0000020E                           278  *-------------------------IMD_TBL---------------------------
0000020E                           279  * This is a jump table for selecting the correct Immediate
0000020E                           280  * Data output based on the size code. Size code should be in
0000020E                           281  * D4
0000020E                           282  *-----------------------------------------------------------
0000020E  B83C 0000                283  IMD_TBL     CMP.B       #0,D4       *Is it byte size code?
00000212  6700 002E                284              BEQ         B_IMD       
00000216  B83C 0004                285              CMP.B       #4,D4
0000021A  6700 0026                286              BEQ         B_IMD
0000021E                           287  
0000021E  B83C 0001                288              CMP.B       #1,D4       *Is it a word size code?
00000222  6700 002A                289              BEQ         W_IMD
00000226  B83C 0005                290              CMP.B       #5,D4
0000022A  6700 0022                291              BEQ         W_IMD
0000022E                           292              
0000022E  B83C 0002                293              CMP.B       #2,D4       *Is it a long word size code?
00000232  6700 0026                294              BEQ         L_IMD
00000236  B83C 0006                295              CMP.B       #6,D4
0000023A  6700 001E                296              BEQ         L_IMD
0000023E                           297              
Line 298 ERROR: Undefined symbol
0000023E  6000 B94E                298              BRA         INVALID     *Got here? Must be bad data.
00000242                           299              
00000242  4281                     300  B_IMD       CLR.L       D1
00000244  321D                     301              MOVE.W      (A5)+,D1    *Make sure D1 is clear
00000246  4EB9 00000266            302              JSR         B_H2A       *Incremeint by WORD (but translate byte only)
0000024C  4E75                     303              RTS
0000024E                           304  
0000024E  4281                     305  W_IMD       CLR.L       D1          *Make sure D1 is clear
00000250  321D                     306              MOVE.W      (A5)+, D1   *Increment counter by WORD (grab word data)
00000252  4EB9 000002A8            307              JSR         W_H2A
00000258  4E75                     308              RTS
0000025A                           309  
0000025A  4281                     310  L_IMD       CLR.L       D1          *Make sure D1 is clear
0000025C  221D                     311              MOVE.L      (A5)+, D1   *Increment counter by LONGWORD (grab LONGWORD data)
0000025E  4EB9 000002EA            312              JSR         L_H2A
00000264  4E75                     313              RTS
00000266                           314                                 
00000266                           315  
00000266                           316  
00000266                           317  *============================================================
00000266                           318  *=========================HELPER SUBROUTINES=================
00000266                           319  *============================================================
00000266                           320  
00000266                           321  *-------------------------Byte Hex to Ascii-----------------
00000266                           322  * 
00000266                           323  *-----------------------------------------------------------
00000266  4280                     324  B_H2A       CLR.L       D0          *Make sure D0 is clear (for counting)
00000268  4282                     325              CLR.L       D2          *Make sure D2 is empty (each individual char)
0000026A  4283                     326              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
0000026C  103C 0002                327              MOVE.B      #$2,D0      *Counter
00000270  6000 0002                328              BRA         B_ISO_DIG   *Begin isolating chars
00000274                           329              
00000274  E919                     330  B_ISO_DIG   ROL.B       #4,D1       *Move first significant hex char to least sig position
00000276                           331              
00000276  1401                     332              MOVE.B      D1,D2       *Move to D2 to isolate least sig hex char
00000278                           333              
00000278  163C 000C                334              MOVE.B      #12,D3      *Shift left 28 times
0000027C  E72A                     335              LSL.B       D3,D2       *Isolated hex digit now is $X0000000
0000027E  E91A                     336              ROL.B       #4,D2       *Isolated hex digit is now $0000000X
00000280                           337              
00000280  0C02 0009                338              CMPI.B      #$9,D2      *Is it a number?
00000284  6F00 0006                339              BLE         B_NUM       *If it is, process number
00000288  6000 000A                340              BRA         B_LET       *If not, process letter
0000028C                           341              
0000028C  0602 0030                342  B_NUM       ADDI.B      #$30,D2     *Make it an ascii number
00000290  6000 000A                343              BRA         B_ADD_CHAR  *add to strings and continue
00000294                           344              
00000294  0602 0037                345  B_LET       ADDI.B      #$37,D2     *Make it an ascii letter
00000298  6000 0002                346              BRA         B_ADD_CHAR  *add to strings and continue
0000029C                           347  
0000029C  18C2                     348  B_ADD_CHAR  MOVE.B      D2,(A4)+    *Add to the good data string
0000029E  5300                     349              SUBI.B      #$1,D0      *decrement counter
000002A0  0C00 0000                350              CMPI.B      #$0,D0      *Check if we're done            
000002A4  6ECE                     351              BGT         B_ISO_DIG   *If not, continue tranlation   
000002A6                           352              
000002A6  4E75                     353              RTS
000002A8                           354  
000002A8                           355  *-------------------------Word Hex to Ascii-----------------
000002A8                           356  * 
000002A8                           357  *-----------------------------------------------------------
000002A8  4280                     358  W_H2A       CLR.L       D0          *Make sure D0 is clear (for counting)
000002AA  4282                     359              CLR.L       D2          *Make sure D2 is empty (each individual char)
000002AC  4283                     360              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
000002AE  103C 0004                361              MOVE.B      #$4,D0      *Counter
000002B2  6000 0002                362              BRA         W_ISO_DIG   *Begin isolating chars
000002B6                           363              
000002B6  E959                     364  W_ISO_DIG   ROL.W       #4,D1       *Move first significant hex char to least sig position
000002B8                           365              
000002B8  1401                     366              MOVE.B      D1,D2       *Move to D2 to isolate least sig hex char
000002BA                           367              
000002BA  163C 0004                368              MOVE.B      #4,D3      *Shift left 28 times
000002BE  E76A                     369              LSL.W       D3,D2       *Isolated hex digit now is $X0000000
000002C0  E95A                     370              ROL.W       #4,D2       *Isolated hex digit is now $0000000X
000002C2                           371              
000002C2  0C02 0009                372              CMPI.B      #$9,D2      *Is it a number?
000002C6  6F00 0006                373              BLE         W_NUM       *If it is, process number
000002CA  6000 000A                374              BRA         W_LET       *If not, process letter
000002CE                           375              
000002CE  0602 0030                376  W_NUM       ADDI.B      #$30,D2     *Make it an ascii number
000002D2  6000 000A                377              BRA         W_ADD_CHAR  *add to strings and continue
000002D6                           378              
000002D6  0602 0037                379  W_LET       ADDI.B      #$37,D2     *Make it an ascii letter
000002DA  6000 0002                380              BRA         W_ADD_CHAR  *add to strings and continue
000002DE                           381  
000002DE  18C2                     382  W_ADD_CHAR  MOVE.B      D2,(A4)+    *Add to the good data string
000002E0  5300                     383              SUBI.B      #$1,D0      *decrement counter
000002E2  0C00 0000                384              CMPI.B      #$0,D0      *Check if we're done            
000002E6  6ECE                     385              BGT         W_ISO_DIG   *If not, continue tranlation   
000002E8                           386              
000002E8  4E75                     387              RTS
000002EA                           388  *-------------------------Long Hex to Ascii-----------------
000002EA                           389  * 
000002EA                           390  *-----------------------------------------------------------
000002EA  4280                     391  L_H2A       CLR.L       D0          *Make sure D0 is clear (for counting)
000002EC  4282                     392              CLR.L       D2          *Make sure D2 is empty (each individual char)
000002EE  4283                     393              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
000002F0  103C 0008                394              MOVE.B      #$8,D0      *Counter
000002F4  6000 0002                395              BRA         L_ISO_DIG   *Begin isolating chars
000002F8                           396              
000002F8  E999                     397  L_ISO_DIG   ROL.L       #4,D1       *Move first significant hex char to least sig position
000002FA                           398              
000002FA  1401                     399              MOVE.B      D1,D2       *Move to D2 to isolate least sig hex char
000002FC                           400              
000002FC  163C 001C                401              MOVE.B      #28,D3      *Shift left 28 times
00000300  E7AA                     402              LSL.L       D3,D2       *Isolated hex digit now is $X0000000
00000302  E99A                     403              ROL.L       #4,D2       *Isolated hex digit is now $0000000X
00000304                           404              
00000304  0C02 0009                405              CMPI.B      #$9,D2      *Is it a number?
00000308  6F00 0006                406              BLE         L_NUM       *If it is, process number
0000030C  6000 000A                407              BRA         L_LET       *If not, process letter
00000310                           408              
00000310  0602 0030                409  L_NUM       ADDI.B      #$30,D2     *Make it an ascii number
00000314  6000 000A                410              BRA         L_ADD_CHAR  *add to strings and continue
00000318                           411              
00000318  0602 0037                412  L_LET       ADDI.B      #$37,D2     *Make it an ascii letter
0000031C  6000 0002                413              BRA         L_ADD_CHAR  *add to strings and continue
00000320                           414  
00000320  18C2                     415  L_ADD_CHAR  MOVE.B      D2,(A4)+    *Add to the good data string
00000322  5300                     416              SUBI.B      #$1,D0      *decrement counter
00000324  0C00 0000                417              CMPI.B      #$0,D0      *Check if we're done            
00000328  6ECE                     418              BGT         L_ISO_DIG   *If not, continue tranlation   
0000032A                           419              
0000032A  4E75                     420              RTS
0000032C                           421  
0000032C                           422  
0000032C                           423  
0000032C                           424  
Line 425 WARNING: END directive missing, starting address not set

4 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABL                 1EE
ABS_ADDR            142
ABS_TBL             1C0
ABW                 1DE
ARD                 F2
ARI                 FE
ARI_DEC             12A
ARI_INC             112
B_ADD_CHAR          29C
B_H2A               266
B_IMD               242
B_ISO_DIG           274
B_LET               294
B_NUM               28C
DN_SRC              16
DRD                 E6
EA_SRC              0
EA_TBL              B0
GEN_EA_CODE         32
IDATA               1FE
IMD_TBL             20E
L_ADD_CHAR          320
L_H2A               2EA
L_IMD               25A
L_ISO_DIG           2F8
L_LET               318
L_NUM               310
MM_EA_SRC           2E
MM_LS_SRC           30
MM_OP_ORD           2C
MOV_EA_CODE         54
NUM_0               190
NUM_1               196
NUM_2               19C
NUM_3               1A2
NUM_4               1A8
NUM_5               1AE
NUM_6               1B4
NUM_7               1BA
REG_CODE            9A
REG_TBL             14A
W_ADD_CHAR          2DE
W_H2A               2A8
W_IMD               24E
W_ISO_DIG           2B6
W_LET               2D6
W_NUM               2CE
