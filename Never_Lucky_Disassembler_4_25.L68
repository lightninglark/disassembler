00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 4/26/2017 1:47:10 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Never Lucky Disassembler
00000000                             3  * Written by : Henry Hong, Ryan Palm, Joshua Plantilla
00000000                             4  * Date       : April 23, 2017
00000000                             5  * Description: Final Project for CSS 422. This program
00000000                             6  *              translates machine code into assembly (68k)
00000000                             7  *              language.
00000000                             8  *-----------------------------------------------------------
00000000                             9  
00001000                            10  START       ORG         $1000       *Start program
00001000  4EB9 00001018             11              JSR         INTRO       *Display Intro Message
00001006  4EB9 00001026             12              JSR         GET_INPUT   *Prompt user for input, convert input from ascii to hex and assign to sta_addr and end_addr
0000100C                            13              
0000100C                            14              *Assuming all input error checking is done before the next call
0000100C                            15              
0000100C                            16              *JSR         INIT_LOOP   *Initialize loop variables
0000100C                            17              *JSR         DECODE_LOOP *Enters maine decode loop
0000100C                            18              
0000100C  4EB9 000010BC             19              JSR         IDENTIFY
00001012                            20              * final call of program, may need to be removed if we jump directly to DONE from the loop
00001012  4EF9 000042E0             21              JMP         DONE        *End Program               
00001018                            22                 
00001018                            23  *-----------------------INTRO-------------------------------
00001018  43F9 000042E6             24  INTRO       LEA         NL_INTRO,A1 *Load INTRO1 message into A1
0000101E  103C 000E                 25              MOVE.B      #14,D0      *Trap task 14, display intro
00001022  4E4F                      26              TRAP        #15         
00001024  4E75                      27              RTS         
00001026                            28  
00001026                            29  *--------------------GET_INPUT------------------------------
00001026  43F9 0000438D             30  GET_INPUT   LEA         STA_MSG,A1  *Load STA_MSG into A1
0000102C  103C 000E                 31              MOVE.B      #14,D0      *Trap task 14, display start address msg
00001030  4E4F                      32              TRAP        #15         
00001032                            33              
00001032  43F9 000043D1             34              LEA         STA_ADDR,A1 *Store input in STA_ADDR variable
00001038  103C 0002                 35              MOVE.B      #2,D0       *Trap task 2, collect start address from input, length in D1
0000103C  4E4F                      36              TRAP        #15         
0000103E                            37              
0000103E  4EB9 00001068             38              JSR         PROC_STA    *Process Start address, check for errrors and convert to HEX
00001044  4281                      39              CLR.L       D1          *Clear input length from D1
00001046                            40              
00001046  43F9 000043B0             41              LEA         END_MSG,A1  *Load END_MSG into A1
0000104C  103C 000E                 42              MOVE.B      #14,D0      *Trap task 14, display end address msg
00001050  4E4F                      43              TRAP        #15
00001052                            44              
00001052  43F9 00004421             45              LEA         END_ADDR,A1 *Store input in END_ADDR variable
00001058  103C 0002                 46              MOVE.B      #2,D0       *Trap task 2, collect end address from input, length in d1
0000105C  4E4F                      47              TRAP        #15         
0000105E                            48              
0000105E  4EB9 00001074             49              JSR         PROC_END    *Process End Address, check for errors and convert to HEX
00001064  4281                      50              CLR.L       D1          *Clear input length from D1
00001066                            51              
00001066  4E75                      52              RTS
00001068                            53              
00001068                            54  *--------------------PROC_STA-------------------------------
00001068                            55  PROC_STA    *TODO: Check for Null, bad length, ODD address, range, convert to hex
00001068  4EB9 00001080             56              JSR         ASCII_HEX   *Convert input into Hex
0000106E  2A43                      57              MOVEA.L     D3,A5       *Move hex to STA_ADDR
00001070  4283                      58              CLR.L       D3          *Clear D3
00001072  4E75                      59              RTS                     
00001074                            60  
00001074                            61  *--------------------PROC_END-------------------------------
00001074                            62  PROC_END    *TODO: Check for Null, bad length, odd address, range, convert to hex
00001074                            63              *      does not fall before start
00001074  4EB9 00001080             64              JSR         ASCII_HEX   *Convert input into Hex
0000107A  2C43                      65              MOVE.L      D3,A6       *Move hex to END_ADDR
0000107C  4283                      66              CLR.L       D3          *Clear D3
0000107E  4E75                      67              RTS
00001080                            68  
00001080                            69  *-------------------ASCII_HEX-------------------------------
00001080  0C01 0000                 70  ASCII_HEX   CMPI.B      #$0,D1      *See if all characters are converted
00001084  6700 0012                 71              BEQ         AH_DONE     *End subroutine if all converted
00001088  1419                      72              MOVE.B      (A1)+,D2    *Move first ASCII hex value into D2
0000108A  183C 0039                 73              MOVE.B      #$39,D4     *Number to compare input to to select num or letter 
0000108E  B404                      74              CMP.B       D4,D2       *Check if ascii code is for a number or letter
00001090  6F00 0008                 75              BLE         NUM         *Codes less than $39 imply a number, so branch
00001094  6000 000E                 76              BRA         LET         *If not a number, must be a letter.            
00001098  4E75                      77  AH_DONE     RTS
0000109A                            78  
0000109A  183C 0030                 79  NUM         MOVE.B      #$30,D4     *move $30 into D4 (ammount to sub from value if number)
0000109E  9404                      80              SUB.B       D4,D2       *convert to hexadecimal number
000010A0  6000 000C                 81              BRA         FORMAT      *branch to subroutine to store converted hex number
000010A4                            82              
000010A4  183C 0037                 83  LET         MOVE.B      #$37,D4     *move $37 into D4 (ammount to sub from value if letter)
000010A8  9404                      84              SUB.B       D4,D2       *convert to hexadecimal letter
000010AA  6000 0002                 85              BRA         FORMAT      *branch to subroutine to store converted hex letter
000010AE                            86  
000010AE  5301                      87  FORMAT      SUBI.B      #$1,D1      *Decrement D2 counter, one character has been converted
000010B0  D602                      88              ADD.B       D2,D3       *Store converted number in D3
000010B2  0C01 0000                 89              CMPI.B      #$0,D1      *Check if we're all done converting
000010B6  67C8                      90              BEQ         ASCII_HEX   *If not continue conversion
000010B8  E983                      91              ASL.L       #4,D3       *Shift bits to the left to correct position
000010BA  60C4                      92              BRA         ASCII_HEX   *Branch back to label
000010BC                            93              
000010BC                            94  *-------------------INIT_LOOP-------------------------------
000010BC                            95  *INIT_LOOP   MOVEA.L     
000010BC                            96  
000010BC                            97  *-----------------------IDENTIFY----------------------------
000010BC                            98  * Purpose: IDENTIFY_LOOP takes a data register input (D7) and identifies what instruction it is.
000010BC                            99  *          $AA is saved to D6 if OPCode is determined to be correct, or $FF if incorrect
000010BC                           100  *          ie) <D7> = input <D6> = $AA
000010BC                           101  * Assumption: When loop is called, D7 contains the next new machine code instruction
000010BC                           102  *-----------------------------------------------------------
000010BC  2407                     103  IDENTIFY    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000010BE  123C 003C                104              MOVE.B      #60,D1      *Moves 60 into D1
000010C2  E2AA                     105              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000010C4  D602                     106              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000010C6                           107              
000010C6  B63C 0000                108  F_CMP_0     CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000010CA  6600 000A                109              BNE         F_CMP_1     *If the first hex value is not 0, branch and see if its 1
000010CE  4EB9 000011BE            110              JSR         FIRST_0     *If the first hex value is 0, jump to First_0
000010D4  4E75                     111              RTS
000010D6                           112              
000010D6  B63C 0001                113  F_CMP_1     CMP.B       #$1,D3
000010DA  6600 000A                114              BNE         F_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000010DE  4EB9 000012C2            115              JSR         FIRST_1 
000010E4  4E75                     116              RTS
000010E6                           117             
000010E6  B63C 0002                118  F_CMP_2     CMP.B       #$2,D3
000010EA  6600 000A                119              BNE         F_CMP_3 
000010EE  4EB9 000013C6            120              JSR         FIRST_2
000010F4  4E75                     121              RTS
000010F6                           122              
000010F6  B63C 0003                123  F_CMP_3     CMP.B       #$3,D3
000010FA  6600 000A                124              BNE         F_CMP_4
000010FE  4EB9 000014CA            125              JSR         FIRST_3 
00001104  4E75                     126              RTS
00001106                           127             
00001106  B63C 0004                128  F_CMP_4     CMP.B       #$4,D3
0000110A  6600 000A                129              BNE         F_CMP_5
0000110E  4EB9 000015CE            130              JSR         FIRST_4
00001114  4E75                     131              RTS
00001116                           132              
00001116  B63C 0005                133  F_CMP_5     CMP.B       #$5,D3
0000111A  6600 000A                134              BNE         F_CMP_6
0000111E  4EB9 000016D2            135              JSR         FIRST_5
00001124  4E75                     136              RTS
00001126                           137              
00001126  B63C 0006                138  F_CMP_6     CMP.B       #$6,D3
0000112A  6600 000A                139              BNE         F_CMP_7
0000112E  4EB9 000017D6            140              JSR         FIRST_6
00001134  4E75                     141              RTS
00001136                           142              
00001136  B63C 0007                143  F_CMP_7     CMP.B       #$7,D3
0000113A  6600 000A                144              BNE         F_CMP_8
0000113E  4EB9 000018DA            145              JSR         FIRST_7
00001144  4E75                     146              RTS
00001146                           147              
00001146  B63C 0008                148  F_CMP_8     CMP.B       #$8,D3
0000114A  6600 000A                149              BNE         F_CMP_9
0000114E  4EB9 000019DE            150              JSR         FIRST_8
00001154  4E75                     151              RTS
00001156                           152              
00001156  B63C 0009                153  F_CMP_9     CMP.B       #$9,D3
0000115A  6600 000A                154              BNE         F_CMP_A
0000115E  4EB9 00001AE2            155              JSR         FIRST_9
00001164  4E75                     156              RTS
00001166                           157              
00001166  B63C 000A                158  F_CMP_A     CMP.B       #$A,D3
0000116A  6600 000A                159              BNE         F_CMP_B
0000116E  4EB9 00001BE6            160              JSR         FIRST_A
00001174  4E75                     161              RTS
00001176                           162              
00001176  B63C 000B                163  F_CMP_B     CMP.B       #$B,D3
0000117A  6600 000A                164              BNE         F_CMP_C
0000117E  4EB9 00001CEA            165              JSR         FIRST_B
00001184  4E75                     166              RTS
00001186                           167              
00001186  B63C 000C                168  F_CMP_C     CMP.B       #$C,D3
0000118A  6600 000A                169              BNE         F_CMP_D
0000118E  4EB9 00001DEE            170              JSR         FIRST_C
00001194  4E75                     171              RTS
00001196                           172              
00001196  B63C 000D                173  F_CMP_D     CMP.B       #$D,D3
0000119A  6600 000A                174              BNE         F_CMP_E
0000119E  4EB9 00001EF2            175              JSR         FIRST_D
000011A4  4E75                     176              RTS
000011A6                           177              
000011A6  B63C 000E                178  F_CMP_E     CMP.B       #$E,D3
000011AA  6600 000A                179              BNE         F_CMP_F
000011AE  4EB9 00001FF6            180              JSR         FIRST_E
000011B4  4E75                     181              RTS
000011B6                           182     
000011B6  4EB9 000020FA            183  F_CMP_F     JSR         FIRST_F     *If first hex value is not 0-D, it must be F. Branch to First_F
000011BC  4E75                     184              RTS
000011BE                           185                          
000011BE                           186  
000011BE                           187  *------------------------First_0----------------------------
000011BE                           188  *Purpose: First_0 is a subroutine of IDENTIFY. If First_0 is branched to, that means the first
000011BE                           189  *         four digits of the machine code are 0000.
000011BE                           190  *         Possible instructions are: ADDI, SUBI    
000011BE                           191  *-----------------------------------------------------------           
000011BE  2407                     192  FIRST_0     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000011C0  E98A                     193              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000011C2  123C 003C                194              MOVE.B      #60,D1      *Moves 60 into D1
000011C6  E2AA                     195              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000011C8  D602                     196              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000011CA                           197              
000011CA  B63C 0000                198  S_CMP_0     CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000011CE  6600 000A                199              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
000011D2  4EB9 000021FE            200              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
000011D8  4E75                     201              RTS
000011DA                           202              
000011DA  B63C 0001                203  S_CMP_1     CMP.B       #$1,D3
000011DE  6600 000A                204              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000011E2  4EB9 00002302            205              JSR         SECOND_1 
000011E8  4E75                     206              RTS
000011EA                           207             
000011EA  B63C 0002                208  S_CMP_2     CMP.B       #$2,D3
000011EE  6600 000A                209              BNE         S_CMP_3 
000011F2  4EB9 00002406            210              JSR         SECOND_2
000011F8  4E75                     211              RTS
000011FA                           212              
000011FA  B63C 0003                213  S_CMP_3     CMP.B       #$3,D3
000011FE  6600 000A                214              BNE         S_CMP_4
00001202  4EB9 0000250A            215              JSR         SECOND_3 
00001208  4E75                     216              RTS
0000120A                           217             
0000120A  B63C 0004                218  S_CMP_4     CMP.B       #$4,D3
0000120E  6600 000A                219              BNE         S_CMP_5
00001212  4EB9 0000260E            220              JSR         SECOND_4
00001218  4E75                     221              RTS
0000121A                           222              
0000121A  B63C 0005                223  S_CMP_5     CMP.B       #$5,D3
0000121E  6600 000A                224              BNE         S_CMP_6
00001222  4EB9 00002712            225              JSR         SECOND_5
00001228  4E75                     226              RTS
0000122A                           227              
0000122A  B63C 0006                228  S_CMP_6     CMP.B       #$6,D3
0000122E  6600 000A                229              BNE         S_CMP_7
00001232  4EB9 00002816            230              JSR         SECOND_6
00001238  4E75                     231              RTS
0000123A                           232              
0000123A  B63C 0007                233  S_CMP_7     CMP.B       #$7,D3
0000123E  6600 000A                234              BNE         S_CMP_8
00001242  4EB9 0000291A            235              JSR         SECOND_7
00001248  4E75                     236              RTS
0000124A                           237              
0000124A  B63C 0008                238  S_CMP_8     CMP.B       #$8,D3
0000124E  6600 000A                239              BNE         S_CMP_9
00001252  4EB9 00002A1E            240              JSR         SECOND_8
00001258  4E75                     241              RTS
0000125A                           242              
0000125A  B63C 0009                243  S_CMP_9     CMP.B       #$9,D3
0000125E  6600 000A                244              BNE         S_CMP_A
00001262  4EB9 00002B22            245              JSR         SECOND_9
00001268  4E75                     246              RTS
0000126A                           247              
0000126A  B63C 000A                248  S_CMP_A     CMP.B       #$A,D3
0000126E  6600 000A                249              BNE         S_CMP_B
00001272  4EB9 00002C26            250              JSR         SECOND_A
00001278  4E75                     251              RTS
0000127A                           252              
0000127A  B63C 000B                253  S_CMP_B     CMP.B       #$B,D3
0000127E  6600 000A                254              BNE         S_CMP_C
00001282  4EB9 00002D2C            255              JSR         SECOND_B
00001288  4E75                     256              RTS
0000128A                           257              
0000128A  B63C 000C                258  S_CMP_C     CMP.B       #$C,D3
0000128E  6600 000A                259              BNE         S_CMP_D
00001292  4EB9 00002E30            260              JSR         SECOND_C
00001298  4E75                     261              RTS
0000129A                           262              
0000129A  B63C 000D                263  S_CMP_D     CMP.B       #$D,D3
0000129E  6600 000A                264              BNE         S_CMP_E
000012A2  4EB9 00002F34            265              JSR         SECOND_D
000012A8  4E75                     266              RTS
000012AA                           267              
000012AA  B63C 000E                268  S_CMP_E     CMP.B       #$E,D3
000012AE  6600 000A                269              BNE         S_CMP_F
000012B2  4EB9 00003038            270              JSR         SECOND_E                 
000012B8  4E75                     271              RTS
000012BA                           272              
000012BA  4EB9 0000313C            273  S_CMP_F     JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000012C0  4E75                     274              RTS
000012C2                           275  
000012C2                           276  
000012C2                           277  *------------------------First_1----------------------------
000012C2                           278  *Purpose: First_1 is a subroutine of IDENTIFY. If First_1 is branched to, that means the first
000012C2                           279  *         four digits of the machine code are 0001.
000012C2                           280  *         Possible instructions are: MOVE, MOVEA
000012C2                           281  *-----------------------------------------------------------     
000012C2  2407                     282  FIRST_1     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000012C4  E18A                     283              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
000012C6  123C 0040                284              MOVE.B      #64,D1      *Moves 64 into D1
000012CA  E2AA                     285              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
000012CC  D602                     286              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000012CE                           287              
000012CE  B63C 0000                288              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000012D2  6600 0F46                289              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
000012D6  4EB9 00003240            290              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
000012DC  4E75                     291              RTS
000012DE                           292              
000012DE  B63C 0001                293              CMP.B       #$1,D3
000012E2  6600 0F46                294              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000012E6  4EB9 00003348            295              JSR         THIRD_1 
000012EC  4E75                     296              RTS
000012EE                           297             
000012EE  B63C 0002                298              CMP.B       #$2,D3
000012F2  6600 0F46                299              BNE         T_CMP_3 
000012F6  4EB9 00003450            300              JSR         THIRD_2
000012FC  4E75                     301              RTS
000012FE                           302              
000012FE  B63C 0003                303              CMP.B       #$3,D3
00001302  6600 0F46                304              BNE         T_CMP_4
00001306  4EB9 00003558            305              JSR         THIRD_3 
0000130C  4E75                     306              RTS
0000130E                           307             
0000130E  B63C 0004                308              CMP.B       #$4,D3
00001312  6600 0F46                309              BNE         T_CMP_5
00001316  4EB9 00003660            310              JSR         THIRD_4
0000131C  4E75                     311              RTS
0000131E                           312              
0000131E  B63C 0005                313              CMP.B       #$5,D3
00001322  6600 0F46                314              BNE         T_CMP_6
00001326  4EB9 00003768            315              JSR         THIRD_5
0000132C  4E75                     316              RTS
0000132E                           317              
0000132E  B63C 0006                318              CMP.B       #$6,D3
00001332  6600 0F46                319              BNE         T_CMP_7
00001336  4EB9 00003870            320              JSR         THIRD_6
0000133C  4E75                     321              RTS
0000133E                           322              
0000133E  B63C 0007                323              CMP.B       #$7,D3
00001342  6600 0F46                324              BNE         T_CMP_8
00001346  4EB9 00003978            325              JSR         THIRD_7
0000134C  4E75                     326              RTS
0000134E                           327              
0000134E  B63C 0008                328              CMP.B       #$8,D3
00001352  6600 0F46                329              BNE         T_CMP_9
00001356  4EB9 00003A80            330              JSR         THIRD_8
0000135C  4E75                     331              RTS
0000135E                           332              
0000135E  B63C 0009                333              CMP.B       #$9,D3
00001362  6600 0F46                334              BNE         T_CMP_A
00001366  4EB9 00003B88            335              JSR         THIRD_9
0000136C  4E75                     336              RTS
0000136E                           337              
0000136E  B63C 000A                338              CMP.B       #$A,D3
00001372  6600 0F46                339              BNE         T_CMP_B
00001376  4EB9 00003C90            340              JSR         THIRD_A
0000137C  4E75                     341              RTS
0000137E                           342              
0000137E  B63C 000B                343              CMP.B       #$B,D3
00001382  6600 0F46                344              BNE         T_CMP_C
00001386  4EB9 00003D98            345              JSR         THIRD_B
0000138C  4E75                     346              RTS
0000138E                           347              
0000138E  B63C 000C                348              CMP.B       #$C,D3
00001392  6600 0F46                349              BNE         T_CMP_D
00001396  4EB9 00003EA0            350              JSR         THIRD_C
0000139C  4E75                     351              RTS
0000139E                           352              
0000139E  B63C 000D                353              CMP.B       #$D,D3
000013A2  6600 0F46                354              BNE         T_CMP_E
000013A6  4EB9 00003FA8            355              JSR         THIRD_D
000013AC  4E75                     356              RTS
000013AE                           357              
000013AE  B63C 000E                358              CMP.B       #$E,D3
000013B2  6600 0F46                359              BNE         T_CMP_F
000013B6  4EB9 000040B0            360              JSR         THIRD_E                 
000013BC  4E75                     361              RTS
000013BE                           362              
000013BE  4EB9 000041B8            363              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000013C4  4E75                     364              RTS
000013C6                           365  
000013C6                           366  
000013C6                           367  
000013C6                           368  *------------------------First_2----------------------------
000013C6                           369  *Purpose: First_2 is a subroutine of IDENTIFY. If First_2 is branched to, that means the first
000013C6                           370  *         four digits of the machine code are 0010.
000013C6                           371  *         Possible instructions are: MOVE, MOVEA
000013C6                           372  *-----------------------------------------------------------
000013C6  2407                     373  FIRST_2     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000013C8  E98A                     374              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000013CA  123C 003C                375              MOVE.B      #60,D1      *Moves 60 into D1
000013CE  E2AA                     376              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000013D0  D602                     377              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000013D2                           378              
000013D2  B63C 0000                379              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000013D6  6600 FE02                380              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
000013DA  4EB9 000021FE            381              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
000013E0  4E75                     382              RTS
000013E2                           383              
000013E2  B63C 0001                384              CMP.B       #$1,D3
000013E6  6600 FE02                385              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000013EA  4EB9 00002302            386              JSR         SECOND_1 
000013F0  4E75                     387              RTS
000013F2                           388             
000013F2  B63C 0002                389              CMP.B       #$2,D3
000013F6  6600 FE02                390              BNE         S_CMP_3 
000013FA  4EB9 00002406            391              JSR         SECOND_2
00001400  4E75                     392              RTS
00001402                           393              
00001402  B63C 0003                394              CMP.B       #$3,D3
00001406  6600 FE02                395              BNE         S_CMP_4
0000140A  4EB9 0000250A            396              JSR         SECOND_3 
00001410  4E75                     397              RTS
00001412                           398             
00001412  B63C 0004                399              CMP.B       #$4,D3
00001416  6600 FE02                400              BNE         S_CMP_5
0000141A  4EB9 0000260E            401              JSR         SECOND_4
00001420  4E75                     402              RTS
00001422                           403              
00001422  B63C 0005                404              CMP.B       #$5,D3
00001426  6600 FE02                405              BNE         S_CMP_6
0000142A  4EB9 00002712            406              JSR         SECOND_5
00001430  4E75                     407              RTS
00001432                           408              
00001432  B63C 0006                409              CMP.B       #$6,D3
00001436  6600 FE02                410              BNE         S_CMP_7
0000143A  4EB9 00002816            411              JSR         SECOND_6
00001440  4E75                     412              RTS
00001442                           413              
00001442  B63C 0007                414              CMP.B       #$7,D3
00001446  6600 FE02                415              BNE         S_CMP_8
0000144A  4EB9 0000291A            416              JSR         SECOND_7
00001450  4E75                     417              RTS
00001452                           418              
00001452  B63C 0008                419              CMP.B       #$8,D3
00001456  6600 FE02                420              BNE         S_CMP_9
0000145A  4EB9 00002A1E            421              JSR         SECOND_8
00001460  4E75                     422              RTS
00001462                           423              
00001462  B63C 0009                424              CMP.B       #$9,D3
00001466  6600 FE02                425              BNE         S_CMP_A
0000146A  4EB9 00002B22            426              JSR         SECOND_9
00001470  4E75                     427              RTS
00001472                           428              
00001472  B63C 000A                429              CMP.B       #$A,D3
00001476  6600 FE02                430              BNE         S_CMP_B
0000147A  4EB9 00002C26            431              JSR         SECOND_A
00001480  4E75                     432              RTS
00001482                           433              
00001482  B63C 000B                434              CMP.B       #$B,D3
00001486  6600 FE02                435              BNE         S_CMP_C
0000148A  4EB9 00002D2C            436              JSR         SECOND_B
00001490  4E75                     437              RTS
00001492                           438              
00001492  B63C 000C                439              CMP.B       #$C,D3
00001496  6600 FE02                440              BNE         S_CMP_D
0000149A  4EB9 00002E30            441              JSR         SECOND_C
000014A0  4E75                     442              RTS
000014A2                           443              
000014A2  B63C 000D                444              CMP.B       #$D,D3
000014A6  6600 FE02                445              BNE         S_CMP_E
000014AA  4EB9 00002F34            446              JSR         SECOND_D
000014B0  4E75                     447              RTS
000014B2                           448              
000014B2  B63C 000E                449             CMP.B       #$E,D3
000014B6  6600 FE02                450              BNE         S_CMP_F
000014BA  4EB9 00003038            451              JSR         SECOND_E                 
000014C0  4E75                     452              RTS
000014C2                           453              
000014C2  4EB9 0000313C            454              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000014C8  4E75                     455              RTS
000014CA                           456  
000014CA                           457  
000014CA                           458  *------------------------First_3----------------------------
000014CA                           459  *Purpose: First_3 is a subroutine of IDENTIFY. If First_3 is branched to, that means the first
000014CA                           460  *         four digits of the machine code are 0011.
000014CA                           461  *         Possible instructions are: MOVE, MOVEA
000014CA                           462  *-----------------------------------------------------------
000014CA  2407                     463  FIRST_3     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000014CC  E98A                     464              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000014CE  123C 003C                465              MOVE.B      #60,D1      *Moves 60 into D1
000014D2  E2AA                     466              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000014D4  D602                     467              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000014D6                           468              
000014D6  B63C 0000                469              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000014DA  6600 FCFE                470              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
000014DE  4EB9 000021FE            471              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
000014E4  4E75                     472              RTS
000014E6                           473              
000014E6  B63C 0001                474              CMP.B       #$1,D3
000014EA  6600 FCFE                475              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000014EE  4EB9 00002302            476              JSR         SECOND_1 
000014F4  4E75                     477              RTS
000014F6                           478             
000014F6  B63C 0002                479              CMP.B       #$2,D3
000014FA  6600 FCFE                480              BNE         S_CMP_3 
000014FE  4EB9 00002406            481              JSR         SECOND_2
00001504  4E75                     482              RTS
00001506                           483              
00001506  B63C 0003                484              CMP.B       #$3,D3
0000150A  6600 FCFE                485              BNE         S_CMP_4
0000150E  4EB9 0000250A            486              JSR         SECOND_3 
00001514  4E75                     487              RTS
00001516                           488             
00001516  B63C 0004                489              CMP.B       #$4,D3
0000151A  6600 FCFE                490              BNE         S_CMP_5
0000151E  4EB9 0000260E            491              JSR         SECOND_4
00001524  4E75                     492              RTS
00001526                           493              
00001526  B63C 0005                494              CMP.B       #$5,D3
0000152A  6600 FCFE                495              BNE         S_CMP_6
0000152E  4EB9 00002712            496              JSR         SECOND_5
00001534  4E75                     497              RTS
00001536                           498              
00001536  B63C 0006                499              CMP.B       #$6,D3
0000153A  6600 FCFE                500              BNE         S_CMP_7
0000153E  4EB9 00002816            501              JSR         SECOND_6
00001544  4E75                     502              RTS
00001546                           503              
00001546  B63C 0007                504              CMP.B       #$7,D3
0000154A  6600 FCFE                505              BNE         S_CMP_8
0000154E  4EB9 0000291A            506              JSR         SECOND_7
00001554  4E75                     507              RTS
00001556                           508              
00001556  B63C 0008                509              CMP.B       #$8,D3
0000155A  6600 FCFE                510              BNE         S_CMP_9
0000155E  4EB9 00002A1E            511              JSR         SECOND_8
00001564  4E75                     512              RTS
00001566                           513              
00001566  B63C 0009                514              CMP.B       #$9,D3
0000156A  6600 FCFE                515              BNE         S_CMP_A
0000156E  4EB9 00002B22            516              JSR         SECOND_9
00001574  4E75                     517              RTS
00001576                           518              
00001576  B63C 000A                519              CMP.B       #$A,D3
0000157A  6600 FCFE                520              BNE         S_CMP_B
0000157E  4EB9 00002C26            521              JSR         SECOND_A
00001584  4E75                     522              RTS
00001586                           523              
00001586  B63C 000B                524              CMP.B       #$B,D3
0000158A  6600 FCFE                525              BNE         S_CMP_C
0000158E  4EB9 00002D2C            526              JSR         SECOND_B
00001594  4E75                     527              RTS
00001596                           528              
00001596  B63C 000C                529              CMP.B       #$C,D3
0000159A  6600 FCFE                530              BNE         S_CMP_D
0000159E  4EB9 00002E30            531              JSR         SECOND_C
000015A4  4E75                     532              RTS
000015A6                           533              
000015A6  B63C 000D                534              CMP.B       #$D,D3
000015AA  6600 FCFE                535              BNE         S_CMP_E
000015AE  4EB9 00002F34            536              JSR         SECOND_D
000015B4  4E75                     537              RTS
000015B6                           538              
000015B6  B63C 000E                539             CMP.B       #$E,D3
000015BA  6600 FCFE                540              BNE         S_CMP_F
000015BE  4EB9 00003038            541              JSR         SECOND_E                 
000015C4  4E75                     542              RTS
000015C6                           543              
000015C6  4EB9 0000313C            544              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000015CC  4E75                     545              RTS
000015CE                           546  
000015CE                           547  
000015CE                           548  
000015CE                           549  *------------------------First_4----------------------------
000015CE                           550  *Purpose: First_4 is a subroutine of IDENTIFY. If First_4 is branched to, that means the first
000015CE                           551  *         four digits of the machine code are 0100.
000015CE                           552  *         Possible instructions are: NOP, MOVEM, LEA, JSR, RTS    
000015CE                           553  *-----------------------------------------------------------
000015CE  2407                     554  FIRST_4     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000015D0  E98A                     555              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000015D2  123C 003C                556              MOVE.B      #60,D1      *Moves 60 into D1
000015D6  E2AA                     557              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000015D8  D602                     558              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000015DA                           559              
000015DA  B63C 0000                560              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000015DE  6600 FBFA                561              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
000015E2  4EB9 000021FE            562              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
000015E8  4E75                     563              RTS
000015EA                           564              
000015EA  B63C 0001                565              CMP.B       #$1,D3
000015EE  6600 FBFA                566              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000015F2  4EB9 00002302            567              JSR         SECOND_1 
000015F8  4E75                     568              RTS
000015FA                           569             
000015FA  B63C 0002                570              CMP.B       #$2,D3
000015FE  6600 FBFA                571              BNE         S_CMP_3 
00001602  4EB9 00002406            572              JSR         SECOND_2
00001608  4E75                     573              RTS
0000160A                           574              
0000160A  B63C 0003                575              CMP.B       #$3,D3
0000160E  6600 FBFA                576              BNE         S_CMP_4
00001612  4EB9 0000250A            577              JSR         SECOND_3 
00001618  4E75                     578              RTS
0000161A                           579             
0000161A  B63C 0004                580              CMP.B       #$4,D3
0000161E  6600 FBFA                581              BNE         S_CMP_5
00001622  4EB9 0000260E            582              JSR         SECOND_4
00001628  4E75                     583              RTS
0000162A                           584              
0000162A  B63C 0005                585              CMP.B       #$5,D3
0000162E  6600 FBFA                586              BNE         S_CMP_6
00001632  4EB9 00002712            587              JSR         SECOND_5
00001638  4E75                     588              RTS
0000163A                           589              
0000163A  B63C 0006                590              CMP.B       #$6,D3
0000163E  6600 FBFA                591              BNE         S_CMP_7
00001642  4EB9 00002816            592              JSR         SECOND_6
00001648  4E75                     593              RTS
0000164A                           594              
0000164A  B63C 0007                595              CMP.B       #$7,D3
0000164E  6600 FBFA                596              BNE         S_CMP_8
00001652  4EB9 0000291A            597              JSR         SECOND_7
00001658  4E75                     598              RTS
0000165A                           599              
0000165A  B63C 0008                600              CMP.B       #$8,D3
0000165E  6600 FBFA                601              BNE         S_CMP_9
00001662  4EB9 00002A1E            602              JSR         SECOND_8
00001668  4E75                     603              RTS
0000166A                           604              
0000166A  B63C 0009                605              CMP.B       #$9,D3
0000166E  6600 FBFA                606              BNE         S_CMP_A
00001672  4EB9 00002B22            607              JSR         SECOND_9
00001678  4E75                     608              RTS
0000167A                           609              
0000167A  B63C 000A                610              CMP.B       #$A,D3
0000167E  6600 FBFA                611              BNE         S_CMP_B
00001682  4EB9 00002C26            612              JSR         SECOND_A
00001688  4E75                     613              RTS
0000168A                           614              
0000168A  B63C 000B                615              CMP.B       #$B,D3
0000168E  6600 FBFA                616              BNE         S_CMP_C
00001692  4EB9 00002D2C            617              JSR         SECOND_B
00001698  4E75                     618              RTS
0000169A                           619              
0000169A  B63C 000C                620              CMP.B       #$C,D3
0000169E  6600 FBFA                621              BNE         S_CMP_D
000016A2  4EB9 00002E30            622              JSR         SECOND_C
000016A8  4E75                     623              RTS
000016AA                           624              
000016AA  B63C 000D                625              CMP.B       #$D,D3
000016AE  6600 FBFA                626              BNE         S_CMP_E
000016B2  4EB9 00002F34            627              JSR         SECOND_D
000016B8  4E75                     628              RTS
000016BA                           629              
000016BA  B63C 000E                630             CMP.B       #$E,D3
000016BE  6600 FBFA                631              BNE         S_CMP_F
000016C2  4EB9 00003038            632              JSR         SECOND_E                 
000016C8  4E75                     633              RTS
000016CA                           634              
000016CA  4EB9 0000313C            635              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000016D0  4E75                     636              RTS
000016D2                           637  
000016D2                           638  
000016D2                           639  
000016D2                           640  *------------------------First_5----------------------------
000016D2                           641  *Purpose: First_5 is a subroutine of IDENTIFY. If First_5 is branched to, that means the first
000016D2                           642  *         four digits of the machine code are 0101.
000016D2                           643  *         Possible instructions are: ADDQ    
000016D2                           644  *-----------------------------------------------------------
000016D2  2407                     645  FIRST_5     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000016D4  E98A                     646              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000016D6  123C 003C                647              MOVE.B      #60,D1      *Moves 60 into D1
000016DA  E2AA                     648              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000016DC  D602                     649              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000016DE                           650              
000016DE  B63C 0000                651              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000016E2  6600 FAF6                652              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
000016E6  4EB9 000021FE            653              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
000016EC  4E75                     654              RTS
000016EE                           655              
000016EE  B63C 0001                656              CMP.B       #$1,D3
000016F2  6600 FAF6                657              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000016F6  4EB9 00002302            658              JSR         SECOND_1 
000016FC  4E75                     659              RTS
000016FE                           660             
000016FE  B63C 0002                661              CMP.B       #$2,D3
00001702  6600 FAF6                662              BNE         S_CMP_3 
00001706  4EB9 00002406            663              JSR         SECOND_2
0000170C  4E75                     664              RTS
0000170E                           665              
0000170E  B63C 0003                666              CMP.B       #$3,D3
00001712  6600 FAF6                667              BNE         S_CMP_4
00001716  4EB9 0000250A            668              JSR         SECOND_3 
0000171C  4E75                     669              RTS
0000171E                           670             
0000171E  B63C 0004                671              CMP.B       #$4,D3
00001722  6600 FAF6                672              BNE         S_CMP_5
00001726  4EB9 0000260E            673              JSR         SECOND_4
0000172C  4E75                     674              RTS
0000172E                           675              
0000172E  B63C 0005                676              CMP.B       #$5,D3
00001732  6600 FAF6                677              BNE         S_CMP_6
00001736  4EB9 00002712            678              JSR         SECOND_5
0000173C  4E75                     679              RTS
0000173E                           680              
0000173E  B63C 0006                681              CMP.B       #$6,D3
00001742  6600 FAF6                682              BNE         S_CMP_7
00001746  4EB9 00002816            683              JSR         SECOND_6
0000174C  4E75                     684              RTS
0000174E                           685              
0000174E  B63C 0007                686              CMP.B       #$7,D3
00001752  6600 FAF6                687              BNE         S_CMP_8
00001756  4EB9 0000291A            688              JSR         SECOND_7
0000175C  4E75                     689              RTS
0000175E                           690              
0000175E  B63C 0008                691              CMP.B       #$8,D3
00001762  6600 FAF6                692              BNE         S_CMP_9
00001766  4EB9 00002A1E            693              JSR         SECOND_8
0000176C  4E75                     694              RTS
0000176E                           695              
0000176E  B63C 0009                696              CMP.B       #$9,D3
00001772  6600 FAF6                697              BNE         S_CMP_A
00001776  4EB9 00002B22            698              JSR         SECOND_9
0000177C  4E75                     699              RTS
0000177E                           700              
0000177E  B63C 000A                701              CMP.B       #$A,D3
00001782  6600 FAF6                702              BNE         S_CMP_B
00001786  4EB9 00002C26            703              JSR         SECOND_A
0000178C  4E75                     704              RTS
0000178E                           705              
0000178E  B63C 000B                706              CMP.B       #$B,D3
00001792  6600 FAF6                707              BNE         S_CMP_C
00001796  4EB9 00002D2C            708              JSR         SECOND_B
0000179C  4E75                     709              RTS
0000179E                           710              
0000179E  B63C 000C                711              CMP.B       #$C,D3
000017A2  6600 FAF6                712              BNE         S_CMP_D
000017A6  4EB9 00002E30            713              JSR         SECOND_C
000017AC  4E75                     714              RTS
000017AE                           715              
000017AE  B63C 000D                716              CMP.B       #$D,D3
000017B2  6600 FAF6                717              BNE         S_CMP_E
000017B6  4EB9 00002F34            718              JSR         SECOND_D
000017BC  4E75                     719              RTS
000017BE                           720              
000017BE  B63C 000E                721             CMP.B       #$E,D3
000017C2  6600 FAF6                722              BNE         S_CMP_F
000017C6  4EB9 00003038            723              JSR         SECOND_E                 
000017CC  4E75                     724              RTS
000017CE                           725              
000017CE  4EB9 0000313C            726              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000017D4  4E75                     727              RTS
000017D6                           728  
000017D6                           729  
000017D6                           730  
000017D6                           731  *------------------------First_6----------------------------
000017D6                           732  *Purpose: First_6 is a subroutine of IDENTIFY. If First_6 is branched to, that means the first
000017D6                           733  *         four digits of the machine code are 0110.
000017D6                           734  *         Possible instructions are: BRA, Bcc    
000017D6                           735  *-----------------------------------------------------------
000017D6  2407                     736  FIRST_6     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000017D8  E98A                     737              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000017DA  123C 003C                738              MOVE.B      #60,D1      *Moves 60 into D1
000017DE  E2AA                     739              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000017E0  D602                     740              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000017E2                           741              
000017E2  B63C 0000                742              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000017E6  6600 F9F2                743              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
000017EA  4EB9 000021FE            744              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
000017F0  4E75                     745              RTS
000017F2                           746              
000017F2  B63C 0001                747              CMP.B       #$1,D3
000017F6  6600 F9F2                748              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000017FA  4EB9 00002302            749              JSR         SECOND_1 
00001800  4E75                     750              RTS
00001802                           751             
00001802  B63C 0002                752              CMP.B       #$2,D3
00001806  6600 F9F2                753              BNE         S_CMP_3 
0000180A  4EB9 00002406            754              JSR         SECOND_2
00001810  4E75                     755              RTS
00001812                           756              
00001812  B63C 0003                757              CMP.B       #$3,D3
00001816  6600 F9F2                758              BNE         S_CMP_4
0000181A  4EB9 0000250A            759              JSR         SECOND_3 
00001820  4E75                     760              RTS
00001822                           761             
00001822  B63C 0004                762              CMP.B       #$4,D3
00001826  6600 F9F2                763              BNE         S_CMP_5
0000182A  4EB9 0000260E            764              JSR         SECOND_4
00001830  4E75                     765              RTS
00001832                           766              
00001832  B63C 0005                767              CMP.B       #$5,D3
00001836  6600 F9F2                768              BNE         S_CMP_6
0000183A  4EB9 00002712            769              JSR         SECOND_5
00001840  4E75                     770              RTS
00001842                           771              
00001842  B63C 0006                772              CMP.B       #$6,D3
00001846  6600 F9F2                773              BNE         S_CMP_7
0000184A  4EB9 00002816            774              JSR         SECOND_6
00001850  4E75                     775              RTS
00001852                           776              
00001852  B63C 0007                777              CMP.B       #$7,D3
00001856  6600 F9F2                778              BNE         S_CMP_8
0000185A  4EB9 0000291A            779              JSR         SECOND_7
00001860  4E75                     780              RTS
00001862                           781              
00001862  B63C 0008                782              CMP.B       #$8,D3
00001866  6600 F9F2                783              BNE         S_CMP_9
0000186A  4EB9 00002A1E            784              JSR         SECOND_8
00001870  4E75                     785              RTS
00001872                           786              
00001872  B63C 0009                787              CMP.B       #$9,D3
00001876  6600 F9F2                788              BNE         S_CMP_A
0000187A  4EB9 00002B22            789              JSR         SECOND_9
00001880  4E75                     790              RTS
00001882                           791              
00001882  B63C 000A                792              CMP.B       #$A,D3
00001886  6600 F9F2                793              BNE         S_CMP_B
0000188A  4EB9 00002C26            794              JSR         SECOND_A
00001890  4E75                     795              RTS
00001892                           796              
00001892  B63C 000B                797              CMP.B       #$B,D3
00001896  6600 F9F2                798              BNE         S_CMP_C
0000189A  4EB9 00002D2C            799              JSR         SECOND_B
000018A0  4E75                     800              RTS
000018A2                           801              
000018A2  B63C 000C                802              CMP.B       #$C,D3
000018A6  6600 F9F2                803              BNE         S_CMP_D
000018AA  4EB9 00002E30            804              JSR         SECOND_C
000018B0  4E75                     805              RTS
000018B2                           806              
000018B2  B63C 000D                807              CMP.B       #$D,D3
000018B6  6600 F9F2                808              BNE         S_CMP_E
000018BA  4EB9 00002F34            809              JSR         SECOND_D
000018C0  4E75                     810              RTS
000018C2                           811              
000018C2  B63C 000E                812             CMP.B       #$E,D3
000018C6  6600 F9F2                813              BNE         S_CMP_F
000018CA  4EB9 00003038            814              JSR         SECOND_E                 
000018D0  4E75                     815              RTS
000018D2                           816              
000018D2  4EB9 0000313C            817              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000018D8  4E75                     818              RTS
000018DA                           819  
000018DA                           820  
000018DA                           821  
000018DA                           822  *------------------------First_7----------------------------
000018DA                           823  *Purpose: First_7 is a subroutine of IDENTIFY. If First_7 is branched to, that means the first
000018DA                           824  *         four digits of the machine code are 0111.
000018DA                           825  *         Possible instructions are: MOVEQ    
000018DA                           826  *-----------------------------------------------------------
000018DA  2407                     827  FIRST_7     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000018DC  E98A                     828              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000018DE  123C 003C                829              MOVE.B      #60,D1      *Moves 60 into D1
000018E2  E2AA                     830              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000018E4  D602                     831              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000018E6                           832              
000018E6  B63C 0000                833              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000018EA  6600 F8EE                834              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
000018EE  4EB9 000021FE            835              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
000018F4  4E75                     836              RTS
000018F6                           837              
000018F6  B63C 0001                838              CMP.B       #$1,D3
000018FA  6600 F8EE                839              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000018FE  4EB9 00002302            840              JSR         SECOND_1 
00001904  4E75                     841              RTS
00001906                           842             
00001906  B63C 0002                843              CMP.B       #$2,D3
0000190A  6600 F8EE                844              BNE         S_CMP_3 
0000190E  4EB9 00002406            845              JSR         SECOND_2
00001914  4E75                     846              RTS
00001916                           847              
00001916  B63C 0003                848              CMP.B       #$3,D3
0000191A  6600 F8EE                849              BNE         S_CMP_4
0000191E  4EB9 0000250A            850              JSR         SECOND_3 
00001924  4E75                     851              RTS
00001926                           852             
00001926  B63C 0004                853              CMP.B       #$4,D3
0000192A  6600 F8EE                854              BNE         S_CMP_5
0000192E  4EB9 0000260E            855              JSR         SECOND_4
00001934  4E75                     856              RTS
00001936                           857              
00001936  B63C 0005                858              CMP.B       #$5,D3
0000193A  6600 F8EE                859              BNE         S_CMP_6
0000193E  4EB9 00002712            860              JSR         SECOND_5
00001944  4E75                     861              RTS
00001946                           862              
00001946  B63C 0006                863              CMP.B       #$6,D3
0000194A  6600 F8EE                864              BNE         S_CMP_7
0000194E  4EB9 00002816            865              JSR         SECOND_6
00001954  4E75                     866              RTS
00001956                           867              
00001956  B63C 0007                868              CMP.B       #$7,D3
0000195A  6600 F8EE                869              BNE         S_CMP_8
0000195E  4EB9 0000291A            870              JSR         SECOND_7
00001964  4E75                     871              RTS
00001966                           872              
00001966  B63C 0008                873              CMP.B       #$8,D3
0000196A  6600 F8EE                874              BNE         S_CMP_9
0000196E  4EB9 00002A1E            875              JSR         SECOND_8
00001974  4E75                     876              RTS
00001976                           877              
00001976  B63C 0009                878              CMP.B       #$9,D3
0000197A  6600 F8EE                879              BNE         S_CMP_A
0000197E  4EB9 00002B22            880              JSR         SECOND_9
00001984  4E75                     881              RTS
00001986                           882              
00001986  B63C 000A                883              CMP.B       #$A,D3
0000198A  6600 F8EE                884              BNE         S_CMP_B
0000198E  4EB9 00002C26            885              JSR         SECOND_A
00001994  4E75                     886              RTS
00001996                           887              
00001996  B63C 000B                888              CMP.B       #$B,D3
0000199A  6600 F8EE                889              BNE         S_CMP_C
0000199E  4EB9 00002D2C            890              JSR         SECOND_B
000019A4  4E75                     891              RTS
000019A6                           892              
000019A6  B63C 000C                893              CMP.B       #$C,D3
000019AA  6600 F8EE                894              BNE         S_CMP_D
000019AE  4EB9 00002E30            895              JSR         SECOND_C
000019B4  4E75                     896              RTS
000019B6                           897              
000019B6  B63C 000D                898              CMP.B       #$D,D3
000019BA  6600 F8EE                899              BNE         S_CMP_E
000019BE  4EB9 00002F34            900              JSR         SECOND_D
000019C4  4E75                     901              RTS
000019C6                           902              
000019C6  B63C 000E                903             CMP.B       #$E,D3
000019CA  6600 F8EE                904              BNE         S_CMP_F
000019CE  4EB9 00003038            905              JSR         SECOND_E                 
000019D4  4E75                     906              RTS
000019D6                           907              
000019D6  4EB9 0000313C            908              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000019DC  4E75                     909              RTS
000019DE                           910  
000019DE                           911  
000019DE                           912  
000019DE                           913  *------------------------First_8----------------------------
000019DE                           914  *Purpose: First_8 is a subroutine of IDENTIFY. If First_8 is branched to, that means the first
000019DE                           915  *         four digits of the machine code are 1000.
000019DE                           916  *         Possible instructions are: DIVU, OR     
000019DE                           917  *-----------------------------------------------------------
000019DE  2407                     918  FIRST_8     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000019E0  E98A                     919              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000019E2  123C 003C                920              MOVE.B      #60,D1      *Moves 60 into D1
000019E6  E2AA                     921              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
000019E8  D602                     922              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000019EA                           923              
000019EA  B63C 0000                924              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000019EE  6600 F7EA                925              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
000019F2  4EB9 000021FE            926              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
000019F8  4E75                     927              RTS
000019FA                           928              
000019FA  B63C 0001                929              CMP.B       #$1,D3
000019FE  6600 F7EA                930              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00001A02  4EB9 00002302            931              JSR         SECOND_1 
00001A08  4E75                     932              RTS
00001A0A                           933             
00001A0A  B63C 0002                934              CMP.B       #$2,D3
00001A0E  6600 F7EA                935              BNE         S_CMP_3 
00001A12  4EB9 00002406            936              JSR         SECOND_2
00001A18  4E75                     937              RTS
00001A1A                           938              
00001A1A  B63C 0003                939              CMP.B       #$3,D3
00001A1E  6600 F7EA                940              BNE         S_CMP_4
00001A22  4EB9 0000250A            941              JSR         SECOND_3 
00001A28  4E75                     942              RTS
00001A2A                           943             
00001A2A  B63C 0004                944              CMP.B       #$4,D3
00001A2E  6600 F7EA                945              BNE         S_CMP_5
00001A32  4EB9 0000260E            946              JSR         SECOND_4
00001A38  4E75                     947              RTS
00001A3A                           948              
00001A3A  B63C 0005                949              CMP.B       #$5,D3
00001A3E  6600 F7EA                950              BNE         S_CMP_6
00001A42  4EB9 00002712            951              JSR         SECOND_5
00001A48  4E75                     952              RTS
00001A4A                           953              
00001A4A  B63C 0006                954              CMP.B       #$6,D3
00001A4E  6600 F7EA                955              BNE         S_CMP_7
00001A52  4EB9 00002816            956              JSR         SECOND_6
00001A58  4E75                     957              RTS
00001A5A                           958              
00001A5A  B63C 0007                959              CMP.B       #$7,D3
00001A5E  6600 F7EA                960              BNE         S_CMP_8
00001A62  4EB9 0000291A            961              JSR         SECOND_7
00001A68  4E75                     962              RTS
00001A6A                           963              
00001A6A  B63C 0008                964              CMP.B       #$8,D3
00001A6E  6600 F7EA                965              BNE         S_CMP_9
00001A72  4EB9 00002A1E            966              JSR         SECOND_8
00001A78  4E75                     967              RTS
00001A7A                           968              
00001A7A  B63C 0009                969              CMP.B       #$9,D3
00001A7E  6600 F7EA                970              BNE         S_CMP_A
00001A82  4EB9 00002B22            971              JSR         SECOND_9
00001A88  4E75                     972              RTS
00001A8A                           973              
00001A8A  B63C 000A                974              CMP.B       #$A,D3
00001A8E  6600 F7EA                975              BNE         S_CMP_B
00001A92  4EB9 00002C26            976              JSR         SECOND_A
00001A98  4E75                     977              RTS
00001A9A                           978              
00001A9A  B63C 000B                979              CMP.B       #$B,D3
00001A9E  6600 F7EA                980              BNE         S_CMP_C
00001AA2  4EB9 00002D2C            981              JSR         SECOND_B
00001AA8  4E75                     982              RTS
00001AAA                           983              
00001AAA  B63C 000C                984              CMP.B       #$C,D3
00001AAE  6600 F7EA                985              BNE         S_CMP_D
00001AB2  4EB9 00002E30            986              JSR         SECOND_C
00001AB8  4E75                     987              RTS
00001ABA                           988              
00001ABA  B63C 000D                989              CMP.B       #$D,D3
00001ABE  6600 F7EA                990              BNE         S_CMP_E
00001AC2  4EB9 00002F34            991              JSR         SECOND_D
00001AC8  4E75                     992              RTS
00001ACA                           993              
00001ACA  B63C 000E                994             CMP.B       #$E,D3
00001ACE  6600 F7EA                995              BNE         S_CMP_F
00001AD2  4EB9 00003038            996              JSR         SECOND_E                 
00001AD8  4E75                     997              RTS
00001ADA                           998              
00001ADA  4EB9 0000313C            999              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00001AE0  4E75                    1000              RTS
00001AE2                          1001  
00001AE2                          1002  
00001AE2                          1003  
00001AE2                          1004  *------------------------First_9----------------------------
00001AE2                          1005  *Purpose: First_9 is a subroutine of IDENTIFY. If First_9 is branched to, that means the first
00001AE2                          1006  *         four digits of the machine code are 1001.
00001AE2                          1007  *         Possible instructions are: SUB    
00001AE2                          1008  *-----------------------------------------------------------
00001AE2  2407                    1009  FIRST_9     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00001AE4  E98A                    1010              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
00001AE6  123C 003C               1011              MOVE.B      #60,D1      *Moves 60 into D1
00001AEA  E2AA                    1012              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
00001AEC  D602                    1013              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00001AEE                          1014              
00001AEE  B63C 0000               1015              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00001AF2  6600 F6E6               1016              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
00001AF6  4EB9 000021FE           1017              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
00001AFC  4E75                    1018              RTS
00001AFE                          1019              
00001AFE  B63C 0001               1020              CMP.B       #$1,D3
00001B02  6600 F6E6               1021              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00001B06  4EB9 00002302           1022              JSR         SECOND_1 
00001B0C  4E75                    1023              RTS
00001B0E                          1024             
00001B0E  B63C 0002               1025              CMP.B       #$2,D3
00001B12  6600 F6E6               1026              BNE         S_CMP_3 
00001B16  4EB9 00002406           1027              JSR         SECOND_2
00001B1C  4E75                    1028              RTS
00001B1E                          1029              
00001B1E  B63C 0003               1030              CMP.B       #$3,D3
00001B22  6600 F6E6               1031              BNE         S_CMP_4
00001B26  4EB9 0000250A           1032              JSR         SECOND_3 
00001B2C  4E75                    1033              RTS
00001B2E                          1034             
00001B2E  B63C 0004               1035              CMP.B       #$4,D3
00001B32  6600 F6E6               1036              BNE         S_CMP_5
00001B36  4EB9 0000260E           1037              JSR         SECOND_4
00001B3C  4E75                    1038              RTS
00001B3E                          1039              
00001B3E  B63C 0005               1040              CMP.B       #$5,D3
00001B42  6600 F6E6               1041              BNE         S_CMP_6
00001B46  4EB9 00002712           1042              JSR         SECOND_5
00001B4C  4E75                    1043              RTS
00001B4E                          1044              
00001B4E  B63C 0006               1045              CMP.B       #$6,D3
00001B52  6600 F6E6               1046              BNE         S_CMP_7
00001B56  4EB9 00002816           1047              JSR         SECOND_6
00001B5C  4E75                    1048              RTS
00001B5E                          1049              
00001B5E  B63C 0007               1050              CMP.B       #$7,D3
00001B62  6600 F6E6               1051              BNE         S_CMP_8
00001B66  4EB9 0000291A           1052              JSR         SECOND_7
00001B6C  4E75                    1053              RTS
00001B6E                          1054              
00001B6E  B63C 0008               1055              CMP.B       #$8,D3
00001B72  6600 F6E6               1056              BNE         S_CMP_9
00001B76  4EB9 00002A1E           1057              JSR         SECOND_8
00001B7C  4E75                    1058              RTS
00001B7E                          1059              
00001B7E  B63C 0009               1060              CMP.B       #$9,D3
00001B82  6600 F6E6               1061              BNE         S_CMP_A
00001B86  4EB9 00002B22           1062              JSR         SECOND_9
00001B8C  4E75                    1063              RTS
00001B8E                          1064              
00001B8E  B63C 000A               1065              CMP.B       #$A,D3
00001B92  6600 F6E6               1066              BNE         S_CMP_B
00001B96  4EB9 00002C26           1067              JSR         SECOND_A
00001B9C  4E75                    1068              RTS
00001B9E                          1069              
00001B9E  B63C 000B               1070              CMP.B       #$B,D3
00001BA2  6600 F6E6               1071              BNE         S_CMP_C
00001BA6  4EB9 00002D2C           1072              JSR         SECOND_B
00001BAC  4E75                    1073              RTS
00001BAE                          1074              
00001BAE  B63C 000C               1075              CMP.B       #$C,D3
00001BB2  6600 F6E6               1076              BNE         S_CMP_D
00001BB6  4EB9 00002E30           1077              JSR         SECOND_C
00001BBC  4E75                    1078              RTS
00001BBE                          1079              
00001BBE  B63C 000D               1080              CMP.B       #$D,D3
00001BC2  6600 F6E6               1081              BNE         S_CMP_E
00001BC6  4EB9 00002F34           1082              JSR         SECOND_D
00001BCC  4E75                    1083              RTS
00001BCE                          1084              
00001BCE  B63C 000E               1085             CMP.B       #$E,D3
00001BD2  6600 F6E6               1086              BNE         S_CMP_F
00001BD6  4EB9 00003038           1087              JSR         SECOND_E                 
00001BDC  4E75                    1088              RTS
00001BDE                          1089              
00001BDE  4EB9 0000313C           1090              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00001BE4  4E75                    1091              RTS
00001BE6                          1092  
00001BE6                          1093  
00001BE6                          1094  
00001BE6                          1095  *------------------------First_A----------------------------
00001BE6                          1096  *Purpose: First_A is a subroutine of IDENTIFY. If First_A is branched to, that means the first
00001BE6                          1097  *         four digits of the machine code are 1010.
00001BE6                          1098  *         Possible instructions are: Illegal    
00001BE6                          1099  *-----------------------------------------------------------
00001BE6  2407                    1100  FIRST_A     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00001BE8  E98A                    1101              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
00001BEA  123C 003C               1102              MOVE.B      #60,D1      *Moves 60 into D1
00001BEE  E2AA                    1103              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
00001BF0  D602                    1104              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00001BF2                          1105              
00001BF2  B63C 0000               1106              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00001BF6  6600 F5E2               1107              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
00001BFA  4EB9 000021FE           1108              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
00001C00  4E75                    1109              RTS
00001C02                          1110              
00001C02  B63C 0001               1111              CMP.B       #$1,D3
00001C06  6600 F5E2               1112              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00001C0A  4EB9 00002302           1113              JSR         SECOND_1 
00001C10  4E75                    1114              RTS
00001C12                          1115             
00001C12  B63C 0002               1116              CMP.B       #$2,D3
00001C16  6600 F5E2               1117              BNE         S_CMP_3 
00001C1A  4EB9 00002406           1118              JSR         SECOND_2
00001C20  4E75                    1119              RTS
00001C22                          1120              
00001C22  B63C 0003               1121              CMP.B       #$3,D3
00001C26  6600 F5E2               1122              BNE         S_CMP_4
00001C2A  4EB9 0000250A           1123              JSR         SECOND_3 
00001C30  4E75                    1124              RTS
00001C32                          1125             
00001C32  B63C 0004               1126              CMP.B       #$4,D3
00001C36  6600 F5E2               1127              BNE         S_CMP_5
00001C3A  4EB9 0000260E           1128              JSR         SECOND_4
00001C40  4E75                    1129              RTS
00001C42                          1130              
00001C42  B63C 0005               1131              CMP.B       #$5,D3
00001C46  6600 F5E2               1132              BNE         S_CMP_6
00001C4A  4EB9 00002712           1133              JSR         SECOND_5
00001C50  4E75                    1134              RTS
00001C52                          1135              
00001C52  B63C 0006               1136              CMP.B       #$6,D3
00001C56  6600 F5E2               1137              BNE         S_CMP_7
00001C5A  4EB9 00002816           1138              JSR         SECOND_6
00001C60  4E75                    1139              RTS
00001C62                          1140              
00001C62  B63C 0007               1141              CMP.B       #$7,D3
00001C66  6600 F5E2               1142              BNE         S_CMP_8
00001C6A  4EB9 0000291A           1143              JSR         SECOND_7
00001C70  4E75                    1144              RTS
00001C72                          1145              
00001C72  B63C 0008               1146              CMP.B       #$8,D3
00001C76  6600 F5E2               1147              BNE         S_CMP_9
00001C7A  4EB9 00002A1E           1148              JSR         SECOND_8
00001C80  4E75                    1149              RTS
00001C82                          1150              
00001C82  B63C 0009               1151              CMP.B       #$9,D3
00001C86  6600 F5E2               1152              BNE         S_CMP_A
00001C8A  4EB9 00002B22           1153              JSR         SECOND_9
00001C90  4E75                    1154              RTS
00001C92                          1155              
00001C92  B63C 000A               1156              CMP.B       #$A,D3
00001C96  6600 F5E2               1157              BNE         S_CMP_B
00001C9A  4EB9 00002C26           1158              JSR         SECOND_A
00001CA0  4E75                    1159              RTS
00001CA2                          1160              
00001CA2  B63C 000B               1161              CMP.B       #$B,D3
00001CA6  6600 F5E2               1162              BNE         S_CMP_C
00001CAA  4EB9 00002D2C           1163              JSR         SECOND_B
00001CB0  4E75                    1164              RTS
00001CB2                          1165              
00001CB2  B63C 000C               1166              CMP.B       #$C,D3
00001CB6  6600 F5E2               1167              BNE         S_CMP_D
00001CBA  4EB9 00002E30           1168              JSR         SECOND_C
00001CC0  4E75                    1169              RTS
00001CC2                          1170              
00001CC2  B63C 000D               1171              CMP.B       #$D,D3
00001CC6  6600 F5E2               1172              BNE         S_CMP_E
00001CCA  4EB9 00002F34           1173              JSR         SECOND_D
00001CD0  4E75                    1174              RTS
00001CD2                          1175              
00001CD2  B63C 000E               1176             CMP.B       #$E,D3
00001CD6  6600 F5E2               1177              BNE         S_CMP_F
00001CDA  4EB9 00003038           1178              JSR         SECOND_E                 
00001CE0  4E75                    1179              RTS
00001CE2                          1180              
00001CE2  4EB9 0000313C           1181              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00001CE8  4E75                    1182              RTS
00001CEA                          1183  
00001CEA                          1184  
00001CEA                          1185  
00001CEA                          1186  *------------------------First_B----------------------------
00001CEA                          1187  *Purpose: First_B is a subroutine of IDENTIFY. If First_B is branched to, that means the first
00001CEA                          1188  *         four digits of the machine code are 1011.
00001CEA                          1189  *         Possible instructions are: Illegal    
00001CEA                          1190  *-----------------------------------------------------------
00001CEA  2407                    1191  FIRST_B     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00001CEC  E98A                    1192              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
00001CEE  123C 003C               1193              MOVE.B      #60,D1      *Moves 60 into D1
00001CF2  E2AA                    1194              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
00001CF4  D602                    1195              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00001CF6                          1196              
00001CF6  B63C 0000               1197              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00001CFA  6600 F4DE               1198              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
00001CFE  4EB9 000021FE           1199              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
00001D04  4E75                    1200              RTS
00001D06                          1201              
00001D06  B63C 0001               1202              CMP.B       #$1,D3
00001D0A  6600 F4DE               1203              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00001D0E  4EB9 00002302           1204              JSR         SECOND_1 
00001D14  4E75                    1205              RTS
00001D16                          1206             
00001D16  B63C 0002               1207              CMP.B       #$2,D3
00001D1A  6600 F4DE               1208              BNE         S_CMP_3 
00001D1E  4EB9 00002406           1209              JSR         SECOND_2
00001D24  4E75                    1210              RTS
00001D26                          1211              
00001D26  B63C 0003               1212              CMP.B       #$3,D3
00001D2A  6600 F4DE               1213              BNE         S_CMP_4
00001D2E  4EB9 0000250A           1214              JSR         SECOND_3 
00001D34  4E75                    1215              RTS
00001D36                          1216             
00001D36  B63C 0004               1217              CMP.B       #$4,D3
00001D3A  6600 F4DE               1218              BNE         S_CMP_5
00001D3E  4EB9 0000260E           1219              JSR         SECOND_4
00001D44  4E75                    1220              RTS
00001D46                          1221              
00001D46  B63C 0005               1222              CMP.B       #$5,D3
00001D4A  6600 F4DE               1223              BNE         S_CMP_6
00001D4E  4EB9 00002712           1224              JSR         SECOND_5
00001D54  4E75                    1225              RTS
00001D56                          1226              
00001D56  B63C 0006               1227              CMP.B       #$6,D3
00001D5A  6600 F4DE               1228              BNE         S_CMP_7
00001D5E  4EB9 00002816           1229              JSR         SECOND_6
00001D64  4E75                    1230              RTS
00001D66                          1231              
00001D66  B63C 0007               1232              CMP.B       #$7,D3
00001D6A  6600 F4DE               1233              BNE         S_CMP_8
00001D6E  4EB9 0000291A           1234              JSR         SECOND_7
00001D74  4E75                    1235              RTS
00001D76                          1236              
00001D76  B63C 0008               1237              CMP.B       #$8,D3
00001D7A  6600 F4DE               1238              BNE         S_CMP_9
00001D7E  4EB9 00002A1E           1239              JSR         SECOND_8
00001D84  4E75                    1240              RTS
00001D86                          1241              
00001D86  B63C 0009               1242              CMP.B       #$9,D3
00001D8A  6600 F4DE               1243              BNE         S_CMP_A
00001D8E  4EB9 00002B22           1244              JSR         SECOND_9
00001D94  4E75                    1245              RTS
00001D96                          1246              
00001D96  B63C 000A               1247              CMP.B       #$A,D3
00001D9A  6600 F4DE               1248              BNE         S_CMP_B
00001D9E  4EB9 00002C26           1249              JSR         SECOND_A
00001DA4  4E75                    1250              RTS
00001DA6                          1251              
00001DA6  B63C 000B               1252              CMP.B       #$B,D3
00001DAA  6600 F4DE               1253              BNE         S_CMP_C
00001DAE  4EB9 00002D2C           1254              JSR         SECOND_B
00001DB4  4E75                    1255              RTS
00001DB6                          1256              
00001DB6  B63C 000C               1257              CMP.B       #$C,D3
00001DBA  6600 F4DE               1258              BNE         S_CMP_D
00001DBE  4EB9 00002E30           1259              JSR         SECOND_C
00001DC4  4E75                    1260              RTS
00001DC6                          1261              
00001DC6  B63C 000D               1262              CMP.B       #$D,D3
00001DCA  6600 F4DE               1263              BNE         S_CMP_E
00001DCE  4EB9 00002F34           1264              JSR         SECOND_D
00001DD4  4E75                    1265              RTS
00001DD6                          1266              
00001DD6  B63C 000E               1267             CMP.B       #$E,D3
00001DDA  6600 F4DE               1268              BNE         S_CMP_F
00001DDE  4EB9 00003038           1269              JSR         SECOND_E                 
00001DE4  4E75                    1270              RTS
00001DE6                          1271              
00001DE6  4EB9 0000313C           1272              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00001DEC  4E75                    1273              RTS
00001DEE                          1274  
00001DEE                          1275  
00001DEE                          1276  
00001DEE                          1277  *------------------------First_C----------------------------
00001DEE                          1278  *Purpose: First_C is a subroutine of IDENTIFY. If First_C is branched to, that means the first
00001DEE                          1279  *         four digits of the machine code are 1100.
00001DEE                          1280  *         Possible instructions are: MULS, AND    
00001DEE                          1281  *-----------------------------------------------------------
00001DEE  2407                    1282  FIRST_C     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00001DF0  E98A                    1283              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
00001DF2  123C 003C               1284              MOVE.B      #60,D1      *Moves 60 into D1
00001DF6  E2AA                    1285              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
00001DF8  D602                    1286              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00001DFA                          1287              
00001DFA  B63C 0000               1288              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00001DFE  6600 F3DA               1289              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
00001E02  4EB9 000021FE           1290              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
00001E08  4E75                    1291              RTS
00001E0A                          1292              
00001E0A  B63C 0001               1293              CMP.B       #$1,D3
00001E0E  6600 F3DA               1294              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00001E12  4EB9 00002302           1295              JSR         SECOND_1 
00001E18  4E75                    1296              RTS
00001E1A                          1297             
00001E1A  B63C 0002               1298              CMP.B       #$2,D3
00001E1E  6600 F3DA               1299              BNE         S_CMP_3 
00001E22  4EB9 00002406           1300              JSR         SECOND_2
00001E28  4E75                    1301              RTS
00001E2A                          1302              
00001E2A  B63C 0003               1303              CMP.B       #$3,D3
00001E2E  6600 F3DA               1304              BNE         S_CMP_4
00001E32  4EB9 0000250A           1305              JSR         SECOND_3 
00001E38  4E75                    1306              RTS
00001E3A                          1307             
00001E3A  B63C 0004               1308              CMP.B       #$4,D3
00001E3E  6600 F3DA               1309              BNE         S_CMP_5
00001E42  4EB9 0000260E           1310              JSR         SECOND_4
00001E48  4E75                    1311              RTS
00001E4A                          1312              
00001E4A  B63C 0005               1313              CMP.B       #$5,D3
00001E4E  6600 F3DA               1314              BNE         S_CMP_6
00001E52  4EB9 00002712           1315              JSR         SECOND_5
00001E58  4E75                    1316              RTS
00001E5A                          1317              
00001E5A  B63C 0006               1318              CMP.B       #$6,D3
00001E5E  6600 F3DA               1319              BNE         S_CMP_7
00001E62  4EB9 00002816           1320              JSR         SECOND_6
00001E68  4E75                    1321              RTS
00001E6A                          1322              
00001E6A  B63C 0007               1323              CMP.B       #$7,D3
00001E6E  6600 F3DA               1324              BNE         S_CMP_8
00001E72  4EB9 0000291A           1325              JSR         SECOND_7
00001E78  4E75                    1326              RTS
00001E7A                          1327              
00001E7A  B63C 0008               1328              CMP.B       #$8,D3
00001E7E  6600 F3DA               1329              BNE         S_CMP_9
00001E82  4EB9 00002A1E           1330              JSR         SECOND_8
00001E88  4E75                    1331              RTS
00001E8A                          1332              
00001E8A  B63C 0009               1333              CMP.B       #$9,D3
00001E8E  6600 F3DA               1334              BNE         S_CMP_A
00001E92  4EB9 00002B22           1335              JSR         SECOND_9
00001E98  4E75                    1336              RTS
00001E9A                          1337              
00001E9A  B63C 000A               1338              CMP.B       #$A,D3
00001E9E  6600 F3DA               1339              BNE         S_CMP_B
00001EA2  4EB9 00002C26           1340              JSR         SECOND_A
00001EA8  4E75                    1341              RTS
00001EAA                          1342              
00001EAA  B63C 000B               1343              CMP.B       #$B,D3
00001EAE  6600 F3DA               1344              BNE         S_CMP_C
00001EB2  4EB9 00002D2C           1345              JSR         SECOND_B
00001EB8  4E75                    1346              RTS
00001EBA                          1347              
00001EBA  B63C 000C               1348              CMP.B       #$C,D3
00001EBE  6600 F3DA               1349              BNE         S_CMP_D
00001EC2  4EB9 00002E30           1350              JSR         SECOND_C
00001EC8  4E75                    1351              RTS
00001ECA                          1352              
00001ECA  B63C 000D               1353              CMP.B       #$D,D3
00001ECE  6600 F3DA               1354              BNE         S_CMP_E
00001ED2  4EB9 00002F34           1355              JSR         SECOND_D
00001ED8  4E75                    1356              RTS
00001EDA                          1357              
00001EDA  B63C 000E               1358             CMP.B       #$E,D3
00001EDE  6600 F3DA               1359              BNE         S_CMP_F
00001EE2  4EB9 00003038           1360              JSR         SECOND_E                 
00001EE8  4E75                    1361              RTS
00001EEA                          1362              
00001EEA  4EB9 0000313C           1363              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00001EF0  4E75                    1364              RTS
00001EF2                          1365  
00001EF2                          1366  
00001EF2                          1367  *------------------------First_D----------------------------
00001EF2                          1368  *Purpose: First_D is a subroutine of IDENTIFY. If First_D is branched to, that means the first
00001EF2                          1369  *         four digits of the machine code are 1101.
00001EF2                          1370  *         Possible instructions are: ADD, ADDA    
00001EF2                          1371  *-----------------------------------------------------------
00001EF2  2407                    1372  FIRST_D     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00001EF4  E98A                    1373              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
00001EF6  123C 003C               1374              MOVE.B      #60,D1      *Moves 60 into D1
00001EFA  E2AA                    1375              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
00001EFC  D602                    1376              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00001EFE                          1377              
00001EFE  B63C 0000               1378              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00001F02  6600 F2D6               1379              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
00001F06  4EB9 000021FE           1380              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
00001F0C  4E75                    1381              RTS
00001F0E                          1382              
00001F0E  B63C 0001               1383              CMP.B       #$1,D3
00001F12  6600 F2D6               1384              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00001F16  4EB9 00002302           1385              JSR         SECOND_1 
00001F1C  4E75                    1386              RTS
00001F1E                          1387             
00001F1E  B63C 0002               1388              CMP.B       #$2,D3
00001F22  6600 F2D6               1389              BNE         S_CMP_3 
00001F26  4EB9 00002406           1390              JSR         SECOND_2
00001F2C  4E75                    1391              RTS
00001F2E                          1392              
00001F2E  B63C 0003               1393              CMP.B       #$3,D3
00001F32  6600 F2D6               1394              BNE         S_CMP_4
00001F36  4EB9 0000250A           1395              JSR         SECOND_3 
00001F3C  4E75                    1396              RTS
00001F3E                          1397             
00001F3E  B63C 0004               1398              CMP.B       #$4,D3
00001F42  6600 F2D6               1399              BNE         S_CMP_5
00001F46  4EB9 0000260E           1400              JSR         SECOND_4
00001F4C  4E75                    1401              RTS
00001F4E                          1402              
00001F4E  B63C 0005               1403              CMP.B       #$5,D3
00001F52  6600 F2D6               1404              BNE         S_CMP_6
00001F56  4EB9 00002712           1405              JSR         SECOND_5
00001F5C  4E75                    1406              RTS
00001F5E                          1407              
00001F5E  B63C 0006               1408              CMP.B       #$6,D3
00001F62  6600 F2D6               1409              BNE         S_CMP_7
00001F66  4EB9 00002816           1410              JSR         SECOND_6
00001F6C  4E75                    1411              RTS
00001F6E                          1412              
00001F6E  B63C 0007               1413              CMP.B       #$7,D3
00001F72  6600 F2D6               1414              BNE         S_CMP_8
00001F76  4EB9 0000291A           1415              JSR         SECOND_7
00001F7C  4E75                    1416              RTS
00001F7E                          1417              
00001F7E  B63C 0008               1418              CMP.B       #$8,D3
00001F82  6600 F2D6               1419              BNE         S_CMP_9
00001F86  4EB9 00002A1E           1420              JSR         SECOND_8
00001F8C  4E75                    1421              RTS
00001F8E                          1422              
00001F8E  B63C 0009               1423              CMP.B       #$9,D3
00001F92  6600 F2D6               1424              BNE         S_CMP_A
00001F96  4EB9 00002B22           1425              JSR         SECOND_9
00001F9C  4E75                    1426              RTS
00001F9E                          1427              
00001F9E  B63C 000A               1428              CMP.B       #$A,D3
00001FA2  6600 F2D6               1429              BNE         S_CMP_B
00001FA6  4EB9 00002C26           1430              JSR         SECOND_A
00001FAC  4E75                    1431              RTS
00001FAE                          1432              
00001FAE  B63C 000B               1433              CMP.B       #$B,D3
00001FB2  6600 F2D6               1434              BNE         S_CMP_C
00001FB6  4EB9 00002D2C           1435              JSR         SECOND_B
00001FBC  4E75                    1436              RTS
00001FBE                          1437              
00001FBE  B63C 000C               1438              CMP.B       #$C,D3
00001FC2  6600 F2D6               1439              BNE         S_CMP_D
00001FC6  4EB9 00002E30           1440              JSR         SECOND_C
00001FCC  4E75                    1441              RTS
00001FCE                          1442              
00001FCE  B63C 000D               1443              CMP.B       #$D,D3
00001FD2  6600 F2D6               1444              BNE         S_CMP_E
00001FD6  4EB9 00002F34           1445              JSR         SECOND_D
00001FDC  4E75                    1446              RTS
00001FDE                          1447              
00001FDE  B63C 000E               1448             CMP.B       #$E,D3
00001FE2  6600 F2D6               1449              BNE         S_CMP_F
00001FE6  4EB9 00003038           1450              JSR         SECOND_E                 
00001FEC  4E75                    1451              RTS
00001FEE                          1452              
00001FEE  4EB9 0000313C           1453              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00001FF4  4E75                    1454              RTS
00001FF6                          1455  
00001FF6                          1456  
00001FF6                          1457  *------------------------First_E----------------------------
00001FF6                          1458  *Purpose: First_E is a subroutine of IDENTIFY. If First_E is branched to, that means the first
00001FF6                          1459  *         four digits of the machine code are 1110.
00001FF6                          1460  *         Possible instructions are: LSL/LSR R, LSL/LSR M,
00001FF6                          1461  *                                    ASL/ASR R, ASL/ASR M,
00001FF6                          1462  *                                    ROL/ROR R, ROL/ROR M    
00001FF6                          1463  *-----------------------------------------------------------
00001FF6  2407                    1464  FIRST_E     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00001FF8  E98A                    1465              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
00001FFA  123C 003C               1466              MOVE.B      #60,D1      *Moves 60 into D1
00001FFE  E2AA                    1467              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
00002000  D602                    1468              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002002                          1469              
00002002  B63C 0000               1470              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002006  6600 F1D2               1471              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
0000200A  4EB9 000021FE           1472              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
00002010  4E75                    1473              RTS
00002012                          1474              
00002012  B63C 0001               1475              CMP.B       #$1,D3
00002016  6600 F1D2               1476              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
0000201A  4EB9 00002302           1477              JSR         SECOND_1 
00002020  4E75                    1478              RTS
00002022                          1479             
00002022  B63C 0002               1480              CMP.B       #$2,D3
00002026  6600 F1D2               1481              BNE         S_CMP_3 
0000202A  4EB9 00002406           1482              JSR         SECOND_2
00002030  4E75                    1483              RTS
00002032                          1484              
00002032  B63C 0003               1485              CMP.B       #$3,D3
00002036  6600 F1D2               1486              BNE         S_CMP_4
0000203A  4EB9 0000250A           1487              JSR         SECOND_3 
00002040  4E75                    1488              RTS
00002042                          1489             
00002042  B63C 0004               1490              CMP.B       #$4,D3
00002046  6600 F1D2               1491              BNE         S_CMP_5
0000204A  4EB9 0000260E           1492              JSR         SECOND_4
00002050  4E75                    1493              RTS
00002052                          1494              
00002052  B63C 0005               1495              CMP.B       #$5,D3
00002056  6600 F1D2               1496              BNE         S_CMP_6
0000205A  4EB9 00002712           1497              JSR         SECOND_5
00002060  4E75                    1498              RTS
00002062                          1499              
00002062  B63C 0006               1500              CMP.B       #$6,D3
00002066  6600 F1D2               1501              BNE         S_CMP_7
0000206A  4EB9 00002816           1502              JSR         SECOND_6
00002070  4E75                    1503              RTS
00002072                          1504              
00002072  B63C 0007               1505              CMP.B       #$7,D3
00002076  6600 F1D2               1506              BNE         S_CMP_8
0000207A  4EB9 0000291A           1507              JSR         SECOND_7
00002080  4E75                    1508              RTS
00002082                          1509              
00002082  B63C 0008               1510              CMP.B       #$8,D3
00002086  6600 F1D2               1511              BNE         S_CMP_9
0000208A  4EB9 00002A1E           1512              JSR         SECOND_8
00002090  4E75                    1513              RTS
00002092                          1514              
00002092  B63C 0009               1515              CMP.B       #$9,D3
00002096  6600 F1D2               1516              BNE         S_CMP_A
0000209A  4EB9 00002B22           1517              JSR         SECOND_9
000020A0  4E75                    1518              RTS
000020A2                          1519              
000020A2  B63C 000A               1520              CMP.B       #$A,D3
000020A6  6600 F1D2               1521              BNE         S_CMP_B
000020AA  4EB9 00002C26           1522              JSR         SECOND_A
000020B0  4E75                    1523              RTS
000020B2                          1524              
000020B2  B63C 000B               1525              CMP.B       #$B,D3
000020B6  6600 F1D2               1526              BNE         S_CMP_C
000020BA  4EB9 00002D2C           1527              JSR         SECOND_B
000020C0  4E75                    1528              RTS
000020C2                          1529              
000020C2  B63C 000C               1530              CMP.B       #$C,D3
000020C6  6600 F1D2               1531              BNE         S_CMP_D
000020CA  4EB9 00002E30           1532              JSR         SECOND_C
000020D0  4E75                    1533              RTS
000020D2                          1534              
000020D2  B63C 000D               1535              CMP.B       #$D,D3
000020D6  6600 F1D2               1536              BNE         S_CMP_E
000020DA  4EB9 00002F34           1537              JSR         SECOND_D
000020E0  4E75                    1538              RTS
000020E2                          1539              
000020E2  B63C 000E               1540             CMP.B       #$E,D3
000020E6  6600 F1D2               1541              BNE         S_CMP_F
000020EA  4EB9 00003038           1542              JSR         SECOND_E                 
000020F0  4E75                    1543              RTS
000020F2                          1544              
000020F2  4EB9 0000313C           1545              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000020F8  4E75                    1546              RTS
000020FA                          1547  
000020FA                          1548              
000020FA                          1549  *------------------------First_F----------------------------
000020FA                          1550  *Purpose: First_F is a subroutine of IDENTIFY. If First_F is branched to, that means the first
000020FA                          1551  *         four digits of the machine code are 1111.
000020FA                          1552  *         Possible instructions are: ILLEGAL INSTRUCTIONS  
000020FA                          1553  *-----------------------------------------------------------
000020FA  2407                    1554  FIRST_F     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000020FC  E98A                    1555              LSL.L       #4,D2       *Shifts 4 bits so gets rid of leftmost byte
000020FE  123C 003C               1556              MOVE.B      #60,D1      *Moves 60 into D1
00002102  E2AA                    1557              LSR.L       D1,D2       *Shifts 60 bits so the remaining contents = the left 4 bits of D7
00002104  D602                    1558              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002106                          1559              
00002106  B63C 0000               1560              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000210A  6600 F0CE               1561              BNE         S_CMP_1     *If the first hex value is not 0, branch and see if its 1
0000210E  4EB9 000021FE           1562              JSR         SECOND_0     *If the first hex value is 0, jump to Second_0
00002114  4E75                    1563              RTS
00002116                          1564              
00002116  B63C 0001               1565              CMP.B       #$1,D3
0000211A  6600 F0CE               1566              BNE         S_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
0000211E  4EB9 00002302           1567              JSR         SECOND_1 
00002124  4E75                    1568              RTS
00002126                          1569             
00002126  B63C 0002               1570              CMP.B       #$2,D3
0000212A  6600 F0CE               1571              BNE         S_CMP_3 
0000212E  4EB9 00002406           1572              JSR         SECOND_2
00002134  4E75                    1573              RTS
00002136                          1574              
00002136  B63C 0003               1575              CMP.B       #$3,D3
0000213A  6600 F0CE               1576              BNE         S_CMP_4
0000213E  4EB9 0000250A           1577              JSR         SECOND_3 
00002144  4E75                    1578              RTS
00002146                          1579             
00002146  B63C 0004               1580              CMP.B       #$4,D3
0000214A  6600 F0CE               1581              BNE         S_CMP_5
0000214E  4EB9 0000260E           1582              JSR         SECOND_4
00002154  4E75                    1583              RTS
00002156                          1584              
00002156  B63C 0005               1585              CMP.B       #$5,D3
0000215A  6600 F0CE               1586              BNE         S_CMP_6
0000215E  4EB9 00002712           1587              JSR         SECOND_5
00002164  4E75                    1588              RTS
00002166                          1589              
00002166  B63C 0006               1590              CMP.B       #$6,D3
0000216A  6600 F0CE               1591              BNE         S_CMP_7
0000216E  4EB9 00002816           1592              JSR         SECOND_6
00002174  4E75                    1593              RTS
00002176                          1594              
00002176  B63C 0007               1595              CMP.B       #$7,D3
0000217A  6600 F0CE               1596              BNE         S_CMP_8
0000217E  4EB9 0000291A           1597              JSR         SECOND_7
00002184  4E75                    1598              RTS
00002186                          1599              
00002186  B63C 0008               1600              CMP.B       #$8,D3
0000218A  6600 F0CE               1601              BNE         S_CMP_9
0000218E  4EB9 00002A1E           1602              JSR         SECOND_8
00002194  4E75                    1603              RTS
00002196                          1604              
00002196  B63C 0009               1605              CMP.B       #$9,D3
0000219A  6600 F0CE               1606              BNE         S_CMP_A
0000219E  4EB9 00002B22           1607              JSR         SECOND_9
000021A4  4E75                    1608              RTS
000021A6                          1609              
000021A6  B63C 000A               1610              CMP.B       #$A,D3
000021AA  6600 F0CE               1611              BNE         S_CMP_B
000021AE  4EB9 00002C26           1612              JSR         SECOND_A
000021B4  4E75                    1613              RTS
000021B6                          1614              
000021B6  B63C 000B               1615              CMP.B       #$B,D3
000021BA  6600 F0CE               1616              BNE         S_CMP_C
000021BE  4EB9 00002D2C           1617              JSR         SECOND_B
000021C4  4E75                    1618              RTS
000021C6                          1619              
000021C6  B63C 000C               1620              CMP.B       #$C,D3
000021CA  6600 F0CE               1621              BNE         S_CMP_D
000021CE  4EB9 00002E30           1622              JSR         SECOND_C
000021D4  4E75                    1623              RTS
000021D6                          1624              
000021D6  B63C 000D               1625              CMP.B       #$D,D3
000021DA  6600 F0CE               1626              BNE         S_CMP_E
000021DE  4EB9 00002F34           1627              JSR         SECOND_D
000021E4  4E75                    1628              RTS
000021E6                          1629              
000021E6  B63C 000E               1630              CMP.B       #$E,D3
000021EA  6600 F0CE               1631              BNE         S_CMP_F
000021EE  4EB9 00003038           1632              JSR         SECOND_E                 
000021F4  4E75                    1633              RTS
000021F6                          1634              
000021F6  4EB9 0000313C           1635              JSR         SECOND_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000021FC  4E75                    1636              RTS
000021FE                          1637  
000021FE                          1638  
000021FE                          1639  *------------------------Second_0----------------------------
000021FE                          1640  *Purpose: Second_0 is a subroutine of IDENTIFY. If Second_0 is branched to, that means the second
000021FE                          1641  *         four digits of the machine code are 0000.
000021FE                          1642  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000021FE                          1643  *                                    ADD, ADDA, ADDQ, SUB, 
000021FE                          1644  *                                    DIVU, AND, OR, 
000021FE                          1645  *                                    LSL/LSR R, ASL/ASR R,
000021FE                          1646  *                                    ASL/ASR M,
000021FE                          1647  *                                    ROL/ROR R, Bcc, BRA
000021FE                          1648  *-----------------------------------------------------------            
000021FE  2407                    1649  SECOND_0    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002200  E18A                    1650              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002202  123C 0040               1651              MOVE.B      #64,D1      *Moves 64 into D1
00002206  E2AA                    1652              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002208  D602                    1653              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
0000220A                          1654              
0000220A  B63C 0000               1655  T_CMP_0     CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000220E  6600 000A               1656              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002212  4EB9 00003240           1657              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002218  4E75                    1658              RTS
0000221A                          1659              
0000221A  B63C 0001               1660  T_CMP_1     CMP.B       #$1,D3
0000221E  6600 000A               1661              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002222  4EB9 00003348           1662              JSR         THIRD_1 
00002228  4E75                    1663              RTS
0000222A                          1664             
0000222A  B63C 0002               1665  T_CMP_2     CMP.B       #$2,D3
0000222E  6600 000A               1666              BNE         T_CMP_3 
00002232  4EB9 00003450           1667              JSR         THIRD_2
00002238  4E75                    1668              RTS
0000223A                          1669              
0000223A  B63C 0003               1670  T_CMP_3     CMP.B       #$3,D3
0000223E  6600 000A               1671              BNE         T_CMP_4
00002242  4EB9 00003558           1672              JSR         THIRD_3 
00002248  4E75                    1673              RTS
0000224A                          1674             
0000224A  B63C 0004               1675  T_CMP_4     CMP.B       #$4,D3
0000224E  6600 000A               1676              BNE         T_CMP_5
00002252  4EB9 00003660           1677              JSR         THIRD_4
00002258  4E75                    1678              RTS
0000225A                          1679              
0000225A  B63C 0005               1680  T_CMP_5     CMP.B       #$5,D3
0000225E  6600 000A               1681              BNE         T_CMP_6
00002262  4EB9 00003768           1682              JSR         THIRD_5
00002268  4E75                    1683              RTS
0000226A                          1684              
0000226A  B63C 0006               1685  T_CMP_6     CMP.B       #$6,D3
0000226E  6600 000A               1686              BNE         T_CMP_7
00002272  4EB9 00003870           1687              JSR         THIRD_6
00002278  4E75                    1688              RTS
0000227A                          1689              
0000227A  B63C 0007               1690  T_CMP_7     CMP.B       #$7,D3
0000227E  6600 000A               1691              BNE         T_CMP_8
00002282  4EB9 00003978           1692              JSR         THIRD_7
00002288  4E75                    1693              RTS
0000228A                          1694              
0000228A  B63C 0008               1695  T_CMP_8     CMP.B       #$8,D3
0000228E  6600 000A               1696              BNE         T_CMP_9
00002292  4EB9 00003A80           1697              JSR         THIRD_8
00002298  4E75                    1698              RTS
0000229A                          1699              
0000229A  B63C 0009               1700  T_CMP_9     CMP.B       #$9,D3
0000229E  6600 000A               1701              BNE         T_CMP_A
000022A2  4EB9 00003B88           1702              JSR         THIRD_9
000022A8  4E75                    1703              RTS
000022AA                          1704              
000022AA  B63C 000A               1705  T_CMP_A     CMP.B       #$A,D3
000022AE  6600 000A               1706              BNE         T_CMP_B
000022B2  4EB9 00003C90           1707              JSR         THIRD_A
000022B8  4E75                    1708              RTS
000022BA                          1709              
000022BA  B63C 000B               1710  T_CMP_B     CMP.B       #$B,D3
000022BE  6600 000A               1711              BNE         T_CMP_C
000022C2  4EB9 00003D98           1712              JSR         THIRD_B
000022C8  4E75                    1713              RTS
000022CA                          1714              
000022CA  B63C 000C               1715  T_CMP_C     CMP.B       #$C,D3
000022CE  6600 000A               1716              BNE         T_CMP_D
000022D2  4EB9 00003EA0           1717              JSR         THIRD_C
000022D8  4E75                    1718              RTS
000022DA                          1719              
000022DA  B63C 000D               1720  T_CMP_D     CMP.B       #$D,D3
000022DE  6600 000A               1721              BNE         T_CMP_E
000022E2  4EB9 00003FA8           1722              JSR         THIRD_D
000022E8  4E75                    1723              RTS
000022EA                          1724              
000022EA  B63C 000E               1725  T_CMP_E     CMP.B       #$E,D3
000022EE  6600 000A               1726              BNE         T_CMP_F
000022F2  4EB9 000040B0           1727              JSR         THIRD_E                 
000022F8  4E75                    1728              RTS
000022FA                          1729              
000022FA  4EB9 000041B8           1730  T_CMP_F     JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002300  4E75                    1731              RTS
00002302                          1732  
00002302                          1733  
00002302                          1734  
00002302                          1735  *------------------------Second_1----------------------------
00002302                          1736  *Purpose: Second_1 is a subroutine of IDENTIFY. If Second_1 is branched to, that means the second
00002302                          1737  *         four digits of the machine code are 0001.
00002302                          1738  *         Possible instructions are: MOVE, MULS, LEA, ADD,
00002302                          1739  *                                    ADDA, SUB, AND, OR, Bcc
00002302                          1740  *                                    LSL/LSR R,
00002302                          1741  *                                    ASL/ASR R, ASL/ASR M,
00002302                          1742  *                                    ROL/ROR R    
00002302                          1743  *-----------------------------------------------------------            
00002302  2407                    1744  SECOND_1    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002304  E18A                    1745              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002306  123C 0040               1746              MOVE.B      #64,D1      *Moves 64 into D1
0000230A  E2AA                    1747              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
0000230C  D602                    1748              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
0000230E                          1749              
0000230E  B63C 0000               1750              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002312  6600 FF06               1751              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002316  4EB9 00003240           1752              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
0000231C  4E75                    1753              RTS
0000231E                          1754              
0000231E  B63C 0001               1755              CMP.B       #$1,D3
00002322  6600 FF06               1756              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002326  4EB9 00003348           1757              JSR         THIRD_1 
0000232C  4E75                    1758              RTS
0000232E                          1759             
0000232E  B63C 0002               1760              CMP.B       #$2,D3
00002332  6600 FF06               1761              BNE         T_CMP_3 
00002336  4EB9 00003450           1762              JSR         THIRD_2
0000233C  4E75                    1763              RTS
0000233E                          1764              
0000233E  B63C 0003               1765              CMP.B       #$3,D3
00002342  6600 FF06               1766              BNE         T_CMP_4
00002346  4EB9 00003558           1767              JSR         THIRD_3 
0000234C  4E75                    1768              RTS
0000234E                          1769             
0000234E  B63C 0004               1770              CMP.B       #$4,D3
00002352  6600 FF06               1771              BNE         T_CMP_5
00002356  4EB9 00003660           1772              JSR         THIRD_4
0000235C  4E75                    1773              RTS
0000235E                          1774              
0000235E  B63C 0005               1775              CMP.B       #$5,D3
00002362  6600 FF06               1776              BNE         T_CMP_6
00002366  4EB9 00003768           1777              JSR         THIRD_5
0000236C  4E75                    1778              RTS
0000236E                          1779              
0000236E  B63C 0006               1780              CMP.B       #$6,D3
00002372  6600 FF06               1781              BNE         T_CMP_7
00002376  4EB9 00003870           1782              JSR         THIRD_6
0000237C  4E75                    1783              RTS
0000237E                          1784              
0000237E  B63C 0007               1785              CMP.B       #$7,D3
00002382  6600 FF06               1786              BNE         T_CMP_8
00002386  4EB9 00003978           1787              JSR         THIRD_7
0000238C  4E75                    1788              RTS
0000238E                          1789              
0000238E  B63C 0008               1790              CMP.B       #$8,D3
00002392  6600 FF06               1791              BNE         T_CMP_9
00002396  4EB9 00003A80           1792              JSR         THIRD_8
0000239C  4E75                    1793              RTS
0000239E                          1794              
0000239E  B63C 0009               1795              CMP.B       #$9,D3
000023A2  6600 FF06               1796              BNE         T_CMP_A
000023A6  4EB9 00003B88           1797              JSR         THIRD_9
000023AC  4E75                    1798              RTS
000023AE                          1799              
000023AE  B63C 000A               1800              CMP.B       #$A,D3
000023B2  6600 FF06               1801              BNE         T_CMP_B
000023B6  4EB9 00003C90           1802              JSR         THIRD_A
000023BC  4E75                    1803              RTS
000023BE                          1804              
000023BE  B63C 000B               1805              CMP.B       #$B,D3
000023C2  6600 FF06               1806              BNE         T_CMP_C
000023C6  4EB9 00003D98           1807              JSR         THIRD_B
000023CC  4E75                    1808              RTS
000023CE                          1809              
000023CE  B63C 000C               1810              CMP.B       #$C,D3
000023D2  6600 FF06               1811              BNE         T_CMP_D
000023D6  4EB9 00003EA0           1812              JSR         THIRD_C
000023DC  4E75                    1813              RTS
000023DE                          1814              
000023DE  B63C 000D               1815              CMP.B       #$D,D3
000023E2  6600 FF06               1816              BNE         T_CMP_E
000023E6  4EB9 00003FA8           1817              JSR         THIRD_D
000023EC  4E75                    1818              RTS
000023EE                          1819              
000023EE  B63C 000E               1820              CMP.B       #$E,D3
000023F2  6600 FF06               1821              BNE         T_CMP_F
000023F6  4EB9 000040B0           1822              JSR         THIRD_E                 
000023FC  4E75                    1823              RTS
000023FE                          1824              
000023FE  4EB9 000041B8           1825              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002404  4E75                    1826              RTS
00002406                          1827  
00002406                          1828              
00002406                          1829  *------------------------Second_2----------------------------
00002406                          1830  *Purpose: Second_2 is a subroutine of IDENTIFY. If Second_2 is branched to, that means the second
00002406                          1831  *         four digits of the machine code are 0010.
00002406                          1832  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
00002406                          1833  *                                    ADD, ADDA, ADDQ, SUB, 
00002406                          1834  *                                    DIVU, AND, OR, 
00002406                          1835  *                                    LSL/LSR R, LSL/LSR M,
00002406                          1836  *                                    ASL/ASR R,
00002406                          1837  *                                    ROL/ROR R, Bcc, BRA  
00002406                          1838  *-----------------------------------------------------------  
00002406  2407                    1839  SECOND_2    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002408  E18A                    1840              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
0000240A  123C 0040               1841              MOVE.B      #64,D1      *Moves 64 into D1
0000240E  E2AA                    1842              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002410  D602                    1843              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002412                          1844              
00002412  B63C 0000               1845              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002416  6600 FE02               1846              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
0000241A  4EB9 00003240           1847              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002420  4E75                    1848              RTS
00002422                          1849              
00002422  B63C 0001               1850              CMP.B       #$1,D3
00002426  6600 FE02               1851              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
0000242A  4EB9 00003348           1852              JSR         THIRD_1 
00002430  4E75                    1853              RTS
00002432                          1854             
00002432  B63C 0002               1855              CMP.B       #$2,D3
00002436  6600 FE02               1856              BNE         T_CMP_3 
0000243A  4EB9 00003450           1857              JSR         THIRD_2
00002440  4E75                    1858              RTS
00002442                          1859              
00002442  B63C 0003               1860              CMP.B       #$3,D3
00002446  6600 FE02               1861              BNE         T_CMP_4
0000244A  4EB9 00003558           1862              JSR         THIRD_3 
00002450  4E75                    1863              RTS
00002452                          1864             
00002452  B63C 0004               1865              CMP.B       #$4,D3
00002456  6600 FE02               1866              BNE         T_CMP_5
0000245A  4EB9 00003660           1867              JSR         THIRD_4
00002460  4E75                    1868              RTS
00002462                          1869              
00002462  B63C 0005               1870              CMP.B       #$5,D3
00002466  6600 FE02               1871              BNE         T_CMP_6
0000246A  4EB9 00003768           1872              JSR         THIRD_5
00002470  4E75                    1873              RTS
00002472                          1874              
00002472  B63C 0006               1875              CMP.B       #$6,D3
00002476  6600 FE02               1876              BNE         T_CMP_7
0000247A  4EB9 00003870           1877              JSR         THIRD_6
00002480  4E75                    1878              RTS
00002482                          1879              
00002482  B63C 0007               1880              CMP.B       #$7,D3
00002486  6600 FE02               1881              BNE         T_CMP_8
0000248A  4EB9 00003978           1882              JSR         THIRD_7
00002490  4E75                    1883              RTS
00002492                          1884              
00002492  B63C 0008               1885              CMP.B       #$8,D3
00002496  6600 FE02               1886              BNE         T_CMP_9
0000249A  4EB9 00003A80           1887              JSR         THIRD_8
000024A0  4E75                    1888              RTS
000024A2                          1889              
000024A2  B63C 0009               1890              CMP.B       #$9,D3
000024A6  6600 FE02               1891              BNE         T_CMP_A
000024AA  4EB9 00003B88           1892              JSR         THIRD_9
000024B0  4E75                    1893              RTS
000024B2                          1894              
000024B2  B63C 000A               1895              CMP.B       #$A,D3
000024B6  6600 FE02               1896              BNE         T_CMP_B
000024BA  4EB9 00003C90           1897              JSR         THIRD_A
000024C0  4E75                    1898              RTS
000024C2                          1899              
000024C2  B63C 000B               1900              CMP.B       #$B,D3
000024C6  6600 FE02               1901              BNE         T_CMP_C
000024CA  4EB9 00003D98           1902              JSR         THIRD_B
000024D0  4E75                    1903              RTS
000024D2                          1904              
000024D2  B63C 000C               1905              CMP.B       #$C,D3
000024D6  6600 FE02               1906              BNE         T_CMP_D
000024DA  4EB9 00003EA0           1907              JSR         THIRD_C
000024E0  4E75                    1908              RTS
000024E2                          1909              
000024E2  B63C 000D               1910              CMP.B       #$D,D3
000024E6  6600 FE02               1911              BNE         T_CMP_E
000024EA  4EB9 00003FA8           1912              JSR         THIRD_D
000024F0  4E75                    1913              RTS
000024F2                          1914              
000024F2  B63C 000E               1915              CMP.B       #$E,D3
000024F6  6600 FE02               1916              BNE         T_CMP_F
000024FA  4EB9 000040B0           1917              JSR         THIRD_E                 
00002500  4E75                    1918              RTS
00002502                          1919              
00002502  4EB9 000041B8           1920              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002508  4E75                    1921              RTS
0000250A                          1922  
0000250A                          1923  
0000250A                          1924  
0000250A                          1925  *------------------------Second_3----------------------------
0000250A                          1926  *Purpose: Second_3 is a subroutine of IDENTIFY. If Second_3 is branched to, that means the second
0000250A                          1927  *         four digits of the machine code are 0011.
0000250A                          1928  *         Possible instructions are: MOVE, ADD, ADDA,
0000250A                          1929  *                                    SUB, MULS, LEA, AND,
0000250A                          1930  *                                    OR, LSL/LSR R,
0000250A                          1931  *                                    LSL/LSR M, ASL/ASR R,
0000250A                          1932  *                                    ROL/ROR R, Bcc
0000250A                          1933  *-----------------------------------------------------------  
0000250A  2407                    1934  SECOND_3    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
0000250C  E18A                    1935              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
0000250E  123C 0040               1936              MOVE.B      #64,D1      *Moves 64 into D1
00002512  E2AA                    1937              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002514  D602                    1938              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002516                          1939              
00002516  B63C 0000               1940              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000251A  6600 FCFE               1941              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
0000251E  4EB9 00003240           1942              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002524  4E75                    1943              RTS
00002526                          1944              
00002526  B63C 0001               1945              CMP.B       #$1,D3
0000252A  6600 FCFE               1946              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
0000252E  4EB9 00003348           1947              JSR         THIRD_1 
00002534  4E75                    1948              RTS
00002536                          1949             
00002536  B63C 0002               1950              CMP.B       #$2,D3
0000253A  6600 FCFE               1951              BNE         T_CMP_3 
0000253E  4EB9 00003450           1952              JSR         THIRD_2
00002544  4E75                    1953              RTS
00002546                          1954              
00002546  B63C 0003               1955              CMP.B       #$3,D3
0000254A  6600 FCFE               1956              BNE         T_CMP_4
0000254E  4EB9 00003558           1957              JSR         THIRD_3 
00002554  4E75                    1958              RTS
00002556                          1959             
00002556  B63C 0004               1960              CMP.B       #$4,D3
0000255A  6600 FCFE               1961              BNE         T_CMP_5
0000255E  4EB9 00003660           1962              JSR         THIRD_4
00002564  4E75                    1963              RTS
00002566                          1964              
00002566  B63C 0005               1965              CMP.B       #$5,D3
0000256A  6600 FCFE               1966              BNE         T_CMP_6
0000256E  4EB9 00003768           1967              JSR         THIRD_5
00002574  4E75                    1968              RTS
00002576                          1969              
00002576  B63C 0006               1970              CMP.B       #$6,D3
0000257A  6600 FCFE               1971              BNE         T_CMP_7
0000257E  4EB9 00003870           1972              JSR         THIRD_6
00002584  4E75                    1973              RTS
00002586                          1974              
00002586  B63C 0007               1975              CMP.B       #$7,D3
0000258A  6600 FCFE               1976              BNE         T_CMP_8
0000258E  4EB9 00003978           1977              JSR         THIRD_7
00002594  4E75                    1978              RTS
00002596                          1979              
00002596  B63C 0008               1980              CMP.B       #$8,D3
0000259A  6600 FCFE               1981              BNE         T_CMP_9
0000259E  4EB9 00003A80           1982              JSR         THIRD_8
000025A4  4E75                    1983              RTS
000025A6                          1984              
000025A6  B63C 0009               1985              CMP.B       #$9,D3
000025AA  6600 FCFE               1986              BNE         T_CMP_A
000025AE  4EB9 00003B88           1987              JSR         THIRD_9
000025B4  4E75                    1988              RTS
000025B6                          1989              
000025B6  B63C 000A               1990              CMP.B       #$A,D3
000025BA  6600 FCFE               1991              BNE         T_CMP_B
000025BE  4EB9 00003C90           1992              JSR         THIRD_A
000025C4  4E75                    1993              RTS
000025C6                          1994              
000025C6  B63C 000B               1995              CMP.B       #$B,D3
000025CA  6600 FCFE               1996              BNE         T_CMP_C
000025CE  4EB9 00003D98           1997              JSR         THIRD_B
000025D4  4E75                    1998              RTS
000025D6                          1999              
000025D6  B63C 000C               2000              CMP.B       #$C,D3
000025DA  6600 FCFE               2001              BNE         T_CMP_D
000025DE  4EB9 00003EA0           2002              JSR         THIRD_C
000025E4  4E75                    2003              RTS
000025E6                          2004              
000025E6  B63C 000D               2005              CMP.B       #$D,D3
000025EA  6600 FCFE               2006              BNE         T_CMP_E
000025EE  4EB9 00003FA8           2007              JSR         THIRD_D
000025F4  4E75                    2008              RTS
000025F6                          2009              
000025F6  B63C 000E               2010              CMP.B       #$E,D3
000025FA  6600 FCFE               2011              BNE         T_CMP_F
000025FE  4EB9 000040B0           2012              JSR         THIRD_E                 
00002604  4E75                    2013              RTS
00002606                          2014              
00002606  4EB9 000041B8           2015              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
0000260C  4E75                    2016              RTS
0000260E                          2017  
0000260E                          2018  
0000260E                          2019  *------------------------Second_4----------------------------
0000260E                          2020  *Purpose: Second_4 is a subroutine of IDENTIFY. If Second_4 is branched to, that means the second
0000260E                          2021  *         four digits of the machine code are 0100.
0000260E                          2022  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
0000260E                          2023  *                                    ADD, ADDA, ADDQ, SUB,
0000260E                          2024  *                                    SUBI, DIVU, AND, OR,
0000260E                          2025  *                                    LSL/LSR R, ASL/ASR R
0000260E                          2026  *                                    ROL/ROR R, Bcc
0000260E                          2027  *-----------------------------------------------------------  
0000260E  2407                    2028  SECOND_4    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002610  E18A                    2029              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002612  123C 0040               2030              MOVE.B      #64,D1      *Moves 64 into D1
00002616  E2AA                    2031              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002618  D602                    2032              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
0000261A                          2033              
0000261A  B63C 0000               2034              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000261E  6600 FBFA               2035              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002622  4EB9 00003240           2036              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002628  4E75                    2037              RTS
0000262A                          2038              
0000262A  B63C 0001               2039              CMP.B       #$1,D3
0000262E  6600 FBFA               2040              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002632  4EB9 00003348           2041              JSR         THIRD_1 
00002638  4E75                    2042              RTS
0000263A                          2043             
0000263A  B63C 0002               2044              CMP.B       #$2,D3
0000263E  6600 FBFA               2045              BNE         T_CMP_3 
00002642  4EB9 00003450           2046              JSR         THIRD_2
00002648  4E75                    2047              RTS
0000264A                          2048              
0000264A  B63C 0003               2049              CMP.B       #$3,D3
0000264E  6600 FBFA               2050              BNE         T_CMP_4
00002652  4EB9 00003558           2051              JSR         THIRD_3 
00002658  4E75                    2052              RTS
0000265A                          2053             
0000265A  B63C 0004               2054              CMP.B       #$4,D3
0000265E  6600 FBFA               2055              BNE         T_CMP_5
00002662  4EB9 00003660           2056              JSR         THIRD_4
00002668  4E75                    2057              RTS
0000266A                          2058              
0000266A  B63C 0005               2059              CMP.B       #$5,D3
0000266E  6600 FBFA               2060              BNE         T_CMP_6
00002672  4EB9 00003768           2061              JSR         THIRD_5
00002678  4E75                    2062              RTS
0000267A                          2063              
0000267A  B63C 0006               2064              CMP.B       #$6,D3
0000267E  6600 FBFA               2065              BNE         T_CMP_7
00002682  4EB9 00003870           2066              JSR         THIRD_6
00002688  4E75                    2067              RTS
0000268A                          2068              
0000268A  B63C 0007               2069              CMP.B       #$7,D3
0000268E  6600 FBFA               2070              BNE         T_CMP_8
00002692  4EB9 00003978           2071              JSR         THIRD_7
00002698  4E75                    2072              RTS
0000269A                          2073              
0000269A  B63C 0008               2074              CMP.B       #$8,D3
0000269E  6600 FBFA               2075              BNE         T_CMP_9
000026A2  4EB9 00003A80           2076              JSR         THIRD_8
000026A8  4E75                    2077              RTS
000026AA                          2078              
000026AA  B63C 0009               2079              CMP.B       #$9,D3
000026AE  6600 FBFA               2080              BNE         T_CMP_A
000026B2  4EB9 00003B88           2081              JSR         THIRD_9
000026B8  4E75                    2082              RTS
000026BA                          2083              
000026BA  B63C 000A               2084              CMP.B       #$A,D3
000026BE  6600 FBFA               2085              BNE         T_CMP_B
000026C2  4EB9 00003C90           2086              JSR         THIRD_A
000026C8  4E75                    2087              RTS
000026CA                          2088              
000026CA  B63C 000B               2089              CMP.B       #$B,D3
000026CE  6600 FBFA               2090              BNE         T_CMP_C
000026D2  4EB9 00003D98           2091              JSR         THIRD_B
000026D8  4E75                    2092              RTS
000026DA                          2093              
000026DA  B63C 000C               2094              CMP.B       #$C,D3
000026DE  6600 FBFA               2095              BNE         T_CMP_D
000026E2  4EB9 00003EA0           2096              JSR         THIRD_C
000026E8  4E75                    2097              RTS
000026EA                          2098              
000026EA  B63C 000D               2099              CMP.B       #$D,D3
000026EE  6600 FBFA               2100              BNE         T_CMP_E
000026F2  4EB9 00003FA8           2101              JSR         THIRD_D
000026F8  4E75                    2102              RTS
000026FA                          2103              
000026FA  B63C 000E               2104              CMP.B       #$E,D3
000026FE  6600 FBFA               2105              BNE         T_CMP_F
00002702  4EB9 000040B0           2106              JSR         THIRD_E                 
00002708  4E75                    2107              RTS
0000270A                          2108              
0000270A  4EB9 000041B8           2109              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002710  4E75                    2110              RTS
00002712                          2111  
00002712                          2112  
00002712                          2113  
00002712                          2114  *------------------------Second_5----------------------------
00002712                          2115  *Purpose: Second_5 is a subroutine of IDENTIFY. If Second_5 is branched to, that means the second
00002712                          2116  *         four digits of the machine code are 0101.
00002712                          2117  *         Possible instructions are: MOVE, ADD, ADDA, SUB,
00002712                          2118  *                                    MULS, LEA, AND, OR,
00002712                          2119  *                                    LSL/LSR R, ASL/ASR R,
00002712                          2120  *                                    ROL/ROR R, Bcc
00002712                          2121  *-----------------------------------------------------------  
00002712  2407                    2122  SECOND_5    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002714  E18A                    2123              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002716  123C 0040               2124              MOVE.B      #64,D1      *Moves 64 into D1
0000271A  E2AA                    2125              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
0000271C  D602                    2126              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
0000271E                          2127              
0000271E  B63C 0000               2128              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002722  6600 FAF6               2129              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002726  4EB9 00003240           2130              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
0000272C  4E75                    2131              RTS
0000272E                          2132              
0000272E  B63C 0001               2133              CMP.B       #$1,D3
00002732  6600 FAF6               2134              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002736  4EB9 00003348           2135              JSR         THIRD_1 
0000273C  4E75                    2136              RTS
0000273E                          2137             
0000273E  B63C 0002               2138              CMP.B       #$2,D3
00002742  6600 FAF6               2139              BNE         T_CMP_3 
00002746  4EB9 00003450           2140              JSR         THIRD_2
0000274C  4E75                    2141              RTS
0000274E                          2142              
0000274E  B63C 0003               2143              CMP.B       #$3,D3
00002752  6600 FAF6               2144              BNE         T_CMP_4
00002756  4EB9 00003558           2145              JSR         THIRD_3 
0000275C  4E75                    2146              RTS
0000275E                          2147             
0000275E  B63C 0004               2148              CMP.B       #$4,D3
00002762  6600 FAF6               2149              BNE         T_CMP_5
00002766  4EB9 00003660           2150              JSR         THIRD_4
0000276C  4E75                    2151              RTS
0000276E                          2152              
0000276E  B63C 0005               2153              CMP.B       #$5,D3
00002772  6600 FAF6               2154              BNE         T_CMP_6
00002776  4EB9 00003768           2155              JSR         THIRD_5
0000277C  4E75                    2156              RTS
0000277E                          2157              
0000277E  B63C 0006               2158              CMP.B       #$6,D3
00002782  6600 FAF6               2159              BNE         T_CMP_7
00002786  4EB9 00003870           2160              JSR         THIRD_6
0000278C  4E75                    2161              RTS
0000278E                          2162              
0000278E  B63C 0007               2163              CMP.B       #$7,D3
00002792  6600 FAF6               2164              BNE         T_CMP_8
00002796  4EB9 00003978           2165              JSR         THIRD_7
0000279C  4E75                    2166              RTS
0000279E                          2167              
0000279E  B63C 0008               2168              CMP.B       #$8,D3
000027A2  6600 FAF6               2169              BNE         T_CMP_9
000027A6  4EB9 00003A80           2170              JSR         THIRD_8
000027AC  4E75                    2171              RTS
000027AE                          2172              
000027AE  B63C 0009               2173              CMP.B       #$9,D3
000027B2  6600 FAF6               2174              BNE         T_CMP_A
000027B6  4EB9 00003B88           2175              JSR         THIRD_9
000027BC  4E75                    2176              RTS
000027BE                          2177              
000027BE  B63C 000A               2178              CMP.B       #$A,D3
000027C2  6600 FAF6               2179              BNE         T_CMP_B
000027C6  4EB9 00003C90           2180              JSR         THIRD_A
000027CC  4E75                    2181              RTS
000027CE                          2182              
000027CE  B63C 000B               2183              CMP.B       #$B,D3
000027D2  6600 FAF6               2184              BNE         T_CMP_C
000027D6  4EB9 00003D98           2185              JSR         THIRD_B
000027DC  4E75                    2186              RTS
000027DE                          2187              
000027DE  B63C 000C               2188              CMP.B       #$C,D3
000027E2  6600 FAF6               2189              BNE         T_CMP_D
000027E6  4EB9 00003EA0           2190              JSR         THIRD_C
000027EC  4E75                    2191              RTS
000027EE                          2192              
000027EE  B63C 000D               2193              CMP.B       #$D,D3
000027F2  6600 FAF6               2194              BNE         T_CMP_E
000027F6  4EB9 00003FA8           2195              JSR         THIRD_D
000027FC  4E75                    2196              RTS
000027FE                          2197              
000027FE  B63C 000E               2198              CMP.B       #$E,D3
00002802  6600 FAF6               2199              BNE         T_CMP_F
00002806  4EB9 000040B0           2200              JSR         THIRD_E                 
0000280C  4E75                    2201              RTS
0000280E                          2202              
0000280E  4EB9 000041B8           2203              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002814  4E75                    2204              RTS
00002816                          2205  
00002816                          2206  
00002816                          2207  *------------------------Second_6----------------------------
00002816                          2208  *Purpose: Second_6 is a subroutine of IDENTIFY. If Second_6 is branched to, that means the second
00002816                          2209  *         four digits of the machine code are 0110.
00002816                          2210  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
00002816                          2211  *                                    ADD, ADDA, ADDI, ADDQ,
00002816                          2212  *                                    SUB, DIVU, AND, OR,
00002816                          2213  *                                    LSL/LSR R, LSL/LSR M,
00002816                          2214  *                                    ASL/ASR R, ROL/ROR R,
00002816                          2215  *                                    ROL/ROR M, Bcc
00002816                          2216  *-----------------------------------------------------------  
00002816  2407                    2217  SECOND_6    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002818  E18A                    2218              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
0000281A  123C 0040               2219              MOVE.B      #64,D1      *Moves 64 into D1
0000281E  E2AA                    2220              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002820  D602                    2221              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002822                          2222              
00002822  B63C 0000               2223              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002826  6600 F9F2               2224              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
0000282A  4EB9 00003240           2225              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002830  4E75                    2226              RTS
00002832                          2227              
00002832  B63C 0001               2228              CMP.B       #$1,D3
00002836  6600 F9F2               2229              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
0000283A  4EB9 00003348           2230              JSR         THIRD_1 
00002840  4E75                    2231              RTS
00002842                          2232             
00002842  B63C 0002               2233              CMP.B       #$2,D3
00002846  6600 F9F2               2234              BNE         T_CMP_3 
0000284A  4EB9 00003450           2235              JSR         THIRD_2
00002850  4E75                    2236              RTS
00002852                          2237              
00002852  B63C 0003               2238              CMP.B       #$3,D3
00002856  6600 F9F2               2239              BNE         T_CMP_4
0000285A  4EB9 00003558           2240              JSR         THIRD_3 
00002860  4E75                    2241              RTS
00002862                          2242             
00002862  B63C 0004               2243              CMP.B       #$4,D3
00002866  6600 F9F2               2244              BNE         T_CMP_5
0000286A  4EB9 00003660           2245              JSR         THIRD_4
00002870  4E75                    2246              RTS
00002872                          2247              
00002872  B63C 0005               2248              CMP.B       #$5,D3
00002876  6600 F9F2               2249              BNE         T_CMP_6
0000287A  4EB9 00003768           2250              JSR         THIRD_5
00002880  4E75                    2251              RTS
00002882                          2252              
00002882  B63C 0006               2253              CMP.B       #$6,D3
00002886  6600 F9F2               2254              BNE         T_CMP_7
0000288A  4EB9 00003870           2255              JSR         THIRD_6
00002890  4E75                    2256              RTS
00002892                          2257              
00002892  B63C 0007               2258              CMP.B       #$7,D3
00002896  6600 F9F2               2259              BNE         T_CMP_8
0000289A  4EB9 00003978           2260              JSR         THIRD_7
000028A0  4E75                    2261              RTS
000028A2                          2262              
000028A2  B63C 0008               2263              CMP.B       #$8,D3
000028A6  6600 F9F2               2264              BNE         T_CMP_9
000028AA  4EB9 00003A80           2265              JSR         THIRD_8
000028B0  4E75                    2266              RTS
000028B2                          2267              
000028B2  B63C 0009               2268              CMP.B       #$9,D3
000028B6  6600 F9F2               2269              BNE         T_CMP_A
000028BA  4EB9 00003B88           2270              JSR         THIRD_9
000028C0  4E75                    2271              RTS
000028C2                          2272              
000028C2  B63C 000A               2273              CMP.B       #$A,D3
000028C6  6600 F9F2               2274              BNE         T_CMP_B
000028CA  4EB9 00003C90           2275              JSR         THIRD_A
000028D0  4E75                    2276              RTS
000028D2                          2277              
000028D2  B63C 000B               2278              CMP.B       #$B,D3
000028D6  6600 F9F2               2279              BNE         T_CMP_C
000028DA  4EB9 00003D98           2280              JSR         THIRD_B
000028E0  4E75                    2281              RTS
000028E2                          2282              
000028E2  B63C 000C               2283              CMP.B       #$C,D3
000028E6  6600 F9F2               2284              BNE         T_CMP_D
000028EA  4EB9 00003EA0           2285              JSR         THIRD_C
000028F0  4E75                    2286              RTS
000028F2                          2287              
000028F2  B63C 000D               2288              CMP.B       #$D,D3
000028F6  6600 F9F2               2289              BNE         T_CMP_E
000028FA  4EB9 00003FA8           2290              JSR         THIRD_D
00002900  4E75                    2291              RTS
00002902                          2292              
00002902  B63C 000E               2293              CMP.B       #$E,D3
00002906  6600 F9F2               2294              BNE         T_CMP_F
0000290A  4EB9 000040B0           2295              JSR         THIRD_E                 
00002910  4E75                    2296              RTS
00002912                          2297              
00002912  4EB9 000041B8           2298              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002918  4E75                    2299              RTS
0000291A                          2300  
0000291A                          2301  
0000291A                          2302  
0000291A                          2303  *------------------------Second_7----------------------------
0000291A                          2304  *Purpose: Second_7 is a subroutine of IDENTIFY. If Second_7 is branched to, that means the second
0000291A                          2305  *         four digits of the machine code are 0111.
0000291A                          2306  *         Possible instructions are: MOVE, ADD, ADDA, SUB,
0000291A                          2307  *                                    MULS, LEA, AND, OR,
0000291A                          2308  *                                    LSL/LSR R, ASL/ASR R,
0000291A                          2309  *                                    ROL/ROR R, ROL/ROR M,
0000291A                          2310  *                                    Bcc
0000291A                          2311  *-----------------------------------------------------------  
0000291A  2407                    2312  SECOND_7    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
0000291C  E18A                    2313              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
0000291E  123C 0040               2314              MOVE.B      #64,D1      *Moves 64 into D1
00002922  E2AA                    2315              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002924  D602                    2316              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002926                          2317              
00002926  B63C 0000               2318              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000292A  6600 F8EE               2319              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
0000292E  4EB9 00003240           2320              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002934  4E75                    2321              RTS
00002936                          2322              
00002936  B63C 0001               2323              CMP.B       #$1,D3
0000293A  6600 F8EE               2324              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
0000293E  4EB9 00003348           2325              JSR         THIRD_1 
00002944  4E75                    2326              RTS
00002946                          2327             
00002946  B63C 0002               2328              CMP.B       #$2,D3
0000294A  6600 F8EE               2329              BNE         T_CMP_3 
0000294E  4EB9 00003450           2330              JSR         THIRD_2
00002954  4E75                    2331              RTS
00002956                          2332              
00002956  B63C 0003               2333              CMP.B       #$3,D3
0000295A  6600 F8EE               2334              BNE         T_CMP_4
0000295E  4EB9 00003558           2335              JSR         THIRD_3 
00002964  4E75                    2336              RTS
00002966                          2337             
00002966  B63C 0004               2338              CMP.B       #$4,D3
0000296A  6600 F8EE               2339              BNE         T_CMP_5
0000296E  4EB9 00003660           2340              JSR         THIRD_4
00002974  4E75                    2341              RTS
00002976                          2342              
00002976  B63C 0005               2343              CMP.B       #$5,D3
0000297A  6600 F8EE               2344              BNE         T_CMP_6
0000297E  4EB9 00003768           2345              JSR         THIRD_5
00002984  4E75                    2346              RTS
00002986                          2347              
00002986  B63C 0006               2348              CMP.B       #$6,D3
0000298A  6600 F8EE               2349              BNE         T_CMP_7
0000298E  4EB9 00003870           2350              JSR         THIRD_6
00002994  4E75                    2351              RTS
00002996                          2352              
00002996  B63C 0007               2353              CMP.B       #$7,D3
0000299A  6600 F8EE               2354              BNE         T_CMP_8
0000299E  4EB9 00003978           2355              JSR         THIRD_7
000029A4  4E75                    2356              RTS
000029A6                          2357              
000029A6  B63C 0008               2358              CMP.B       #$8,D3
000029AA  6600 F8EE               2359              BNE         T_CMP_9
000029AE  4EB9 00003A80           2360              JSR         THIRD_8
000029B4  4E75                    2361              RTS
000029B6                          2362              
000029B6  B63C 0009               2363              CMP.B       #$9,D3
000029BA  6600 F8EE               2364              BNE         T_CMP_A
000029BE  4EB9 00003B88           2365              JSR         THIRD_9
000029C4  4E75                    2366              RTS
000029C6                          2367              
000029C6  B63C 000A               2368              CMP.B       #$A,D3
000029CA  6600 F8EE               2369              BNE         T_CMP_B
000029CE  4EB9 00003C90           2370              JSR         THIRD_A
000029D4  4E75                    2371              RTS
000029D6                          2372              
000029D6  B63C 000B               2373              CMP.B       #$B,D3
000029DA  6600 F8EE               2374              BNE         T_CMP_C
000029DE  4EB9 00003D98           2375              JSR         THIRD_B
000029E4  4E75                    2376              RTS
000029E6                          2377              
000029E6  B63C 000C               2378              CMP.B       #$C,D3
000029EA  6600 F8EE               2379              BNE         T_CMP_D
000029EE  4EB9 00003EA0           2380              JSR         THIRD_C
000029F4  4E75                    2381              RTS
000029F6                          2382              
000029F6  B63C 000D               2383              CMP.B       #$D,D3
000029FA  6600 F8EE               2384              BNE         T_CMP_E
000029FE  4EB9 00003FA8           2385              JSR         THIRD_D
00002A04  4E75                    2386              RTS
00002A06                          2387              
00002A06  B63C 000E               2388              CMP.B       #$E,D3
00002A0A  6600 F8EE               2389              BNE         T_CMP_F
00002A0E  4EB9 000040B0           2390              JSR         THIRD_E                 
00002A14  4E75                    2391              RTS
00002A16                          2392              
00002A16  4EB9 000041B8           2393              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002A1C  4E75                    2394              RTS
00002A1E                          2395  
00002A1E                          2396  
00002A1E                          2397  *------------------------Second_8----------------------------
00002A1E                          2398  *Purpose: Second_4 is a subroutine of IDENTIFY. If Second_4 is branched to, that means the second
00002A1E                          2399  *         four digits of the machine code are 1000.
00002A1E                          2400  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
00002A1E                          2401  *                                    MOVEM, ADD, ADDA, ADDQ,
00002A1E                          2402  *                                    SUB, DIVU, AND, OR,
00002A1E                          2403  *                                    LSL/LSR R, ASL/ASR R,
00002A1E                          2404  *                                    ROL/ROR R, Bcc
00002A1E                          2405  *-----------------------------------------------------------  
00002A1E  2407                    2406  SECOND_8    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002A20  E18A                    2407              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002A22  123C 0040               2408              MOVE.B      #64,D1      *Moves 64 into D1
00002A26  E2AA                    2409              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002A28  D602                    2410              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002A2A                          2411              
00002A2A  B63C 0000               2412              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002A2E  6600 F7EA               2413              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002A32  4EB9 00003240           2414              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002A38  4E75                    2415              RTS
00002A3A                          2416              
00002A3A  B63C 0001               2417              CMP.B       #$1,D3
00002A3E  6600 F7EA               2418              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002A42  4EB9 00003348           2419              JSR         THIRD_1 
00002A48  4E75                    2420              RTS
00002A4A                          2421             
00002A4A  B63C 0002               2422              CMP.B       #$2,D3
00002A4E  6600 F7EA               2423              BNE         T_CMP_3 
00002A52  4EB9 00003450           2424              JSR         THIRD_2
00002A58  4E75                    2425              RTS
00002A5A                          2426              
00002A5A  B63C 0003               2427              CMP.B       #$3,D3
00002A5E  6600 F7EA               2428              BNE         T_CMP_4
00002A62  4EB9 00003558           2429              JSR         THIRD_3 
00002A68  4E75                    2430              RTS
00002A6A                          2431             
00002A6A  B63C 0004               2432              CMP.B       #$4,D3
00002A6E  6600 F7EA               2433              BNE         T_CMP_5
00002A72  4EB9 00003660           2434              JSR         THIRD_4
00002A78  4E75                    2435              RTS
00002A7A                          2436              
00002A7A  B63C 0005               2437              CMP.B       #$5,D3
00002A7E  6600 F7EA               2438              BNE         T_CMP_6
00002A82  4EB9 00003768           2439              JSR         THIRD_5
00002A88  4E75                    2440              RTS
00002A8A                          2441              
00002A8A  B63C 0006               2442              CMP.B       #$6,D3
00002A8E  6600 F7EA               2443              BNE         T_CMP_7
00002A92  4EB9 00003870           2444              JSR         THIRD_6
00002A98  4E75                    2445              RTS
00002A9A                          2446              
00002A9A  B63C 0007               2447              CMP.B       #$7,D3
00002A9E  6600 F7EA               2448              BNE         T_CMP_8
00002AA2  4EB9 00003978           2449              JSR         THIRD_7
00002AA8  4E75                    2450              RTS
00002AAA                          2451              
00002AAA  B63C 0008               2452              CMP.B       #$8,D3
00002AAE  6600 F7EA               2453              BNE         T_CMP_9
00002AB2  4EB9 00003A80           2454              JSR         THIRD_8
00002AB8  4E75                    2455              RTS
00002ABA                          2456              
00002ABA  B63C 0009               2457              CMP.B       #$9,D3
00002ABE  6600 F7EA               2458              BNE         T_CMP_A
00002AC2  4EB9 00003B88           2459              JSR         THIRD_9
00002AC8  4E75                    2460              RTS
00002ACA                          2461              
00002ACA  B63C 000A               2462              CMP.B       #$A,D3
00002ACE  6600 F7EA               2463              BNE         T_CMP_B
00002AD2  4EB9 00003C90           2464              JSR         THIRD_A
00002AD8  4E75                    2465              RTS
00002ADA                          2466              
00002ADA  B63C 000B               2467              CMP.B       #$B,D3
00002ADE  6600 F7EA               2468              BNE         T_CMP_C
00002AE2  4EB9 00003D98           2469              JSR         THIRD_B
00002AE8  4E75                    2470              RTS
00002AEA                          2471              
00002AEA  B63C 000C               2472              CMP.B       #$C,D3
00002AEE  6600 F7EA               2473              BNE         T_CMP_D
00002AF2  4EB9 00003EA0           2474              JSR         THIRD_C
00002AF8  4E75                    2475              RTS
00002AFA                          2476              
00002AFA  B63C 000D               2477              CMP.B       #$D,D3
00002AFE  6600 F7EA               2478              BNE         T_CMP_E
00002B02  4EB9 00003FA8           2479              JSR         THIRD_D
00002B08  4E75                    2480              RTS
00002B0A                          2481              
00002B0A  B63C 000E               2482              CMP.B       #$E,D3
00002B0E  6600 F7EA               2483              BNE         T_CMP_F
00002B12  4EB9 000040B0           2484              JSR         THIRD_E                 
00002B18  4E75                    2485              RTS
00002B1A                          2486              
00002B1A  4EB9 000041B8           2487              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002B20  4E75                    2488              RTS
00002B22                          2489  
00002B22                          2490  
00002B22                          2491  *------------------------Second_9----------------------------
00002B22                          2492  *Purpose: Second_9 is a subroutine of IDENTIFY. If Second_9 is branched to, that means the second
00002B22                          2493  *         four digits of the machine code are 1001.
00002B22                          2494  *         Possible instructions are: MOVE, ADD, ADDA, SUB,
00002B22                          2495  *                                    MULS, LEA, AND, OR,
00002B22                          2496  *                                    LSL/LSR R, ASL/ASR R,
00002B22                          2497  *                                    ROL/ROR R, Bcc 
00002B22                          2498  *-----------------------------------------------------------  
00002B22  2407                    2499  SECOND_9    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002B24  E18A                    2500              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002B26  123C 0040               2501              MOVE.B      #64,D1      *Moves 64 into D1
00002B2A  E2AA                    2502              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002B2C  D602                    2503              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002B2E                          2504              
00002B2E  B63C 0000               2505              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002B32  6600 F6E6               2506              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002B36  4EB9 00003240           2507              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002B3C  4E75                    2508              RTS
00002B3E                          2509              
00002B3E  B63C 0001               2510              CMP.B       #$1,D3
00002B42  6600 F6E6               2511              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002B46  4EB9 00003348           2512              JSR         THIRD_1 
00002B4C  4E75                    2513              RTS
00002B4E                          2514             
00002B4E  B63C 0002               2515              CMP.B       #$2,D3
00002B52  6600 F6E6               2516              BNE         T_CMP_3 
00002B56  4EB9 00003450           2517              JSR         THIRD_2
00002B5C  4E75                    2518              RTS
00002B5E                          2519              
00002B5E  B63C 0003               2520              CMP.B       #$3,D3
00002B62  6600 F6E6               2521              BNE         T_CMP_4
00002B66  4EB9 00003558           2522              JSR         THIRD_3 
00002B6C  4E75                    2523              RTS
00002B6E                          2524             
00002B6E  B63C 0004               2525              CMP.B       #$4,D3
00002B72  6600 F6E6               2526              BNE         T_CMP_5
00002B76  4EB9 00003660           2527              JSR         THIRD_4
00002B7C  4E75                    2528              RTS
00002B7E                          2529              
00002B7E  B63C 0005               2530              CMP.B       #$5,D3
00002B82  6600 F6E6               2531              BNE         T_CMP_6
00002B86  4EB9 00003768           2532              JSR         THIRD_5
00002B8C  4E75                    2533              RTS
00002B8E                          2534              
00002B8E  B63C 0006               2535              CMP.B       #$6,D3
00002B92  6600 F6E6               2536              BNE         T_CMP_7
00002B96  4EB9 00003870           2537              JSR         THIRD_6
00002B9C  4E75                    2538              RTS
00002B9E                          2539              
00002B9E  B63C 0007               2540              CMP.B       #$7,D3
00002BA2  6600 F6E6               2541              BNE         T_CMP_8
00002BA6  4EB9 00003978           2542              JSR         THIRD_7
00002BAC  4E75                    2543              RTS
00002BAE                          2544              
00002BAE  B63C 0008               2545              CMP.B       #$8,D3
00002BB2  6600 F6E6               2546              BNE         T_CMP_9
00002BB6  4EB9 00003A80           2547              JSR         THIRD_8
00002BBC  4E75                    2548              RTS
00002BBE                          2549              
00002BBE  B63C 0009               2550              CMP.B       #$9,D3
00002BC2  6600 F6E6               2551              BNE         T_CMP_A
00002BC6  4EB9 00003B88           2552              JSR         THIRD_9
00002BCC  4E75                    2553              RTS
00002BCE                          2554              
00002BCE  B63C 000A               2555              CMP.B       #$A,D3
00002BD2  6600 F6E6               2556              BNE         T_CMP_B
00002BD6  4EB9 00003C90           2557              JSR         THIRD_A
00002BDC  4E75                    2558              RTS
00002BDE                          2559              
00002BDE  B63C 000B               2560              CMP.B       #$B,D3
00002BE2  6600 F6E6               2561              BNE         T_CMP_C
00002BE6  4EB9 00003D98           2562              JSR         THIRD_B
00002BEC  4E75                    2563              RTS
00002BEE                          2564              
00002BEE  B63C 000C               2565              CMP.B       #$C,D3
00002BF2  6600 F6E6               2566              BNE         T_CMP_D
00002BF6  4EB9 00003EA0           2567              JSR         THIRD_C
00002BFC  4E75                    2568              RTS
00002BFE                          2569              
00002BFE  B63C 000D               2570              CMP.B       #$D,D3
00002C02  6600 F6E6               2571              BNE         T_CMP_E
00002C06  4EB9 00003FA8           2572              JSR         THIRD_D
00002C0C  4E75                    2573              RTS
00002C0E                          2574              
00002C0E  B63C 000E               2575              CMP.B       #$E,D3
00002C12  6600 F6E6               2576              BNE         T_CMP_F
00002C16  4EB9 000040B0           2577              JSR         THIRD_E                 
00002C1C  4E75                    2578              RTS
00002C1E                          2579              
00002C1E  4EB9 000041B8           2580              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002C24  4E75                    2581              RTS
00002C26                          2582  
00002C26                          2583  
00002C26                          2584  *------------------------Second_A----------------------------
00002C26                          2585  *Purpose: Second_A is a subroutine of IDENTIFY. If Second_A is branched to, that means the second
00002C26                          2586  *         four digits of the machine code are 1010.
00002C26                          2587  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
00002C26                          2588  *                                    ADD, ADDA, ADDQ, SUB,
00002C26                          2589  *                                    DIVU, AND, OR,
00002C26                          2590  *                                    LSL/LSR R, ASL/ASR R,
00002C26                          2591  *                                    ROL/ROR R, Bcc
00002C26                          2592  *-----------------------------------------------------------  
00002C26  2407                    2593  SECOND_A    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002C28  2407                    2594              MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002C2A  E18A                    2595              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002C2C  123C 0040               2596              MOVE.B      #64,D1      *Moves 64 into D1
00002C30  E2AA                    2597              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002C32  D602                    2598              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002C34                          2599              
00002C34  B63C 0000               2600              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002C38  6600 F5E0               2601              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002C3C  4EB9 00003240           2602              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002C42  4E75                    2603              RTS
00002C44                          2604              
00002C44  B63C 0001               2605              CMP.B       #$1,D3
00002C48  6600 F5E0               2606              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002C4C  4EB9 00003348           2607              JSR         THIRD_1 
00002C52  4E75                    2608              RTS
00002C54                          2609             
00002C54  B63C 0002               2610              CMP.B       #$2,D3
00002C58  6600 F5E0               2611              BNE         T_CMP_3 
00002C5C  4EB9 00003450           2612              JSR         THIRD_2
00002C62  4E75                    2613              RTS
00002C64                          2614              
00002C64  B63C 0003               2615              CMP.B       #$3,D3
00002C68  6600 F5E0               2616              BNE         T_CMP_4
00002C6C  4EB9 00003558           2617              JSR         THIRD_3 
00002C72  4E75                    2618              RTS
00002C74                          2619             
00002C74  B63C 0004               2620              CMP.B       #$4,D3
00002C78  6600 F5E0               2621              BNE         T_CMP_5
00002C7C  4EB9 00003660           2622              JSR         THIRD_4
00002C82  4E75                    2623              RTS
00002C84                          2624              
00002C84  B63C 0005               2625              CMP.B       #$5,D3
00002C88  6600 F5E0               2626              BNE         T_CMP_6
00002C8C  4EB9 00003768           2627              JSR         THIRD_5
00002C92  4E75                    2628              RTS
00002C94                          2629              
00002C94  B63C 0006               2630              CMP.B       #$6,D3
00002C98  6600 F5E0               2631              BNE         T_CMP_7
00002C9C  4EB9 00003870           2632              JSR         THIRD_6
00002CA2  4E75                    2633              RTS
00002CA4                          2634              
00002CA4  B63C 0007               2635              CMP.B       #$7,D3
00002CA8  6600 F5E0               2636              BNE         T_CMP_8
00002CAC  4EB9 00003978           2637              JSR         THIRD_7
00002CB2  4E75                    2638              RTS
00002CB4                          2639              
00002CB4  B63C 0008               2640              CMP.B       #$8,D3
00002CB8  6600 F5E0               2641              BNE         T_CMP_9
00002CBC  4EB9 00003A80           2642              JSR         THIRD_8
00002CC2  4E75                    2643              RTS
00002CC4                          2644              
00002CC4  B63C 0009               2645              CMP.B       #$9,D3
00002CC8  6600 F5E0               2646              BNE         T_CMP_A
00002CCC  4EB9 00003B88           2647              JSR         THIRD_9
00002CD2  4E75                    2648              RTS
00002CD4                          2649              
00002CD4  B63C 000A               2650              CMP.B       #$A,D3
00002CD8  6600 F5E0               2651              BNE         T_CMP_B
00002CDC  4EB9 00003C90           2652              JSR         THIRD_A
00002CE2  4E75                    2653              RTS
00002CE4                          2654              
00002CE4  B63C 000B               2655              CMP.B       #$B,D3
00002CE8  6600 F5E0               2656              BNE         T_CMP_C
00002CEC  4EB9 00003D98           2657              JSR         THIRD_B
00002CF2  4E75                    2658              RTS
00002CF4                          2659              
00002CF4  B63C 000C               2660              CMP.B       #$C,D3
00002CF8  6600 F5E0               2661              BNE         T_CMP_D
00002CFC  4EB9 00003EA0           2662              JSR         THIRD_C
00002D02  4E75                    2663              RTS
00002D04                          2664              
00002D04  B63C 000D               2665              CMP.B       #$D,D3
00002D08  6600 F5E0               2666              BNE         T_CMP_E
00002D0C  4EB9 00003FA8           2667              JSR         THIRD_D
00002D12  4E75                    2668              RTS
00002D14                          2669              
00002D14  B63C 000E               2670              CMP.B       #$E,D3
00002D18  6600 F5E0               2671              BNE         T_CMP_F
00002D1C  4EB9 000040B0           2672              JSR         THIRD_E                 
00002D22  4E75                    2673              RTS
00002D24                          2674              
00002D24  4EB9 000041B8           2675              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002D2A  4E75                    2676              RTS
00002D2C                          2677  
00002D2C                          2678  
00002D2C                          2679  *------------------------Second_B----------------------------
00002D2C                          2680  *Purpose: Second_B is a subroutine of IDENTIFY. If Second_B is branched to, that means the second
00002D2C                          2681  *         four digits of the machine code are 1011.
00002D2C                          2682  *         Possible instructions are: MOVE, ADD, ADDA, SUB,
00002D2C                          2683  *                                    MULS, LEA, AND, OR,
00002D2C                          2684  *                                    LSL/LSR R, ASL/ASR R,
00002D2C                          2685  *                                    ROL/ROR R, Bcc
00002D2C                          2686  *-----------------------------------------------------------  
00002D2C  2407                    2687  SECOND_B    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002D2E  E18A                    2688              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002D30  123C 0040               2689              MOVE.B      #64,D1      *Moves 64 into D1
00002D34  E2AA                    2690              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002D36  D602                    2691              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002D38                          2692              
00002D38  B63C 0000               2693              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002D3C  6600 F4DC               2694              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002D40  4EB9 00003240           2695              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002D46  4E75                    2696              RTS
00002D48                          2697              
00002D48  B63C 0001               2698              CMP.B       #$1,D3
00002D4C  6600 F4DC               2699              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002D50  4EB9 00003348           2700              JSR         THIRD_1 
00002D56  4E75                    2701              RTS
00002D58                          2702             
00002D58  B63C 0002               2703              CMP.B       #$2,D3
00002D5C  6600 F4DC               2704              BNE         T_CMP_3 
00002D60  4EB9 00003450           2705              JSR         THIRD_2
00002D66  4E75                    2706              RTS
00002D68                          2707              
00002D68  B63C 0003               2708              CMP.B       #$3,D3
00002D6C  6600 F4DC               2709              BNE         T_CMP_4
00002D70  4EB9 00003558           2710              JSR         THIRD_3 
00002D76  4E75                    2711              RTS
00002D78                          2712             
00002D78  B63C 0004               2713              CMP.B       #$4,D3
00002D7C  6600 F4DC               2714              BNE         T_CMP_5
00002D80  4EB9 00003660           2715              JSR         THIRD_4
00002D86  4E75                    2716              RTS
00002D88                          2717              
00002D88  B63C 0005               2718              CMP.B       #$5,D3
00002D8C  6600 F4DC               2719              BNE         T_CMP_6
00002D90  4EB9 00003768           2720              JSR         THIRD_5
00002D96  4E75                    2721              RTS
00002D98                          2722              
00002D98  B63C 0006               2723              CMP.B       #$6,D3
00002D9C  6600 F4DC               2724              BNE         T_CMP_7
00002DA0  4EB9 00003870           2725              JSR         THIRD_6
00002DA6  4E75                    2726              RTS
00002DA8                          2727              
00002DA8  B63C 0007               2728              CMP.B       #$7,D3
00002DAC  6600 F4DC               2729              BNE         T_CMP_8
00002DB0  4EB9 00003978           2730              JSR         THIRD_7
00002DB6  4E75                    2731              RTS
00002DB8                          2732              
00002DB8  B63C 0008               2733              CMP.B       #$8,D3
00002DBC  6600 F4DC               2734              BNE         T_CMP_9
00002DC0  4EB9 00003A80           2735              JSR         THIRD_8
00002DC6  4E75                    2736              RTS
00002DC8                          2737              
00002DC8  B63C 0009               2738              CMP.B       #$9,D3
00002DCC  6600 F4DC               2739              BNE         T_CMP_A
00002DD0  4EB9 00003B88           2740              JSR         THIRD_9
00002DD6  4E75                    2741              RTS
00002DD8                          2742              
00002DD8  B63C 000A               2743              CMP.B       #$A,D3
00002DDC  6600 F4DC               2744              BNE         T_CMP_B
00002DE0  4EB9 00003C90           2745              JSR         THIRD_A
00002DE6  4E75                    2746              RTS
00002DE8                          2747              
00002DE8  B63C 000B               2748              CMP.B       #$B,D3
00002DEC  6600 F4DC               2749              BNE         T_CMP_C
00002DF0  4EB9 00003D98           2750              JSR         THIRD_B
00002DF6  4E75                    2751              RTS
00002DF8                          2752              
00002DF8  B63C 000C               2753              CMP.B       #$C,D3
00002DFC  6600 F4DC               2754              BNE         T_CMP_D
00002E00  4EB9 00003EA0           2755              JSR         THIRD_C
00002E06  4E75                    2756              RTS
00002E08                          2757              
00002E08  B63C 000D               2758              CMP.B       #$D,D3
00002E0C  6600 F4DC               2759              BNE         T_CMP_E
00002E10  4EB9 00003FA8           2760              JSR         THIRD_D
00002E16  4E75                    2761              RTS
00002E18                          2762              
00002E18  B63C 000E               2763              CMP.B       #$E,D3
00002E1C  6600 F4DC               2764              BNE         T_CMP_F
00002E20  4EB9 000040B0           2765              JSR         THIRD_E                 
00002E26  4E75                    2766              RTS
00002E28                          2767              
00002E28  4EB9 000041B8           2768              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002E2E  4E75                    2769              RTS
00002E30                          2770  
00002E30                          2771  
00002E30                          2772  *------------------------Second_C----------------------------
00002E30                          2773  *Purpose: Second_C is a subroutine of IDENTIFY. If Second_C is branched to, that means the second
00002E30                          2774  *         four digits of the machine code are 1100.
00002E30                          2775  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
00002E30                          2776  *                                    MOVEM, ADD, ADDA, ADDQ,
00002E30                          2777  *                                    SUB, DIVU, AND, OR,
00002E30                          2778  *                                    LSL/LSR R, ASL/ASR R,
00002E30                          2779  *                                    ROL/ROR R, Bcc  
00002E30                          2780  *-----------------------------------------------------------  
00002E30  2407                    2781  SECOND_C    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002E32  E18A                    2782              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002E34  123C 0040               2783              MOVE.B      #64,D1      *Moves 64 into D1
00002E38  E2AA                    2784              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002E3A  D602                    2785              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002E3C                          2786              
00002E3C  B63C 0000               2787              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002E40  6600 F3D8               2788              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002E44  4EB9 00003240           2789              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002E4A  4E75                    2790              RTS
00002E4C                          2791              
00002E4C  B63C 0001               2792              CMP.B       #$1,D3
00002E50  6600 F3D8               2793              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002E54  4EB9 00003348           2794              JSR         THIRD_1 
00002E5A  4E75                    2795              RTS
00002E5C                          2796             
00002E5C  B63C 0002               2797              CMP.B       #$2,D3
00002E60  6600 F3D8               2798              BNE         T_CMP_3 
00002E64  4EB9 00003450           2799              JSR         THIRD_2
00002E6A  4E75                    2800              RTS
00002E6C                          2801              
00002E6C  B63C 0003               2802              CMP.B       #$3,D3
00002E70  6600 F3D8               2803              BNE         T_CMP_4
00002E74  4EB9 00003558           2804              JSR         THIRD_3 
00002E7A  4E75                    2805              RTS
00002E7C                          2806             
00002E7C  B63C 0004               2807              CMP.B       #$4,D3
00002E80  6600 F3D8               2808              BNE         T_CMP_5
00002E84  4EB9 00003660           2809              JSR         THIRD_4
00002E8A  4E75                    2810              RTS
00002E8C                          2811              
00002E8C  B63C 0005               2812              CMP.B       #$5,D3
00002E90  6600 F3D8               2813              BNE         T_CMP_6
00002E94  4EB9 00003768           2814              JSR         THIRD_5
00002E9A  4E75                    2815              RTS
00002E9C                          2816              
00002E9C  B63C 0006               2817              CMP.B       #$6,D3
00002EA0  6600 F3D8               2818              BNE         T_CMP_7
00002EA4  4EB9 00003870           2819              JSR         THIRD_6
00002EAA  4E75                    2820              RTS
00002EAC                          2821              
00002EAC  B63C 0007               2822              CMP.B       #$7,D3
00002EB0  6600 F3D8               2823              BNE         T_CMP_8
00002EB4  4EB9 00003978           2824              JSR         THIRD_7
00002EBA  4E75                    2825              RTS
00002EBC                          2826              
00002EBC  B63C 0008               2827              CMP.B       #$8,D3
00002EC0  6600 F3D8               2828              BNE         T_CMP_9
00002EC4  4EB9 00003A80           2829              JSR         THIRD_8
00002ECA  4E75                    2830              RTS
00002ECC                          2831              
00002ECC  B63C 0009               2832              CMP.B       #$9,D3
00002ED0  6600 F3D8               2833              BNE         T_CMP_A
00002ED4  4EB9 00003B88           2834              JSR         THIRD_9
00002EDA  4E75                    2835              RTS
00002EDC                          2836              
00002EDC  B63C 000A               2837              CMP.B       #$A,D3
00002EE0  6600 F3D8               2838              BNE         T_CMP_B
00002EE4  4EB9 00003C90           2839              JSR         THIRD_A
00002EEA  4E75                    2840              RTS
00002EEC                          2841              
00002EEC  B63C 000B               2842              CMP.B       #$B,D3
00002EF0  6600 F3D8               2843              BNE         T_CMP_C
00002EF4  4EB9 00003D98           2844              JSR         THIRD_B
00002EFA  4E75                    2845              RTS
00002EFC                          2846              
00002EFC  B63C 000C               2847              CMP.B       #$C,D3
00002F00  6600 F3D8               2848              BNE         T_CMP_D
00002F04  4EB9 00003EA0           2849              JSR         THIRD_C
00002F0A  4E75                    2850              RTS
00002F0C                          2851              
00002F0C  B63C 000D               2852              CMP.B       #$D,D3
00002F10  6600 F3D8               2853              BNE         T_CMP_E
00002F14  4EB9 00003FA8           2854              JSR         THIRD_D
00002F1A  4E75                    2855              RTS
00002F1C                          2856              
00002F1C  B63C 000E               2857              CMP.B       #$E,D3
00002F20  6600 F3D8               2858              BNE         T_CMP_F
00002F24  4EB9 000040B0           2859              JSR         THIRD_E                 
00002F2A  4E75                    2860              RTS
00002F2C                          2861              
00002F2C  4EB9 000041B8           2862              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00002F32  4E75                    2863              RTS
00002F34                          2864  
00002F34                          2865  
00002F34                          2866  
00002F34                          2867  *------------------------Second_D----------------------------
00002F34                          2868  *Purpose: Second_D is a subroutine of IDENTIFY. If Second_D is branched to, that means the second
00002F34                          2869  *         four digits of the machine code are 1101.
00002F34                          2870  *         Possible instructions are: MOVE, ADD, ADDA, SUB,
00002F34                          2871  *                                    MULS, LEA, AND, OR,
00002F34                          2872  *                                    LSL/LSR R, ASL/ASR R,
00002F34                          2873  *                                    ROL/ROR R, Bcc
00002F34                          2874  *-----------------------------------------------------------  
00002F34  2407                    2875  SECOND_D    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00002F36  E18A                    2876              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00002F38  123C 0040               2877              MOVE.B      #64,D1      *Moves 64 into D1
00002F3C  E2AA                    2878              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00002F3E  D602                    2879              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00002F40                          2880              
00002F40  B63C 0000               2881              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00002F44  6600 F2D4               2882              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00002F48  4EB9 00003240           2883              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00002F4E  4E75                    2884              RTS
00002F50                          2885              
00002F50  B63C 0001               2886              CMP.B       #$1,D3
00002F54  6600 F2D4               2887              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00002F58  4EB9 00003348           2888              JSR         THIRD_1 
00002F5E  4E75                    2889              RTS
00002F60                          2890             
00002F60  B63C 0002               2891              CMP.B       #$2,D3
00002F64  6600 F2D4               2892              BNE         T_CMP_3 
00002F68  4EB9 00003450           2893              JSR         THIRD_2
00002F6E  4E75                    2894              RTS
00002F70                          2895              
00002F70  B63C 0003               2896              CMP.B       #$3,D3
00002F74  6600 F2D4               2897              BNE         T_CMP_4
00002F78  4EB9 00003558           2898              JSR         THIRD_3 
00002F7E  4E75                    2899              RTS
00002F80                          2900             
00002F80  B63C 0004               2901              CMP.B       #$4,D3
00002F84  6600 F2D4               2902              BNE         T_CMP_5
00002F88  4EB9 00003660           2903              JSR         THIRD_4
00002F8E  4E75                    2904              RTS
00002F90                          2905              
00002F90  B63C 0005               2906              CMP.B       #$5,D3
00002F94  6600 F2D4               2907              BNE         T_CMP_6
00002F98  4EB9 00003768           2908              JSR         THIRD_5
00002F9E  4E75                    2909              RTS
00002FA0                          2910              
00002FA0  B63C 0006               2911              CMP.B       #$6,D3
00002FA4  6600 F2D4               2912              BNE         T_CMP_7
00002FA8  4EB9 00003870           2913              JSR         THIRD_6
00002FAE  4E75                    2914              RTS
00002FB0                          2915              
00002FB0  B63C 0007               2916              CMP.B       #$7,D3
00002FB4  6600 F2D4               2917              BNE         T_CMP_8
00002FB8  4EB9 00003978           2918              JSR         THIRD_7
00002FBE  4E75                    2919              RTS
00002FC0                          2920              
00002FC0  B63C 0008               2921              CMP.B       #$8,D3
00002FC4  6600 F2D4               2922              BNE         T_CMP_9
00002FC8  4EB9 00003A80           2923              JSR         THIRD_8
00002FCE  4E75                    2924              RTS
00002FD0                          2925              
00002FD0  B63C 0009               2926              CMP.B       #$9,D3
00002FD4  6600 F2D4               2927              BNE         T_CMP_A
00002FD8  4EB9 00003B88           2928              JSR         THIRD_9
00002FDE  4E75                    2929              RTS
00002FE0                          2930              
00002FE0  B63C 000A               2931              CMP.B       #$A,D3
00002FE4  6600 F2D4               2932              BNE         T_CMP_B
00002FE8  4EB9 00003C90           2933              JSR         THIRD_A
00002FEE  4E75                    2934              RTS
00002FF0                          2935              
00002FF0  B63C 000B               2936              CMP.B       #$B,D3
00002FF4  6600 F2D4               2937              BNE         T_CMP_C
00002FF8  4EB9 00003D98           2938              JSR         THIRD_B
00002FFE  4E75                    2939              RTS
00003000                          2940              
00003000  B63C 000C               2941              CMP.B       #$C,D3
00003004  6600 F2D4               2942              BNE         T_CMP_D
00003008  4EB9 00003EA0           2943              JSR         THIRD_C
0000300E  4E75                    2944              RTS
00003010                          2945              
00003010  B63C 000D               2946              CMP.B       #$D,D3
00003014  6600 F2D4               2947              BNE         T_CMP_E
00003018  4EB9 00003FA8           2948              JSR         THIRD_D
0000301E  4E75                    2949              RTS
00003020                          2950              
00003020  B63C 000E               2951              CMP.B       #$E,D3
00003024  6600 F2D4               2952              BNE         T_CMP_F
00003028  4EB9 000040B0           2953              JSR         THIRD_E                 
0000302E  4E75                    2954              RTS
00003030                          2955              
00003030  4EB9 000041B8           2956              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003036  4E75                    2957              RTS
00003038                          2958  
00003038                          2959  
00003038                          2960  *------------------------Second_E----------------------------
00003038                          2961  *Purpose: Second_E is a subroutine of IDENTIFY. If Second_E is branched to, that means the second
00003038                          2962  *         four digits of the machine code are 1110.
00003038                          2963  *         Possible instructions are: NOP, MOVE, MOVEA, 
00003038                          2964  *                                    MOVEQ, ADD, ADDA, ADDQ,
00003038                          2965  *                                    SUB, DIVU, AND, OR,
00003038                          2966  *                                    LSL/LSR R, ASL/ASR R,
00003038                          2967  *                                    ROL/ROR R, Bcc,
00003038                          2968  *                                    JSR, RTS
00003038                          2969  *-----------------------------------------------------------  
00003038  2407                    2970  SECOND_E    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
0000303A  E18A                    2971              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
0000303C  123C 0040               2972              MOVE.B      #64,D1      *Moves 64 into D1
00003040  E2AA                    2973              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00003042  D602                    2974              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003044                          2975              
00003044  B63C 0000               2976              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003048  6600 F1D0               2977              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
0000304C  4EB9 00003240           2978              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00003052  4E75                    2979              RTS
00003054                          2980              
00003054  B63C 0001               2981              CMP.B       #$1,D3
00003058  6600 F1D0               2982              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
0000305C  4EB9 00003348           2983              JSR         THIRD_1 
00003062  4E75                    2984              RTS
00003064                          2985             
00003064  B63C 0002               2986              CMP.B       #$2,D3
00003068  6600 F1D0               2987              BNE         T_CMP_3 
0000306C  4EB9 00003450           2988              JSR         THIRD_2
00003072  4E75                    2989              RTS
00003074                          2990              
00003074  B63C 0003               2991              CMP.B       #$3,D3
00003078  6600 F1D0               2992              BNE         T_CMP_4
0000307C  4EB9 00003558           2993              JSR         THIRD_3 
00003082  4E75                    2994              RTS
00003084                          2995             
00003084  B63C 0004               2996              CMP.B       #$4,D3
00003088  6600 F1D0               2997              BNE         T_CMP_5
0000308C  4EB9 00003660           2998              JSR         THIRD_4
00003092  4E75                    2999              RTS
00003094                          3000              
00003094  B63C 0005               3001              CMP.B       #$5,D3
00003098  6600 F1D0               3002              BNE         T_CMP_6
0000309C  4EB9 00003768           3003              JSR         THIRD_5
000030A2  4E75                    3004              RTS
000030A4                          3005              
000030A4  B63C 0006               3006              CMP.B       #$6,D3
000030A8  6600 F1D0               3007              BNE         T_CMP_7
000030AC  4EB9 00003870           3008              JSR         THIRD_6
000030B2  4E75                    3009              RTS
000030B4                          3010              
000030B4  B63C 0007               3011              CMP.B       #$7,D3
000030B8  6600 F1D0               3012              BNE         T_CMP_8
000030BC  4EB9 00003978           3013              JSR         THIRD_7
000030C2  4E75                    3014              RTS
000030C4                          3015              
000030C4  B63C 0008               3016              CMP.B       #$8,D3
000030C8  6600 F1D0               3017              BNE         T_CMP_9
000030CC  4EB9 00003A80           3018              JSR         THIRD_8
000030D2  4E75                    3019              RTS
000030D4                          3020              
000030D4  B63C 0009               3021              CMP.B       #$9,D3
000030D8  6600 F1D0               3022              BNE         T_CMP_A
000030DC  4EB9 00003B88           3023              JSR         THIRD_9
000030E2  4E75                    3024              RTS
000030E4                          3025              
000030E4  B63C 000A               3026              CMP.B       #$A,D3
000030E8  6600 F1D0               3027              BNE         T_CMP_B
000030EC  4EB9 00003C90           3028              JSR         THIRD_A
000030F2  4E75                    3029              RTS
000030F4                          3030              
000030F4  B63C 000B               3031              CMP.B       #$B,D3
000030F8  6600 F1D0               3032              BNE         T_CMP_C
000030FC  4EB9 00003D98           3033              JSR         THIRD_B
00003102  4E75                    3034              RTS
00003104                          3035              
00003104  B63C 000C               3036              CMP.B       #$C,D3
00003108  6600 F1D0               3037              BNE         T_CMP_D
0000310C  4EB9 00003EA0           3038              JSR         THIRD_C
00003112  4E75                    3039              RTS
00003114                          3040              
00003114  B63C 000D               3041              CMP.B       #$D,D3
00003118  6600 F1D0               3042              BNE         T_CMP_E
0000311C  4EB9 00003FA8           3043              JSR         THIRD_D
00003122  4E75                    3044              RTS
00003124                          3045              
00003124  B63C 000E               3046              CMP.B       #$E,D3
00003128  6600 F1D0               3047              BNE         T_CMP_F
0000312C  4EB9 000040B0           3048              JSR         THIRD_E                 
00003132  4E75                    3049              RTS
00003134                          3050              
00003134  4EB9 000041B8           3051              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
0000313A  4E75                    3052              RTS
0000313C                          3053  
0000313C                          3054  
0000313C                          3055  *------------------------Second_F----------------------------
0000313C                          3056  *Purpose: Second_F is a subroutine of IDENTIFY. If Second_F is branched to, that means the second
0000313C                          3057  *         four digits of the machine code are 1111.
0000313C                          3058  *         Possible instructions are: MOVE, ADD, ADDA, SUB,
0000313C                          3059  *                                    MULS, LEA, AND, OR,
0000313C                          3060  *                                    LSL/LSR R, ASL/ASR R,
0000313C                          3061  *                                    ROL/ROR R, Bcc
0000313C                          3062  *----------------------------------------------------------- 
0000313C  2407                    3063  SECOND_F    MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
0000313E  E18A                    3064              LSL.L       #8,D2       *Shifts 8 bits so gets rid of leftmost 2 bytes
00003140  123C 0040               3065              MOVE.B      #64,D1      *Moves 64 into D1
00003144  E2AA                    3066              LSR.L       D1,D2       *Shifts 64 bits so the remaining contents = the left 4 bits of D7
00003146  D602                    3067              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003148                          3068              
00003148  B63C 0000               3069              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000314C  6600 F0CC               3070              BNE         T_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003150  4EB9 00003240           3071              JSR         THIRD_0     *If the first hex value is 0, jump to Third_0
00003156  4E75                    3072              RTS
00003158                          3073              
00003158  B63C 0001               3074              CMP.B       #$1,D3
0000315C  6600 F0CC               3075              BNE         T_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003160  4EB9 00003348           3076              JSR         THIRD_1 
00003166  4E75                    3077              RTS
00003168                          3078             
00003168  B63C 0002               3079              CMP.B       #$2,D3
0000316C  6600 F0CC               3080              BNE         T_CMP_3 
00003170  4EB9 00003450           3081              JSR         THIRD_2
00003176  4E75                    3082              RTS
00003178                          3083              
00003178  B63C 0003               3084              CMP.B       #$3,D3
0000317C  6600 F0CC               3085              BNE         T_CMP_4
00003180  4EB9 00003558           3086              JSR         THIRD_3 
00003186  4E75                    3087              RTS
00003188                          3088             
00003188  B63C 0004               3089              CMP.B       #$4,D3
0000318C  6600 F0CC               3090              BNE         T_CMP_5
00003190  4EB9 00003660           3091              JSR         THIRD_4
00003196  4E75                    3092              RTS
00003198                          3093              
00003198  B63C 0005               3094              CMP.B       #$5,D3
0000319C  6600 F0CC               3095              BNE         T_CMP_6
000031A0  4EB9 00003768           3096              JSR         THIRD_5
000031A6  4E75                    3097              RTS
000031A8                          3098              
000031A8  B63C 0006               3099              CMP.B       #$6,D3
000031AC  6600 F0CC               3100              BNE         T_CMP_7
000031B0  4EB9 00003870           3101              JSR         THIRD_6
000031B6  4E75                    3102              RTS
000031B8                          3103              
000031B8  B63C 0007               3104              CMP.B       #$7,D3
000031BC  6600 F0CC               3105              BNE         T_CMP_8
000031C0  4EB9 00003978           3106              JSR         THIRD_7
000031C6  4E75                    3107              RTS
000031C8                          3108              
000031C8  B63C 0008               3109              CMP.B       #$8,D3
000031CC  6600 F0CC               3110              BNE         T_CMP_9
000031D0  4EB9 00003A80           3111              JSR         THIRD_8
000031D6  4E75                    3112              RTS
000031D8                          3113              
000031D8  B63C 0009               3114              CMP.B       #$9,D3
000031DC  6600 F0CC               3115              BNE         T_CMP_A
000031E0  4EB9 00003B88           3116              JSR         THIRD_9
000031E6  4E75                    3117              RTS
000031E8                          3118              
000031E8  B63C 000A               3119              CMP.B       #$A,D3
000031EC  6600 F0CC               3120              BNE         T_CMP_B
000031F0  4EB9 00003C90           3121              JSR         THIRD_A
000031F6  4E75                    3122              RTS
000031F8                          3123              
000031F8  B63C 000B               3124              CMP.B       #$B,D3
000031FC  6600 F0CC               3125              BNE         T_CMP_C
00003200  4EB9 00003D98           3126              JSR         THIRD_B
00003206  4E75                    3127              RTS
00003208                          3128              
00003208  B63C 000C               3129              CMP.B       #$C,D3
0000320C  6600 F0CC               3130              BNE         T_CMP_D
00003210  4EB9 00003EA0           3131              JSR         THIRD_C
00003216  4E75                    3132              RTS
00003218                          3133              
00003218  B63C 000D               3134              CMP.B       #$D,D3
0000321C  6600 F0CC               3135              BNE         T_CMP_E
00003220  4EB9 00003FA8           3136              JSR         THIRD_D
00003226  4E75                    3137              RTS
00003228                          3138              
00003228  B63C 000E               3139              CMP.B       #$E,D3
0000322C  6600 F0CC               3140              BNE         T_CMP_F
00003230  4EB9 000040B0           3141              JSR         THIRD_E                 
00003236  4E75                    3142              RTS
00003238                          3143              
00003238  4EB9 000041B8           3144              JSR         THIRD_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
0000323E  4E75                    3145              RTS
00003240                          3146  
00003240                          3147  *------------------------Third_0----------------------------
00003240                          3148  *Purpose: Third_0 is a subroutine of IDENTIFY. If Third_0 is branched to, that means the third
00003240                          3149  *         four digits of the machine code are 0000.
00003240                          3150  *         Possible instructions are: MOVE, MOVEQ, ADD,
00003240                          3151  *                                    ADDA, ADDI, ADDQ, SUB,
00003240                          3152  *                                    SUBI, AND, OR,
00003240                          3153  *                                    LSL/LSR R, ASL/ASR R,
00003240                          3154  *                                    Bcc, BRA
00003240                          3155  *----------------------------------------------------------- 
00003240  2407                    3156  THIRD_0     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003242  123C 000C               3157              MOVE.B      #12,D1      *Moves 68 into D1
00003246  E3AA                    3158              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003248  123C 0044               3159              MOVE.B      #68,D1      *Moves 68 into D1
0000324C  E2AA                    3160              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
0000324E  D602                    3161              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003250                          3162              
00003250  B63C 0000               3163  FO_CMP_0    CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003254  6600 000A               3164              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003258  4EB9 000042C0           3165              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
0000325E  4E75                    3166              RTS
00003260                          3167              
00003260  B63C 0001               3168  FO_CMP_1    CMP.B       #$1,D3
00003264  6600 000A               3169              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003268  4EB9 000042C2           3170              JSR         FOURTH_1 
0000326E  4E75                    3171              RTS
00003270                          3172             
00003270  B63C 0002               3173  FO_CMP_2    CMP.B       #$2,D3
00003274  6600 000A               3174              BNE         FO_CMP_3 
00003278  4EB9 000042C4           3175              JSR         FOURTH_2
0000327E  4E75                    3176              RTS
00003280                          3177              
00003280  B63C 0003               3178  FO_CMP_3    CMP.B       #$3,D3
00003284  6600 000A               3179              BNE         FO_CMP_4
00003288  4EB9 000042C6           3180              JSR         FOURTH_3 
0000328E  4E75                    3181              RTS
00003290                          3182             
00003290  B63C 0004               3183  FO_CMP_4    CMP.B       #$4,D3
00003294  6600 000A               3184              BNE         FO_CMP_5
00003298  4EB9 000042C8           3185              JSR         FOURTH_4
0000329E  4E75                    3186              RTS
000032A0                          3187              
000032A0  B63C 0005               3188  FO_CMP_5    CMP.B       #$5,D3
000032A4  6600 000A               3189              BNE         FO_CMP_6
000032A8  4EB9 000042CA           3190              JSR         FOURTH_5
000032AE  4E75                    3191              RTS
000032B0                          3192              
000032B0  B63C 0006               3193  FO_CMP_6    CMP.B       #$6,D3
000032B4  6600 000A               3194              BNE         FO_CMP_7
000032B8  4EB9 000042CC           3195              JSR         FOURTH_6
000032BE  4E75                    3196              RTS
000032C0                          3197              
000032C0  B63C 0007               3198  FO_CMP_7    CMP.B       #$7,D3
000032C4  6600 000A               3199              BNE         FO_CMP_8
000032C8  4EB9 000042CE           3200              JSR         FOURTH_7
000032CE  4E75                    3201              RTS
000032D0                          3202              
000032D0  B63C 0008               3203  FO_CMP_8    CMP.B       #$8,D3
000032D4  6600 000A               3204              BNE         FO_CMP_9
000032D8  4EB9 000042D0           3205              JSR         FOURTH_8
000032DE  4E75                    3206              RTS
000032E0                          3207              
000032E0  B63C 0009               3208  FO_CMP_9    CMP.B       #$9,D3
000032E4  6600 000A               3209              BNE         FO_CMP_A
000032E8  4EB9 000042D2           3210              JSR         FOURTH_9
000032EE  4E75                    3211              RTS
000032F0                          3212              
000032F0  B63C 000A               3213  FO_CMP_A    CMP.B       #$A,D3
000032F4  6600 000A               3214              BNE         FO_CMP_B
000032F8  4EB9 000042D4           3215              JSR         FOURTH_A
000032FE  4E75                    3216              RTS
00003300                          3217              
00003300  B63C 000B               3218  FO_CMP_B    CMP.B       #$B,D3
00003304  6600 000A               3219              BNE         FO_CMP_C
00003308  4EB9 000042D6           3220              JSR         FOURTH_B
0000330E  4E75                    3221              RTS
00003310                          3222              
00003310  B63C 000C               3223  FO_CMP_C    CMP.B       #$C,D3
00003314  6600 000A               3224              BNE         FO_CMP_D
00003318  4EB9 000042D8           3225              JSR         FOURTH_C
0000331E  4E75                    3226              RTS
00003320                          3227              
00003320  B63C 000D               3228  FO_CMP_D    CMP.B       #$D,D3
00003324  6600 000A               3229              BNE         FO_CMP_E
00003328  4EB9 000042DA           3230              JSR         FOURTH_D
0000332E  4E75                    3231              RTS
00003330                          3232              
00003330  B63C 000E               3233  FO_CMP_E    CMP.B       #$E,D3
00003334  6600 000A               3234              BNE         FO_CMP_F
00003338  4EB9 000042DC           3235              JSR         FOURTH_E                 
0000333E  4E75                    3236              RTS
00003340                          3237              
00003340  4EB9 000042DE           3238  FO_CMP_F    JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003346  4E75                    3239              RTS
00003348                          3240  
00003348                          3241  
00003348                          3242  *------------------------Third_1----------------------------
00003348                          3243  *Purpose: Third_1 is a subroutine of IDENTIFY. If Third_1 is branched to, that means the third
00003348                          3244  *         four digits of the machine code are 0001.
00003348                          3245  *         Possible instructions are: MOVE, MOVEQ, ADD, ADDA,
00003348                          3246  *                                    ADDI, ADDQ, SUB, SUBI,
00003348                          3247  *                                    AND, OR, ROL/ROR R,
00003348                          3248  *                                    Bcc, BRA
00003348                          3249  *----------------------------------------------------------- 
00003348  2407                    3250  THIRD_1     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
0000334A  123C 000C               3251              MOVE.B      #12,D1      *Moves 68 into D1
0000334E  E3AA                    3252              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003350  123C 0044               3253              MOVE.B      #68,D1      *Moves 68 into D1
00003354  E2AA                    3254              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003356  D602                    3255              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003358                          3256              
00003358  B63C 0000               3257              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000335C  6600 FF02               3258              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003360  4EB9 000042C0           3259              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003366  4E75                    3260              RTS
00003368                          3261              
00003368  B63C 0001               3262              CMP.B       #$1,D3
0000336C  6600 FF02               3263              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003370  4EB9 000042C2           3264              JSR         FOURTH_1 
00003376  4E75                    3265              RTS
00003378                          3266             
00003378  B63C 0002               3267              CMP.B       #$2,D3
0000337C  6600 FF02               3268              BNE         FO_CMP_3 
00003380  4EB9 000042C4           3269              JSR         FOURTH_2
00003386  4E75                    3270              RTS
00003388                          3271              
00003388  B63C 0003               3272              CMP.B       #$3,D3
0000338C  6600 FF02               3273              BNE         FO_CMP_4
00003390  4EB9 000042C6           3274              JSR         FOURTH_3 
00003396  4E75                    3275              RTS
00003398                          3276             
00003398  B63C 0004               3277              CMP.B       #$4,D3
0000339C  6600 FF02               3278              BNE         FO_CMP_5
000033A0  4EB9 000042C8           3279              JSR         FOURTH_4
000033A6  4E75                    3280              RTS
000033A8                          3281              
000033A8  B63C 0005               3282              CMP.B       #$5,D3
000033AC  6600 FF02               3283              BNE         FO_CMP_6
000033B0  4EB9 000042CA           3284              JSR         FOURTH_5
000033B6  4E75                    3285              RTS
000033B8                          3286              
000033B8  B63C 0006               3287              CMP.B       #$6,D3
000033BC  6600 FF02               3288              BNE         FO_CMP_7
000033C0  4EB9 000042CC           3289              JSR         FOURTH_6
000033C6  4E75                    3290              RTS
000033C8                          3291              
000033C8  B63C 0007               3292              CMP.B       #$7,D3
000033CC  6600 FF02               3293              BNE         FO_CMP_8
000033D0  4EB9 000042CE           3294              JSR         FOURTH_7
000033D6  4E75                    3295              RTS
000033D8                          3296              
000033D8  B63C 0008               3297              CMP.B       #$8,D3
000033DC  6600 FF02               3298              BNE         FO_CMP_9
000033E0  4EB9 000042D0           3299              JSR         FOURTH_8
000033E6  4E75                    3300              RTS
000033E8                          3301              
000033E8  B63C 0009               3302              CMP.B       #$9,D3
000033EC  6600 FF02               3303              BNE         FO_CMP_A
000033F0  4EB9 000042D2           3304              JSR         FOURTH_9
000033F6  4E75                    3305              RTS
000033F8                          3306              
000033F8  B63C 000A               3307              CMP.B       #$A,D3
000033FC  6600 FF02               3308              BNE         FO_CMP_B
00003400  4EB9 000042D4           3309              JSR         FOURTH_A
00003406  4E75                    3310              RTS
00003408                          3311              
00003408  B63C 000B               3312              CMP.B       #$B,D3
0000340C  6600 FF02               3313              BNE         FO_CMP_C
00003410  4EB9 000042D6           3314              JSR         FOURTH_B
00003416  4E75                    3315              RTS
00003418                          3316              
00003418  B63C 000C               3317              CMP.B       #$C,D3
0000341C  6600 FF02               3318              BNE         FO_CMP_D
00003420  4EB9 000042D8           3319              JSR         FOURTH_C
00003426  4E75                    3320              RTS
00003428                          3321              
00003428  B63C 000D               3322              CMP.B       #$D,D3
0000342C  6600 FF02               3323              BNE         FO_CMP_E
00003430  4EB9 000042DA           3324              JSR         FOURTH_D
00003436  4E75                    3325              RTS
00003438                          3326              
00003438  B63C 000E               3327              CMP.B       #$E,D3
0000343C  6600 FF02               3328              BNE         FO_CMP_F
00003440  4EB9 000042DC           3329              JSR         FOURTH_E                 
00003446  4E75                    3330              RTS
00003448                          3331              
00003448  4EB9 000042DE           3332              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
0000344E  4E75                    3333              RTS
00003450                          3334  
00003450                          3335  
00003450                          3336  *------------------------Third_2----------------------------
00003450                          3337  *Purpose: Third_2 is a subroutine of IDENTIFY. If Third_2 is branched to, that means the third
00003450                          3338  *         four digits of the machine code are 0010.
00003450                          3339  *         Possible instructions are: MOVE, MOVEQ, ADD,
00003450                          3340  *                                    ADDA, ADDI, ADDQ, SUB,
00003450                          3341  *                                    SUBI, AND, OR,
00003450                          3342  *                                    LSL/LSR R, ASL/ASR R,
00003450                          3343  *                                    Bcc, BRA
00003450                          3344  *----------------------------------------------------------- 
00003450  2407                    3345  THIRD_2     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003452  123C 000C               3346              MOVE.B      #12,D1      *Moves 68 into D1
00003456  E3AA                    3347              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003458  123C 0044               3348              MOVE.B      #68,D1      *Moves 68 into D1
0000345C  E2AA                    3349              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
0000345E  D602                    3350              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003460                          3351              
00003460  B63C 0000               3352              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003464  6600 FDFA               3353              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003468  4EB9 000042C0           3354              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
0000346E  4E75                    3355              RTS
00003470                          3356              
00003470  B63C 0001               3357              CMP.B       #$1,D3
00003474  6600 FDFA               3358              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003478  4EB9 000042C2           3359              JSR         FOURTH_1 
0000347E  4E75                    3360              RTS
00003480                          3361             
00003480  B63C 0002               3362              CMP.B       #$2,D3
00003484  6600 FDFA               3363              BNE         FO_CMP_3 
00003488  4EB9 000042C4           3364              JSR         FOURTH_2
0000348E  4E75                    3365              RTS
00003490                          3366              
00003490  B63C 0003               3367              CMP.B       #$3,D3
00003494  6600 FDFA               3368              BNE         FO_CMP_4
00003498  4EB9 000042C6           3369              JSR         FOURTH_3 
0000349E  4E75                    3370              RTS
000034A0                          3371             
000034A0  B63C 0004               3372              CMP.B       #$4,D3
000034A4  6600 FDFA               3373              BNE         FO_CMP_5
000034A8  4EB9 000042C8           3374              JSR         FOURTH_4
000034AE  4E75                    3375              RTS
000034B0                          3376              
000034B0  B63C 0005               3377              CMP.B       #$5,D3
000034B4  6600 FDFA               3378              BNE         FO_CMP_6
000034B8  4EB9 000042CA           3379              JSR         FOURTH_5
000034BE  4E75                    3380              RTS
000034C0                          3381              
000034C0  B63C 0006               3382              CMP.B       #$6,D3
000034C4  6600 FDFA               3383              BNE         FO_CMP_7
000034C8  4EB9 000042CC           3384              JSR         FOURTH_6
000034CE  4E75                    3385              RTS
000034D0                          3386              
000034D0  B63C 0007               3387              CMP.B       #$7,D3
000034D4  6600 FDFA               3388              BNE         FO_CMP_8
000034D8  4EB9 000042CE           3389              JSR         FOURTH_7
000034DE  4E75                    3390              RTS
000034E0                          3391              
000034E0  B63C 0008               3392              CMP.B       #$8,D3
000034E4  6600 FDFA               3393              BNE         FO_CMP_9
000034E8  4EB9 000042D0           3394              JSR         FOURTH_8
000034EE  4E75                    3395              RTS
000034F0                          3396              
000034F0  B63C 0009               3397              CMP.B       #$9,D3
000034F4  6600 FDFA               3398              BNE         FO_CMP_A
000034F8  4EB9 000042D2           3399              JSR         FOURTH_9
000034FE  4E75                    3400              RTS
00003500                          3401              
00003500  B63C 000A               3402              CMP.B       #$A,D3
00003504  6600 FDFA               3403              BNE         FO_CMP_B
00003508  4EB9 000042D4           3404              JSR         FOURTH_A
0000350E  4E75                    3405              RTS
00003510                          3406              
00003510  B63C 000B               3407              CMP.B       #$B,D3
00003514  6600 FDFA               3408              BNE         FO_CMP_C
00003518  4EB9 000042D6           3409              JSR         FOURTH_B
0000351E  4E75                    3410              RTS
00003520                          3411              
00003520  B63C 000C               3412              CMP.B       #$C,D3
00003524  6600 FDFA               3413              BNE         FO_CMP_D
00003528  4EB9 000042D8           3414              JSR         FOURTH_C
0000352E  4E75                    3415              RTS
00003530                          3416              
00003530  B63C 000D               3417              CMP.B       #$D,D3
00003534  6600 FDFA               3418              BNE         FO_CMP_E
00003538  4EB9 000042DA           3419              JSR         FOURTH_D
0000353E  4E75                    3420              RTS
00003540                          3421              
00003540  B63C 000E               3422              CMP.B       #$E,D3
00003544  6600 FDFA               3423              BNE         FO_CMP_F
00003548  4EB9 000042DC           3424              JSR         FOURTH_E                 
0000354E  4E75                    3425              RTS
00003550                          3426              
00003550  4EB9 000042DE           3427              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003556  4E75                    3428              RTS
00003558                          3429  
00003558                          3430  
00003558                          3431  *------------------------Third_3----------------------------
00003558                          3432  *Purpose: Third_3 is a subroutine of IDENTIFY. If Third_3 is branched to, that means the third
00003558                          3433  *         four digits of the machine code are 0011.
00003558                          3434  *         Possible instructions are: MOVE, MOVEQ, ADD, ADDA,
00003558                          3435  *                                    ADDI, ADDQ, SUB, SUBI,
00003558                          3436  *                                    AND, OR, ROL/ROR R,
00003558                          3437  *                                    Bcc, BRA
00003558                          3438  *----------------------------------------------------------- 
00003558  2407                    3439  THIRD_3     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
0000355A  123C 000C               3440              MOVE.B      #12,D1      *Moves 68 into D1
0000355E  E3AA                    3441              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003560  123C 0044               3442              MOVE.B      #68,D1      *Moves 68 into D1
00003564  E2AA                    3443              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003566  D602                    3444              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003568                          3445              
00003568  B63C 0000               3446              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000356C  6600 FCF2               3447              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003570  4EB9 000042C0           3448              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003576  4E75                    3449              RTS
00003578                          3450              
00003578  B63C 0001               3451              CMP.B       #$1,D3
0000357C  6600 FCF2               3452              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003580  4EB9 000042C2           3453              JSR         FOURTH_1 
00003586  4E75                    3454              RTS
00003588                          3455             
00003588  B63C 0002               3456              CMP.B       #$2,D3
0000358C  6600 FCF2               3457              BNE         FO_CMP_3 
00003590  4EB9 000042C4           3458              JSR         FOURTH_2
00003596  4E75                    3459              RTS
00003598                          3460              
00003598  B63C 0003               3461              CMP.B       #$3,D3
0000359C  6600 FCF2               3462              BNE         FO_CMP_4
000035A0  4EB9 000042C6           3463              JSR         FOURTH_3 
000035A6  4E75                    3464              RTS
000035A8                          3465             
000035A8  B63C 0004               3466              CMP.B       #$4,D3
000035AC  6600 FCF2               3467              BNE         FO_CMP_5
000035B0  4EB9 000042C8           3468              JSR         FOURTH_4
000035B6  4E75                    3469              RTS
000035B8                          3470              
000035B8  B63C 0005               3471              CMP.B       #$5,D3
000035BC  6600 FCF2               3472              BNE         FO_CMP_6
000035C0  4EB9 000042CA           3473              JSR         FOURTH_5
000035C6  4E75                    3474              RTS
000035C8                          3475              
000035C8  B63C 0006               3476              CMP.B       #$6,D3
000035CC  6600 FCF2               3477              BNE         FO_CMP_7
000035D0  4EB9 000042CC           3478              JSR         FOURTH_6
000035D6  4E75                    3479              RTS
000035D8                          3480              
000035D8  B63C 0007               3481              CMP.B       #$7,D3
000035DC  6600 FCF2               3482              BNE         FO_CMP_8
000035E0  4EB9 000042CE           3483              JSR         FOURTH_7
000035E6  4E75                    3484              RTS
000035E8                          3485              
000035E8  B63C 0008               3486              CMP.B       #$8,D3
000035EC  6600 FCF2               3487              BNE         FO_CMP_9
000035F0  4EB9 000042D0           3488              JSR         FOURTH_8
000035F6  4E75                    3489              RTS
000035F8                          3490              
000035F8  B63C 0009               3491              CMP.B       #$9,D3
000035FC  6600 FCF2               3492              BNE         FO_CMP_A
00003600  4EB9 000042D2           3493              JSR         FOURTH_9
00003606  4E75                    3494              RTS
00003608                          3495              
00003608  B63C 000A               3496              CMP.B       #$A,D3
0000360C  6600 FCF2               3497              BNE         FO_CMP_B
00003610  4EB9 000042D4           3498              JSR         FOURTH_A
00003616  4E75                    3499              RTS
00003618                          3500              
00003618  B63C 000B               3501              CMP.B       #$B,D3
0000361C  6600 FCF2               3502              BNE         FO_CMP_C
00003620  4EB9 000042D6           3503              JSR         FOURTH_B
00003626  4E75                    3504              RTS
00003628                          3505              
00003628  B63C 000C               3506              CMP.B       #$C,D3
0000362C  6600 FCF2               3507              BNE         FO_CMP_D
00003630  4EB9 000042D8           3508              JSR         FOURTH_C
00003636  4E75                    3509              RTS
00003638                          3510              
00003638  B63C 000D               3511              CMP.B       #$D,D3
0000363C  6600 FCF2               3512              BNE         FO_CMP_E
00003640  4EB9 000042DA           3513              JSR         FOURTH_D
00003646  4E75                    3514              RTS
00003648                          3515              
00003648  B63C 000E               3516              CMP.B       #$E,D3
0000364C  6600 FCF2               3517              BNE         FO_CMP_F
00003650  4EB9 000042DC           3518              JSR         FOURTH_E                 
00003656  4E75                    3519              RTS
00003658                          3520              
00003658  4EB9 000042DE           3521              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
0000365E  4E75                    3522              RTS
00003660                          3523  
00003660                          3524  
00003660                          3525  *------------------------Third_4----------------------------
00003660                          3526  *Purpose: Third_4 is a subroutine of IDENTIFY. If Third_4 is branched to, that means the third
00003660                          3527  *         four digits of the machine code are 0100.
00003660                          3528  *         Possible instructions are: MOVE, MOVEA, MOVEQ, 
00003660                          3529  *                                    ADD,
00003660                          3530  *                                    ADDA, ADDI, ADDQ, SUB,
00003660                          3531  *                                    SUBI, AND, OR,
00003660                          3532  *                                    LSL/LSR R, ASL/ASR R,
00003660                          3533  *                                    Bcc, BRA
00003660                          3534  *----------------------------------------------------------- 
00003660  2407                    3535  THIRD_4     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003662  123C 000C               3536              MOVE.B      #12,D1      *Moves 68 into D1
00003666  E3AA                    3537              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003668  123C 0044               3538              MOVE.B      #68,D1      *Moves 68 into D1
0000366C  E2AA                    3539              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
0000366E  D602                    3540              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003670                          3541              
00003670  B63C 0000               3542              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003674  6600 FBEA               3543              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003678  4EB9 000042C0           3544              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
0000367E  4E75                    3545              RTS
00003680                          3546              
00003680  B63C 0001               3547              CMP.B       #$1,D3
00003684  6600 FBEA               3548              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003688  4EB9 000042C2           3549              JSR         FOURTH_1 
0000368E  4E75                    3550              RTS
00003690                          3551             
00003690  B63C 0002               3552              CMP.B       #$2,D3
00003694  6600 FBEA               3553              BNE         FO_CMP_3 
00003698  4EB9 000042C4           3554              JSR         FOURTH_2
0000369E  4E75                    3555              RTS
000036A0                          3556              
000036A0  B63C 0003               3557              CMP.B       #$3,D3
000036A4  6600 FBEA               3558              BNE         FO_CMP_4
000036A8  4EB9 000042C6           3559              JSR         FOURTH_3 
000036AE  4E75                    3560              RTS
000036B0                          3561             
000036B0  B63C 0004               3562              CMP.B       #$4,D3
000036B4  6600 FBEA               3563              BNE         FO_CMP_5
000036B8  4EB9 000042C8           3564              JSR         FOURTH_4
000036BE  4E75                    3565              RTS
000036C0                          3566              
000036C0  B63C 0005               3567              CMP.B       #$5,D3
000036C4  6600 FBEA               3568              BNE         FO_CMP_6
000036C8  4EB9 000042CA           3569              JSR         FOURTH_5
000036CE  4E75                    3570              RTS
000036D0                          3571              
000036D0  B63C 0006               3572              CMP.B       #$6,D3
000036D4  6600 FBEA               3573              BNE         FO_CMP_7
000036D8  4EB9 000042CC           3574              JSR         FOURTH_6
000036DE  4E75                    3575              RTS
000036E0                          3576              
000036E0  B63C 0007               3577              CMP.B       #$7,D3
000036E4  6600 FBEA               3578              BNE         FO_CMP_8
000036E8  4EB9 000042CE           3579              JSR         FOURTH_7
000036EE  4E75                    3580              RTS
000036F0                          3581              
000036F0  B63C 0008               3582              CMP.B       #$8,D3
000036F4  6600 FBEA               3583              BNE         FO_CMP_9
000036F8  4EB9 000042D0           3584              JSR         FOURTH_8
000036FE  4E75                    3585              RTS
00003700                          3586              
00003700  B63C 0009               3587              CMP.B       #$9,D3
00003704  6600 FBEA               3588              BNE         FO_CMP_A
00003708  4EB9 000042D2           3589              JSR         FOURTH_9
0000370E  4E75                    3590              RTS
00003710                          3591              
00003710  B63C 000A               3592              CMP.B       #$A,D3
00003714  6600 FBEA               3593              BNE         FO_CMP_B
00003718  4EB9 000042D4           3594              JSR         FOURTH_A
0000371E  4E75                    3595              RTS
00003720                          3596              
00003720  B63C 000B               3597              CMP.B       #$B,D3
00003724  6600 FBEA               3598              BNE         FO_CMP_C
00003728  4EB9 000042D6           3599              JSR         FOURTH_B
0000372E  4E75                    3600              RTS
00003730                          3601              
00003730  B63C 000C               3602              CMP.B       #$C,D3
00003734  6600 FBEA               3603              BNE         FO_CMP_D
00003738  4EB9 000042D8           3604              JSR         FOURTH_C
0000373E  4E75                    3605              RTS
00003740                          3606              
00003740  B63C 000D               3607              CMP.B       #$D,D3
00003744  6600 FBEA               3608              BNE         FO_CMP_E
00003748  4EB9 000042DA           3609              JSR         FOURTH_D
0000374E  4E75                    3610              RTS
00003750                          3611              
00003750  B63C 000E               3612              CMP.B       #$E,D3
00003754  6600 FBEA               3613              BNE         FO_CMP_F
00003758  4EB9 000042DC           3614              JSR         FOURTH_E                 
0000375E  4E75                    3615              RTS
00003760                          3616              
00003760  4EB9 000042DE           3617              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003766  4E75                    3618              RTS
00003768                          3619  
00003768                          3620  
00003768                          3621  *------------------------Third_5----------------------------
00003768                          3622  *Purpose: Third_5 is a subroutine of IDENTIFY. If Third_5 is branched to, that means the third
00003768                          3623  *         four digits of the machine code are 0101.
00003768                          3624  *         Possible instructions are: MOVE, MOVEA, MOVEQ, 
00003768                          3625  *                                    ADD, ADDA,
00003768                          3626  *                                    ADDI, ADDQ, SUB, SUBI,
00003768                          3627  *                                    AND, OR, ROL/ROR R,
00003768                          3628  *                                    Bcc, BRA
00003768                          3629  *----------------------------------------------------------- 
00003768  2407                    3630  THIRD_5     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
0000376A  123C 000C               3631              MOVE.B      #12,D1      *Moves 68 into D1
0000376E  E3AA                    3632              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003770  123C 0044               3633              MOVE.B      #68,D1      *Moves 68 into D1
00003774  E2AA                    3634              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003776  D602                    3635              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003778                          3636              
00003778  B63C 0000               3637              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000377C  6600 FAE2               3638              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003780  4EB9 000042C0           3639              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003786  4E75                    3640              RTS
00003788                          3641              
00003788  B63C 0001               3642              CMP.B       #$1,D3
0000378C  6600 FAE2               3643              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003790  4EB9 000042C2           3644              JSR         FOURTH_1 
00003796  4E75                    3645              RTS
00003798                          3646             
00003798  B63C 0002               3647              CMP.B       #$2,D3
0000379C  6600 FAE2               3648              BNE         FO_CMP_3 
000037A0  4EB9 000042C4           3649              JSR         FOURTH_2
000037A6  4E75                    3650              RTS
000037A8                          3651              
000037A8  B63C 0003               3652              CMP.B       #$3,D3
000037AC  6600 FAE2               3653              BNE         FO_CMP_4
000037B0  4EB9 000042C6           3654              JSR         FOURTH_3 
000037B6  4E75                    3655              RTS
000037B8                          3656             
000037B8  B63C 0004               3657              CMP.B       #$4,D3
000037BC  6600 FAE2               3658              BNE         FO_CMP_5
000037C0  4EB9 000042C8           3659              JSR         FOURTH_4
000037C6  4E75                    3660              RTS
000037C8                          3661              
000037C8  B63C 0005               3662              CMP.B       #$5,D3
000037CC  6600 FAE2               3663              BNE         FO_CMP_6
000037D0  4EB9 000042CA           3664              JSR         FOURTH_5
000037D6  4E75                    3665              RTS
000037D8                          3666              
000037D8  B63C 0006               3667              CMP.B       #$6,D3
000037DC  6600 FAE2               3668              BNE         FO_CMP_7
000037E0  4EB9 000042CC           3669              JSR         FOURTH_6
000037E6  4E75                    3670              RTS
000037E8                          3671              
000037E8  B63C 0007               3672              CMP.B       #$7,D3
000037EC  6600 FAE2               3673              BNE         FO_CMP_8
000037F0  4EB9 000042CE           3674              JSR         FOURTH_7
000037F6  4E75                    3675              RTS
000037F8                          3676              
000037F8  B63C 0008               3677              CMP.B       #$8,D3
000037FC  6600 FAE2               3678              BNE         FO_CMP_9
00003800  4EB9 000042D0           3679              JSR         FOURTH_8
00003806  4E75                    3680              RTS
00003808                          3681              
00003808  B63C 0009               3682              CMP.B       #$9,D3
0000380C  6600 FAE2               3683              BNE         FO_CMP_A
00003810  4EB9 000042D2           3684              JSR         FOURTH_9
00003816  4E75                    3685              RTS
00003818                          3686              
00003818  B63C 000A               3687              CMP.B       #$A,D3
0000381C  6600 FAE2               3688              BNE         FO_CMP_B
00003820  4EB9 000042D4           3689              JSR         FOURTH_A
00003826  4E75                    3690              RTS
00003828                          3691              
00003828  B63C 000B               3692              CMP.B       #$B,D3
0000382C  6600 FAE2               3693              BNE         FO_CMP_C
00003830  4EB9 000042D6           3694              JSR         FOURTH_B
00003836  4E75                    3695              RTS
00003838                          3696              
00003838  B63C 000C               3697              CMP.B       #$C,D3
0000383C  6600 FAE2               3698              BNE         FO_CMP_D
00003840  4EB9 000042D8           3699              JSR         FOURTH_C
00003846  4E75                    3700              RTS
00003848                          3701              
00003848  B63C 000D               3702              CMP.B       #$D,D3
0000384C  6600 FAE2               3703              BNE         FO_CMP_E
00003850  4EB9 000042DA           3704              JSR         FOURTH_D
00003856  4E75                    3705              RTS
00003858                          3706              
00003858  B63C 000E               3707              CMP.B       #$E,D3
0000385C  6600 FAE2               3708              BNE         FO_CMP_F
00003860  4EB9 000042DC           3709              JSR         FOURTH_E                 
00003866  4E75                    3710              RTS
00003868                          3711              
00003868  4EB9 000042DE           3712              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
0000386E  4E75                    3713              RTS
00003870                          3714  
00003870                          3715  
00003870                          3716  *------------------------Third_6----------------------------
00003870                          3717  *Purpose: Third_6 is a subroutine of IDENTIFY. If Third_6 is branched to, that means the third
00003870                          3718  *         four digits of the machine code are 0110.
00003870                          3719  *         Possible instructions are: MOVE, MOVEA, MOVEQ, 
00003870                          3720  *                                    ADD,
00003870                          3721  *                                    ADDA, ADDI, ADDQ, SUB,
00003870                          3722  *                                    SUBI, DIVU, AND, OR,
00003870                          3723  *                                    LSL/LSR R, LSL/LSR M, 
00003870                          3724  *                                    ASL/ASR R, ASL/ASR M,
00003870                          3725  *                                    ROL/ROR M, Bcc, BRA
00003870                          3726  *----------------------------------------------------------- 
00003870  2407                    3727  THIRD_6     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003872  123C 000C               3728              MOVE.B      #12,D1      *Moves 68 into D1
00003876  E3AA                    3729              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003878  123C 0044               3730              MOVE.B      #68,D1      *Moves 68 into D1
0000387C  E2AA                    3731              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
0000387E  D602                    3732              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003880                          3733              
00003880  B63C 0000               3734              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003884  6600 F9DA               3735              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003888  4EB9 000042C0           3736              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
0000388E  4E75                    3737              RTS
00003890                          3738              
00003890  B63C 0001               3739              CMP.B       #$1,D3
00003894  6600 F9DA               3740              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003898  4EB9 000042C2           3741              JSR         FOURTH_1 
0000389E  4E75                    3742              RTS
000038A0                          3743             
000038A0  B63C 0002               3744              CMP.B       #$2,D3
000038A4  6600 F9DA               3745              BNE         FO_CMP_3 
000038A8  4EB9 000042C4           3746              JSR         FOURTH_2
000038AE  4E75                    3747              RTS
000038B0                          3748              
000038B0  B63C 0003               3749              CMP.B       #$3,D3
000038B4  6600 F9DA               3750              BNE         FO_CMP_4
000038B8  4EB9 000042C6           3751              JSR         FOURTH_3 
000038BE  4E75                    3752              RTS
000038C0                          3753             
000038C0  B63C 0004               3754              CMP.B       #$4,D3
000038C4  6600 F9DA               3755              BNE         FO_CMP_5
000038C8  4EB9 000042C8           3756              JSR         FOURTH_4
000038CE  4E75                    3757              RTS
000038D0                          3758              
000038D0  B63C 0005               3759              CMP.B       #$5,D3
000038D4  6600 F9DA               3760              BNE         FO_CMP_6
000038D8  4EB9 000042CA           3761              JSR         FOURTH_5
000038DE  4E75                    3762              RTS
000038E0                          3763              
000038E0  B63C 0006               3764              CMP.B       #$6,D3
000038E4  6600 F9DA               3765              BNE         FO_CMP_7
000038E8  4EB9 000042CC           3766              JSR         FOURTH_6
000038EE  4E75                    3767              RTS
000038F0                          3768              
000038F0  B63C 0007               3769              CMP.B       #$7,D3
000038F4  6600 F9DA               3770              BNE         FO_CMP_8
000038F8  4EB9 000042CE           3771              JSR         FOURTH_7
000038FE  4E75                    3772              RTS
00003900                          3773              
00003900  B63C 0008               3774              CMP.B       #$8,D3
00003904  6600 F9DA               3775              BNE         FO_CMP_9
00003908  4EB9 000042D0           3776              JSR         FOURTH_8
0000390E  4E75                    3777              RTS
00003910                          3778              
00003910  B63C 0009               3779              CMP.B       #$9,D3
00003914  6600 F9DA               3780              BNE         FO_CMP_A
00003918  4EB9 000042D2           3781              JSR         FOURTH_9
0000391E  4E75                    3782              RTS
00003920                          3783              
00003920  B63C 000A               3784              CMP.B       #$A,D3
00003924  6600 F9DA               3785              BNE         FO_CMP_B
00003928  4EB9 000042D4           3786              JSR         FOURTH_A
0000392E  4E75                    3787              RTS
00003930                          3788              
00003930  B63C 000B               3789              CMP.B       #$B,D3
00003934  6600 F9DA               3790              BNE         FO_CMP_C
00003938  4EB9 000042D6           3791              JSR         FOURTH_B
0000393E  4E75                    3792              RTS
00003940                          3793              
00003940  B63C 000C               3794              CMP.B       #$C,D3
00003944  6600 F9DA               3795              BNE         FO_CMP_D
00003948  4EB9 000042D8           3796              JSR         FOURTH_C
0000394E  4E75                    3797              RTS
00003950                          3798              
00003950  B63C 000D               3799              CMP.B       #$D,D3
00003954  6600 F9DA               3800              BNE         FO_CMP_E
00003958  4EB9 000042DA           3801              JSR         FOURTH_D
0000395E  4E75                    3802              RTS
00003960                          3803              
00003960  B63C 000E               3804              CMP.B       #$E,D3
00003964  6600 F9DA               3805              BNE         FO_CMP_F
00003968  4EB9 000042DC           3806              JSR         FOURTH_E                 
0000396E  4E75                    3807              RTS
00003970                          3808              
00003970  4EB9 000042DE           3809              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003976  4E75                    3810              RTS
00003978                          3811  
00003978                          3812  
00003978                          3813  *------------------------Third_7---------------------------
00003978                          3814  *Purpose: Third_7 is a subroutine of IDENTIFY. If Third_7 is branched to, that means the third
00003978                          3815  *         four digits of the machine code are 0111.
00003978                          3816  *         Possible instructions are: NOP, MOVE, MOVEA, 
00003978                          3817  *                                    MOVEQ, ADD,
00003978                          3818  *                                    ADDA, ADDI, ADDQ, SUB,
00003978                          3819  *                                    SUBI, DIVU, AND, OR,
00003978                          3820  *                                    LSL/LSR M, ASL/ASR M,
00003978                          3821  *                                    ROL/ROR R, ROL/ROR M,
00003978                          3822  *                                    Bcc, RTS, BRA
00003978                          3823  *----------------------------------------------------------- 
00003978  2407                    3824  THIRD_7     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
0000397A  123C 000C               3825              MOVE.B      #12,D1      *Moves 68 into D1
0000397E  E3AA                    3826              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003980  123C 0044               3827              MOVE.B      #68,D1      *Moves 68 into D1
00003984  E2AA                    3828              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003986  D602                    3829              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003988                          3830              
00003988  B63C 0000               3831              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
0000398C  6600 F8D2               3832              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003990  4EB9 000042C0           3833              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003996  4E75                    3834              RTS
00003998                          3835              
00003998  B63C 0001               3836              CMP.B       #$1,D3
0000399C  6600 F8D2               3837              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000039A0  4EB9 000042C2           3838              JSR         FOURTH_1 
000039A6  4E75                    3839              RTS
000039A8                          3840             
000039A8  B63C 0002               3841              CMP.B       #$2,D3
000039AC  6600 F8D2               3842              BNE         FO_CMP_3 
000039B0  4EB9 000042C4           3843              JSR         FOURTH_2
000039B6  4E75                    3844              RTS
000039B8                          3845              
000039B8  B63C 0003               3846              CMP.B       #$3,D3
000039BC  6600 F8D2               3847              BNE         FO_CMP_4
000039C0  4EB9 000042C6           3848              JSR         FOURTH_3 
000039C6  4E75                    3849              RTS
000039C8                          3850             
000039C8  B63C 0004               3851              CMP.B       #$4,D3
000039CC  6600 F8D2               3852              BNE         FO_CMP_5
000039D0  4EB9 000042C8           3853              JSR         FOURTH_4
000039D6  4E75                    3854              RTS
000039D8                          3855              
000039D8  B63C 0005               3856              CMP.B       #$5,D3
000039DC  6600 F8D2               3857              BNE         FO_CMP_6
000039E0  4EB9 000042CA           3858              JSR         FOURTH_5
000039E6  4E75                    3859              RTS
000039E8                          3860              
000039E8  B63C 0006               3861              CMP.B       #$6,D3
000039EC  6600 F8D2               3862              BNE         FO_CMP_7
000039F0  4EB9 000042CC           3863              JSR         FOURTH_6
000039F6  4E75                    3864              RTS
000039F8                          3865              
000039F8  B63C 0007               3866              CMP.B       #$7,D3
000039FC  6600 F8D2               3867              BNE         FO_CMP_8
00003A00  4EB9 000042CE           3868              JSR         FOURTH_7
00003A06  4E75                    3869              RTS
00003A08                          3870              
00003A08  B63C 0008               3871              CMP.B       #$8,D3
00003A0C  6600 F8D2               3872              BNE         FO_CMP_9
00003A10  4EB9 000042D0           3873              JSR         FOURTH_8
00003A16  4E75                    3874              RTS
00003A18                          3875              
00003A18  B63C 0009               3876              CMP.B       #$9,D3
00003A1C  6600 F8D2               3877              BNE         FO_CMP_A
00003A20  4EB9 000042D2           3878              JSR         FOURTH_9
00003A26  4E75                    3879              RTS
00003A28                          3880              
00003A28  B63C 000A               3881              CMP.B       #$A,D3
00003A2C  6600 F8D2               3882              BNE         FO_CMP_B
00003A30  4EB9 000042D4           3883              JSR         FOURTH_A
00003A36  4E75                    3884              RTS
00003A38                          3885              
00003A38  B63C 000B               3886              CMP.B       #$B,D3
00003A3C  6600 F8D2               3887              BNE         FO_CMP_C
00003A40  4EB9 000042D6           3888              JSR         FOURTH_B
00003A46  4E75                    3889              RTS
00003A48                          3890              
00003A48  B63C 000C               3891              CMP.B       #$C,D3
00003A4C  6600 F8D2               3892              BNE         FO_CMP_D
00003A50  4EB9 000042D8           3893              JSR         FOURTH_C
00003A56  4E75                    3894              RTS
00003A58                          3895              
00003A58  B63C 000D               3896              CMP.B       #$D,D3
00003A5C  6600 F8D2               3897              BNE         FO_CMP_E
00003A60  4EB9 000042DA           3898              JSR         FOURTH_D
00003A66  4E75                    3899              RTS
00003A68                          3900              
00003A68  B63C 000E               3901              CMP.B       #$E,D3
00003A6C  6600 F8D2               3902              BNE         FO_CMP_F
00003A70  4EB9 000042DC           3903              JSR         FOURTH_E                 
00003A76  4E75                    3904              RTS
00003A78                          3905              
00003A78  4EB9 000042DE           3906              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003A7E  4E75                    3907              RTS
00003A80                          3908  
00003A80                          3909  
00003A80                          3910  *------------------------Third_8---------------------------
00003A80                          3911  *Purpose: Third_8 is a subroutine of IDENTIFY. If Third_8 is branched to, that means the third
00003A80                          3912  *         four digits of the machine code are 1000.
00003A80                          3913  *         Possible instructions are: MOVE, MOVEM, MOVEQ, 
00003A80                          3914  *                                    ADD, ADDA, ADDI, ADDQ, 
00003A80                          3915  *                                    SUB,
00003A80                          3916  *                                    AND, OR, LSL/LSR R,
00003A80                          3917  *                                    ASL/ASR R, Bcc, JSR,
00003A80                          3918  *                                    BRA
00003A80                          3919  *----------------------------------------------------------- 
00003A80  2407                    3920  THIRD_8     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003A82  123C 000C               3921              MOVE.B      #12,D1      *Moves 68 into D1
00003A86  E3AA                    3922              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003A88  123C 0044               3923              MOVE.B      #68,D1      *Moves 68 into D1
00003A8C  E2AA                    3924              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003A8E  D602                    3925              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003A90                          3926              
00003A90  B63C 0000               3927              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003A94  6600 F7CA               3928              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003A98  4EB9 000042C0           3929              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003A9E  4E75                    3930              RTS
00003AA0                          3931              
00003AA0  B63C 0001               3932              CMP.B       #$1,D3
00003AA4  6600 F7CA               3933              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003AA8  4EB9 000042C2           3934              JSR         FOURTH_1 
00003AAE  4E75                    3935              RTS
00003AB0                          3936             
00003AB0  B63C 0002               3937              CMP.B       #$2,D3
00003AB4  6600 F7CA               3938              BNE         FO_CMP_3 
00003AB8  4EB9 000042C4           3939              JSR         FOURTH_2
00003ABE  4E75                    3940              RTS
00003AC0                          3941              
00003AC0  B63C 0003               3942              CMP.B       #$3,D3
00003AC4  6600 F7CA               3943              BNE         FO_CMP_4
00003AC8  4EB9 000042C6           3944              JSR         FOURTH_3 
00003ACE  4E75                    3945              RTS
00003AD0                          3946             
00003AD0  B63C 0004               3947              CMP.B       #$4,D3
00003AD4  6600 F7CA               3948              BNE         FO_CMP_5
00003AD8  4EB9 000042C8           3949              JSR         FOURTH_4
00003ADE  4E75                    3950              RTS
00003AE0                          3951              
00003AE0  B63C 0005               3952              CMP.B       #$5,D3
00003AE4  6600 F7CA               3953              BNE         FO_CMP_6
00003AE8  4EB9 000042CA           3954              JSR         FOURTH_5
00003AEE  4E75                    3955              RTS
00003AF0                          3956              
00003AF0  B63C 0006               3957              CMP.B       #$6,D3
00003AF4  6600 F7CA               3958              BNE         FO_CMP_7
00003AF8  4EB9 000042CC           3959              JSR         FOURTH_6
00003AFE  4E75                    3960              RTS
00003B00                          3961              
00003B00  B63C 0007               3962              CMP.B       #$7,D3
00003B04  6600 F7CA               3963              BNE         FO_CMP_8
00003B08  4EB9 000042CE           3964              JSR         FOURTH_7
00003B0E  4E75                    3965              RTS
00003B10                          3966              
00003B10  B63C 0008               3967              CMP.B       #$8,D3
00003B14  6600 F7CA               3968              BNE         FO_CMP_9
00003B18  4EB9 000042D0           3969              JSR         FOURTH_8
00003B1E  4E75                    3970              RTS
00003B20                          3971              
00003B20  B63C 0009               3972              CMP.B       #$9,D3
00003B24  6600 F7CA               3973              BNE         FO_CMP_A
00003B28  4EB9 000042D2           3974              JSR         FOURTH_9
00003B2E  4E75                    3975              RTS
00003B30                          3976              
00003B30  B63C 000A               3977              CMP.B       #$A,D3
00003B34  6600 F7CA               3978              BNE         FO_CMP_B
00003B38  4EB9 000042D4           3979              JSR         FOURTH_A
00003B3E  4E75                    3980              RTS
00003B40                          3981              
00003B40  B63C 000B               3982              CMP.B       #$B,D3
00003B44  6600 F7CA               3983              BNE         FO_CMP_C
00003B48  4EB9 000042D6           3984              JSR         FOURTH_B
00003B4E  4E75                    3985              RTS
00003B50                          3986              
00003B50  B63C 000C               3987              CMP.B       #$C,D3
00003B54  6600 F7CA               3988              BNE         FO_CMP_D
00003B58  4EB9 000042D8           3989              JSR         FOURTH_C
00003B5E  4E75                    3990              RTS
00003B60                          3991              
00003B60  B63C 000D               3992              CMP.B       #$D,D3
00003B64  6600 F7CA               3993              BNE         FO_CMP_E
00003B68  4EB9 000042DA           3994              JSR         FOURTH_D
00003B6E  4E75                    3995              RTS
00003B70                          3996              
00003B70  B63C 000E               3997              CMP.B       #$E,D3
00003B74  6600 F7CA               3998              BNE         FO_CMP_F
00003B78  4EB9 000042DC           3999              JSR         FOURTH_E                 
00003B7E  4E75                    4000              RTS
00003B80                          4001              
00003B80  4EB9 000042DE           4002              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003B86  4E75                    4003              RTS
00003B88                          4004  
00003B88                          4005  
00003B88                          4006  *------------------------Third_9---------------------------
00003B88                          4007  *Purpose: Third_9 is a subroutine of IDENTIFY. If Third_9 is branched to, that means the third
00003B88                          4008  *         four digits of the machine code are 1001.
00003B88                          4009  *         Possible instructions are: MOVE, MOVEM, MOVEQ, 
00003B88                          4010  *                                    ADD, ADDA, ADDI, ADDQ, 
00003B88                          4011  *                                    SUB,
00003B88                          4012  *                                    AND, OR, ROL/ROR R,
00003B88                          4013  *                                    Bcc, JSR, BRA
00003B88                          4014  *----------------------------------------------------------
00003B88  2407                    4015  THIRD_9     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003B8A  123C 000C               4016              MOVE.B      #12,D1      *Moves 68 into D1
00003B8E  E3AA                    4017              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003B90  123C 0044               4018              MOVE.B      #68,D1      *Moves 68 into D1
00003B94  E2AA                    4019              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003B96  D602                    4020              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003B98                          4021              
00003B98  B63C 0000               4022              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003B9C  6600 F6C2               4023              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003BA0  4EB9 000042C0           4024              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003BA6  4E75                    4025              RTS
00003BA8                          4026              
00003BA8  B63C 0001               4027              CMP.B       #$1,D3
00003BAC  6600 F6C2               4028              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003BB0  4EB9 000042C2           4029              JSR         FOURTH_1 
00003BB6  4E75                    4030              RTS
00003BB8                          4031             
00003BB8  B63C 0002               4032              CMP.B       #$2,D3
00003BBC  6600 F6C2               4033              BNE         FO_CMP_3 
00003BC0  4EB9 000042C4           4034              JSR         FOURTH_2
00003BC6  4E75                    4035              RTS
00003BC8                          4036              
00003BC8  B63C 0003               4037              CMP.B       #$3,D3
00003BCC  6600 F6C2               4038              BNE         FO_CMP_4
00003BD0  4EB9 000042C6           4039              JSR         FOURTH_3 
00003BD6  4E75                    4040              RTS
00003BD8                          4041             
00003BD8  B63C 0004               4042              CMP.B       #$4,D3
00003BDC  6600 F6C2               4043              BNE         FO_CMP_5
00003BE0  4EB9 000042C8           4044              JSR         FOURTH_4
00003BE6  4E75                    4045              RTS
00003BE8                          4046              
00003BE8  B63C 0005               4047              CMP.B       #$5,D3
00003BEC  6600 F6C2               4048              BNE         FO_CMP_6
00003BF0  4EB9 000042CA           4049              JSR         FOURTH_5
00003BF6  4E75                    4050              RTS
00003BF8                          4051              
00003BF8  B63C 0006               4052              CMP.B       #$6,D3
00003BFC  6600 F6C2               4053              BNE         FO_CMP_7
00003C00  4EB9 000042CC           4054              JSR         FOURTH_6
00003C06  4E75                    4055              RTS
00003C08                          4056              
00003C08  B63C 0007               4057              CMP.B       #$7,D3
00003C0C  6600 F6C2               4058              BNE         FO_CMP_8
00003C10  4EB9 000042CE           4059              JSR         FOURTH_7
00003C16  4E75                    4060              RTS
00003C18                          4061              
00003C18  B63C 0008               4062              CMP.B       #$8,D3
00003C1C  6600 F6C2               4063              BNE         FO_CMP_9
00003C20  4EB9 000042D0           4064              JSR         FOURTH_8
00003C26  4E75                    4065              RTS
00003C28                          4066              
00003C28  B63C 0009               4067              CMP.B       #$9,D3
00003C2C  6600 F6C2               4068              BNE         FO_CMP_A
00003C30  4EB9 000042D2           4069              JSR         FOURTH_9
00003C36  4E75                    4070              RTS
00003C38                          4071              
00003C38  B63C 000A               4072              CMP.B       #$A,D3
00003C3C  6600 F6C2               4073              BNE         FO_CMP_B
00003C40  4EB9 000042D4           4074              JSR         FOURTH_A
00003C46  4E75                    4075              RTS
00003C48                          4076              
00003C48  B63C 000B               4077              CMP.B       #$B,D3
00003C4C  6600 F6C2               4078              BNE         FO_CMP_C
00003C50  4EB9 000042D6           4079              JSR         FOURTH_B
00003C56  4E75                    4080              RTS
00003C58                          4081              
00003C58  B63C 000C               4082              CMP.B       #$C,D3
00003C5C  6600 F6C2               4083              BNE         FO_CMP_D
00003C60  4EB9 000042D8           4084              JSR         FOURTH_C
00003C66  4E75                    4085              RTS
00003C68                          4086              
00003C68  B63C 000D               4087              CMP.B       #$D,D3
00003C6C  6600 F6C2               4088              BNE         FO_CMP_E
00003C70  4EB9 000042DA           4089              JSR         FOURTH_D
00003C76  4E75                    4090              RTS
00003C78                          4091              
00003C78  B63C 000E               4092              CMP.B       #$E,D3
00003C7C  6600 F6C2               4093              BNE         FO_CMP_F
00003C80  4EB9 000042DC           4094              JSR         FOURTH_E                 
00003C86  4E75                    4095              RTS
00003C88                          4096              
00003C88  4EB9 000042DE           4097              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003C8E  4E75                    4098              RTS
00003C90                          4099  
00003C90                          4100  
00003C90                          4101  *------------------------Third_A---------------------------
00003C90                          4102  *Purpose: Third_A is a subroutine of IDENTIFY. If Third_A is branched to, that means the third
00003C90                          4103  *         four digits of the machine code are 1010.
00003C90                          4104  *         Possible instructions are: MOVE, MOVEM, MOVEQ, ADD, 
00003C90                          4105  *                                    ADDA, ADDI, ADDQ, SUB,
00003C90                          4106  *                                    AND, OR, LSL/LSR R,
00003C90                          4107  *                                    ASL/ASR R, Bcc, JSR,
00003C90                          4108  *                                    Bcc, BRA
00003C90                          4109  *----------------------------------------------------------- 
00003C90  2407                    4110  THIRD_A     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003C92  123C 000C               4111              MOVE.B      #12,D1      *Moves 68 into D1
00003C96  E3AA                    4112              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003C98  123C 0044               4113              MOVE.B      #68,D1      *Moves 68 into D1
00003C9C  E2AA                    4114              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003C9E  D602                    4115              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003CA0                          4116              
00003CA0  B63C 0000               4117              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003CA4  6600 F5BA               4118              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003CA8  4EB9 000042C0           4119              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003CAE  4E75                    4120              RTS
00003CB0                          4121              
00003CB0  B63C 0001               4122              CMP.B       #$1,D3
00003CB4  6600 F5BA               4123              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003CB8  4EB9 000042C2           4124              JSR         FOURTH_1 
00003CBE  4E75                    4125              RTS
00003CC0                          4126             
00003CC0  B63C 0002               4127              CMP.B       #$2,D3
00003CC4  6600 F5BA               4128              BNE         FO_CMP_3 
00003CC8  4EB9 000042C4           4129              JSR         FOURTH_2
00003CCE  4E75                    4130              RTS
00003CD0                          4131              
00003CD0  B63C 0003               4132              CMP.B       #$3,D3
00003CD4  6600 F5BA               4133              BNE         FO_CMP_4
00003CD8  4EB9 000042C6           4134              JSR         FOURTH_3 
00003CDE  4E75                    4135              RTS
00003CE0                          4136             
00003CE0  B63C 0004               4137              CMP.B       #$4,D3
00003CE4  6600 F5BA               4138              BNE         FO_CMP_5
00003CE8  4EB9 000042C8           4139              JSR         FOURTH_4
00003CEE  4E75                    4140              RTS
00003CF0                          4141              
00003CF0  B63C 0005               4142              CMP.B       #$5,D3
00003CF4  6600 F5BA               4143              BNE         FO_CMP_6
00003CF8  4EB9 000042CA           4144              JSR         FOURTH_5
00003CFE  4E75                    4145              RTS
00003D00                          4146              
00003D00  B63C 0006               4147              CMP.B       #$6,D3
00003D04  6600 F5BA               4148              BNE         FO_CMP_7
00003D08  4EB9 000042CC           4149              JSR         FOURTH_6
00003D0E  4E75                    4150              RTS
00003D10                          4151              
00003D10  B63C 0007               4152              CMP.B       #$7,D3
00003D14  6600 F5BA               4153              BNE         FO_CMP_8
00003D18  4EB9 000042CE           4154              JSR         FOURTH_7
00003D1E  4E75                    4155              RTS
00003D20                          4156              
00003D20  B63C 0008               4157              CMP.B       #$8,D3
00003D24  6600 F5BA               4158              BNE         FO_CMP_9
00003D28  4EB9 000042D0           4159              JSR         FOURTH_8
00003D2E  4E75                    4160              RTS
00003D30                          4161              
00003D30  B63C 0009               4162              CMP.B       #$9,D3
00003D34  6600 F5BA               4163              BNE         FO_CMP_A
00003D38  4EB9 000042D2           4164              JSR         FOURTH_9
00003D3E  4E75                    4165              RTS
00003D40                          4166              
00003D40  B63C 000A               4167              CMP.B       #$A,D3
00003D44  6600 F5BA               4168              BNE         FO_CMP_B
00003D48  4EB9 000042D4           4169              JSR         FOURTH_A
00003D4E  4E75                    4170              RTS
00003D50                          4171              
00003D50  B63C 000B               4172              CMP.B       #$B,D3
00003D54  6600 F5BA               4173              BNE         FO_CMP_C
00003D58  4EB9 000042D6           4174              JSR         FOURTH_B
00003D5E  4E75                    4175              RTS
00003D60                          4176              
00003D60  B63C 000C               4177              CMP.B       #$C,D3
00003D64  6600 F5BA               4178              BNE         FO_CMP_D
00003D68  4EB9 000042D8           4179              JSR         FOURTH_C
00003D6E  4E75                    4180              RTS
00003D70                          4181              
00003D70  B63C 000D               4182              CMP.B       #$D,D3
00003D74  6600 F5BA               4183              BNE         FO_CMP_E
00003D78  4EB9 000042DA           4184              JSR         FOURTH_D
00003D7E  4E75                    4185              RTS
00003D80                          4186              
00003D80  B63C 000E               4187              CMP.B       #$E,D3
00003D84  6600 F5BA               4188              BNE         FO_CMP_F
00003D88  4EB9 000042DC           4189              JSR         FOURTH_E                 
00003D8E  4E75                    4190              RTS
00003D90                          4191              
00003D90  4EB9 000042DE           4192              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003D96  4E75                    4193              RTS
00003D98                          4194  
00003D98                          4195  
00003D98                          4196  *------------------------Third_B---------------------------
00003D98                          4197  *Purpose: Third_B is a subroutine of IDENTIFY. If Third_B is branched to, that means the third
00003D98                          4198  *         four digits of the machine code are 1011.
00003D98                          4199  *         Possible instructions are: MOVE, MOVEM, MOVEQ, 
00003D98                          4200  *                                    ADD, ADDA, ADDI, ADDQ, 
00003D98                          4201  *                                    SUB,
00003D98                          4202  *                                    AND, OR, ROL/ROR R,
00003D98                          4203  *                                    Bcc, JSR, Bcc, BRA
00003D98                          4204  *----------------------------------------------------------- 
00003D98  2407                    4205  THIRD_B     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003D9A  123C 000C               4206              MOVE.B      #12,D1      *Moves 68 into D1
00003D9E  E3AA                    4207              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003DA0  123C 0044               4208              MOVE.B      #68,D1      *Moves 68 into D1
00003DA4  E2AA                    4209              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003DA6  D602                    4210              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003DA8                          4211              
00003DA8  B63C 0000               4212              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003DAC  6600 F4B2               4213              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003DB0  4EB9 000042C0           4214              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003DB6  4E75                    4215              RTS
00003DB8                          4216              
00003DB8  B63C 0001               4217              CMP.B       #$1,D3
00003DBC  6600 F4B2               4218              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003DC0  4EB9 000042C2           4219              JSR         FOURTH_1 
00003DC6  4E75                    4220              RTS
00003DC8                          4221             
00003DC8  B63C 0002               4222              CMP.B       #$2,D3
00003DCC  6600 F4B2               4223              BNE         FO_CMP_3 
00003DD0  4EB9 000042C4           4224              JSR         FOURTH_2
00003DD6  4E75                    4225              RTS
00003DD8                          4226              
00003DD8  B63C 0003               4227              CMP.B       #$3,D3
00003DDC  6600 F4B2               4228              BNE         FO_CMP_4
00003DE0  4EB9 000042C6           4229              JSR         FOURTH_3 
00003DE6  4E75                    4230              RTS
00003DE8                          4231             
00003DE8  B63C 0004               4232              CMP.B       #$4,D3
00003DEC  6600 F4B2               4233              BNE         FO_CMP_5
00003DF0  4EB9 000042C8           4234              JSR         FOURTH_4
00003DF6  4E75                    4235              RTS
00003DF8                          4236              
00003DF8  B63C 0005               4237              CMP.B       #$5,D3
00003DFC  6600 F4B2               4238              BNE         FO_CMP_6
00003E00  4EB9 000042CA           4239              JSR         FOURTH_5
00003E06  4E75                    4240              RTS
00003E08                          4241              
00003E08  B63C 0006               4242              CMP.B       #$6,D3
00003E0C  6600 F4B2               4243              BNE         FO_CMP_7
00003E10  4EB9 000042CC           4244              JSR         FOURTH_6
00003E16  4E75                    4245              RTS
00003E18                          4246              
00003E18  B63C 0007               4247              CMP.B       #$7,D3
00003E1C  6600 F4B2               4248              BNE         FO_CMP_8
00003E20  4EB9 000042CE           4249              JSR         FOURTH_7
00003E26  4E75                    4250              RTS
00003E28                          4251              
00003E28  B63C 0008               4252              CMP.B       #$8,D3
00003E2C  6600 F4B2               4253              BNE         FO_CMP_9
00003E30  4EB9 000042D0           4254              JSR         FOURTH_8
00003E36  4E75                    4255              RTS
00003E38                          4256              
00003E38  B63C 0009               4257              CMP.B       #$9,D3
00003E3C  6600 F4B2               4258              BNE         FO_CMP_A
00003E40  4EB9 000042D2           4259              JSR         FOURTH_9
00003E46  4E75                    4260              RTS
00003E48                          4261              
00003E48  B63C 000A               4262              CMP.B       #$A,D3
00003E4C  6600 F4B2               4263              BNE         FO_CMP_B
00003E50  4EB9 000042D4           4264              JSR         FOURTH_A
00003E56  4E75                    4265              RTS
00003E58                          4266              
00003E58  B63C 000B               4267              CMP.B       #$B,D3
00003E5C  6600 F4B2               4268              BNE         FO_CMP_C
00003E60  4EB9 000042D6           4269              JSR         FOURTH_B
00003E66  4E75                    4270              RTS
00003E68                          4271              
00003E68  B63C 000C               4272              CMP.B       #$C,D3
00003E6C  6600 F4B2               4273              BNE         FO_CMP_D
00003E70  4EB9 000042D8           4274              JSR         FOURTH_C
00003E76  4E75                    4275              RTS
00003E78                          4276              
00003E78  B63C 000D               4277              CMP.B       #$D,D3
00003E7C  6600 F4B2               4278              BNE         FO_CMP_E
00003E80  4EB9 000042DA           4279              JSR         FOURTH_D
00003E86  4E75                    4280              RTS
00003E88                          4281              
00003E88  B63C 000E               4282              CMP.B       #$E,D3
00003E8C  6600 F4B2               4283              BNE         FO_CMP_F
00003E90  4EB9 000042DC           4284              JSR         FOURTH_E                 
00003E96  4E75                    4285              RTS
00003E98                          4286              
00003E98  4EB9 000042DE           4287              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003E9E  4E75                    4288              RTS
00003EA0                          4289  
00003EA0                          4290  
00003EA0                          4291  *------------------------Third_C---------------------------
00003EA0                          4292  *Purpose: Third_C is a subroutine of IDENTIFY. If Third_C is branched to, that means the third
00003EA0                          4293  *         four digits of the machine code are 1100.
00003EA0                          4294  *         Possible instructions are: MOVE, MOVEQ, MOVEM,
00003EA0                          4295  *                                    ADD, ADDA, ADDI, ADDQ,
00003EA0                          4296  *                                    SUB, SUBI, MULS, DIVU,
00003EA0                          4297  *                                    LEA, AND, OR,
00003EA0                          4298  *                                    LSL/LSR R, LSL/LSR M,
00003EA0                          4299  *                                    ASL/ASR R, ASL/ASR M,
00003EA0                          4300  *                                    ROL/ROR M, Bcc, BRA
00003EA0                          4301  *----------------------------------------------------------- 
00003EA0  2407                    4302  THIRD_C     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003EA2  123C 000C               4303              MOVE.B      #12,D1      *Moves 68 into D1
00003EA6  E3AA                    4304              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003EA8  123C 0044               4305              MOVE.B      #68,D1      *Moves 68 into D1
00003EAC  E2AA                    4306              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003EAE  D602                    4307              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003EB0                          4308              
00003EB0  B63C 0000               4309              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003EB4  6600 F3AA               4310              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003EB8  4EB9 000042C0           4311              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003EBE  4E75                    4312              RTS
00003EC0                          4313              
00003EC0  B63C 0001               4314              CMP.B       #$1,D3
00003EC4  6600 F3AA               4315              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003EC8  4EB9 000042C2           4316              JSR         FOURTH_1 
00003ECE  4E75                    4317              RTS
00003ED0                          4318             
00003ED0  B63C 0002               4319              CMP.B       #$2,D3
00003ED4  6600 F3AA               4320              BNE         FO_CMP_3 
00003ED8  4EB9 000042C4           4321              JSR         FOURTH_2
00003EDE  4E75                    4322              RTS
00003EE0                          4323              
00003EE0  B63C 0003               4324              CMP.B       #$3,D3
00003EE4  6600 F3AA               4325              BNE         FO_CMP_4
00003EE8  4EB9 000042C6           4326              JSR         FOURTH_3 
00003EEE  4E75                    4327              RTS
00003EF0                          4328             
00003EF0  B63C 0004               4329              CMP.B       #$4,D3
00003EF4  6600 F3AA               4330              BNE         FO_CMP_5
00003EF8  4EB9 000042C8           4331              JSR         FOURTH_4
00003EFE  4E75                    4332              RTS
00003F00                          4333              
00003F00  B63C 0005               4334              CMP.B       #$5,D3
00003F04  6600 F3AA               4335              BNE         FO_CMP_6
00003F08  4EB9 000042CA           4336              JSR         FOURTH_5
00003F0E  4E75                    4337              RTS
00003F10                          4338              
00003F10  B63C 0006               4339              CMP.B       #$6,D3
00003F14  6600 F3AA               4340              BNE         FO_CMP_7
00003F18  4EB9 000042CC           4341              JSR         FOURTH_6
00003F1E  4E75                    4342              RTS
00003F20                          4343              
00003F20  B63C 0007               4344              CMP.B       #$7,D3
00003F24  6600 F3AA               4345              BNE         FO_CMP_8
00003F28  4EB9 000042CE           4346              JSR         FOURTH_7
00003F2E  4E75                    4347              RTS
00003F30                          4348              
00003F30  B63C 0008               4349              CMP.B       #$8,D3
00003F34  6600 F3AA               4350              BNE         FO_CMP_9
00003F38  4EB9 000042D0           4351              JSR         FOURTH_8
00003F3E  4E75                    4352              RTS
00003F40                          4353              
00003F40  B63C 0009               4354              CMP.B       #$9,D3
00003F44  6600 F3AA               4355              BNE         FO_CMP_A
00003F48  4EB9 000042D2           4356              JSR         FOURTH_9
00003F4E  4E75                    4357              RTS
00003F50                          4358              
00003F50  B63C 000A               4359              CMP.B       #$A,D3
00003F54  6600 F3AA               4360              BNE         FO_CMP_B
00003F58  4EB9 000042D4           4361              JSR         FOURTH_A
00003F5E  4E75                    4362              RTS
00003F60                          4363              
00003F60  B63C 000B               4364              CMP.B       #$B,D3
00003F64  6600 F3AA               4365              BNE         FO_CMP_C
00003F68  4EB9 000042D6           4366              JSR         FOURTH_B
00003F6E  4E75                    4367              RTS
00003F70                          4368              
00003F70  B63C 000C               4369              CMP.B       #$C,D3
00003F74  6600 F3AA               4370              BNE         FO_CMP_D
00003F78  4EB9 000042D8           4371              JSR         FOURTH_C
00003F7E  4E75                    4372              RTS
00003F80                          4373              
00003F80  B63C 000D               4374              CMP.B       #$D,D3
00003F84  6600 F3AA               4375              BNE         FO_CMP_E
00003F88  4EB9 000042DA           4376              JSR         FOURTH_D
00003F8E  4E75                    4377              RTS
00003F90                          4378              
00003F90  B63C 000E               4379              CMP.B       #$E,D3
00003F94  6600 F3AA               4380              BNE         FO_CMP_F
00003F98  4EB9 000042DC           4381              JSR         FOURTH_E                 
00003F9E  4E75                    4382              RTS
00003FA0                          4383              
00003FA0  4EB9 000042DE           4384              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
00003FA6  4E75                    4385              RTS
00003FA8                          4386  
00003FA8                          4387  
00003FA8                          4388  *------------------------Third_D---------------------------
00003FA8                          4389  *Purpose: Third_D is a subroutine of IDENTIFY. If Third_D is branched to, that means the third
00003FA8                          4390  *         four digits of the machine code are 1101.
00003FA8                          4391  *         Possible instructions are: MOVE, MOVEQ, MOVEM,
00003FA8                          4392  *                                    ADD, ADDA, ADDI, ADDQ,
00003FA8                          4393  *                                    SUB, SUBI, MULS, DIVU,
00003FA8                          4394  *                                    LEA, AND, OR,
00003FA8                          4395  *                                    ROL/ROR R, ROL/ROR M, 
00003FA8                          4396  *                                    Bcc, BRA
00003FA8                          4397  *----------------------------------------------------------- 
00003FA8  2407                    4398  THIRD_D     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
00003FAA  123C 000C               4399              MOVE.B      #12,D1      *Moves 68 into D1
00003FAE  E3AA                    4400              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
00003FB0  123C 0044               4401              MOVE.B      #68,D1      *Moves 68 into D1
00003FB4  E2AA                    4402              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
00003FB6  D602                    4403              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
00003FB8                          4404              
00003FB8  B63C 0000               4405              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
00003FBC  6600 F2A2               4406              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
00003FC0  4EB9 000042C0           4407              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
00003FC6  4E75                    4408              RTS
00003FC8                          4409              
00003FC8  B63C 0001               4410              CMP.B       #$1,D3
00003FCC  6600 F2A2               4411              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
00003FD0  4EB9 000042C2           4412              JSR         FOURTH_1 
00003FD6  4E75                    4413              RTS
00003FD8                          4414             
00003FD8  B63C 0002               4415              CMP.B       #$2,D3
00003FDC  6600 F2A2               4416              BNE         FO_CMP_3 
00003FE0  4EB9 000042C4           4417              JSR         FOURTH_2
00003FE6  4E75                    4418              RTS
00003FE8                          4419              
00003FE8  B63C 0003               4420              CMP.B       #$3,D3
00003FEC  6600 F2A2               4421              BNE         FO_CMP_4
00003FF0  4EB9 000042C6           4422              JSR         FOURTH_3 
00003FF6  4E75                    4423              RTS
00003FF8                          4424             
00003FF8  B63C 0004               4425              CMP.B       #$4,D3
00003FFC  6600 F2A2               4426              BNE         FO_CMP_5
00004000  4EB9 000042C8           4427              JSR         FOURTH_4
00004006  4E75                    4428              RTS
00004008                          4429              
00004008  B63C 0005               4430              CMP.B       #$5,D3
0000400C  6600 F2A2               4431              BNE         FO_CMP_6
00004010  4EB9 000042CA           4432              JSR         FOURTH_5
00004016  4E75                    4433              RTS
00004018                          4434              
00004018  B63C 0006               4435              CMP.B       #$6,D3
0000401C  6600 F2A2               4436              BNE         FO_CMP_7
00004020  4EB9 000042CC           4437              JSR         FOURTH_6
00004026  4E75                    4438              RTS
00004028                          4439              
00004028  B63C 0007               4440              CMP.B       #$7,D3
0000402C  6600 F2A2               4441              BNE         FO_CMP_8
00004030  4EB9 000042CE           4442              JSR         FOURTH_7
00004036  4E75                    4443              RTS
00004038                          4444              
00004038  B63C 0008               4445              CMP.B       #$8,D3
0000403C  6600 F2A2               4446              BNE         FO_CMP_9
00004040  4EB9 000042D0           4447              JSR         FOURTH_8
00004046  4E75                    4448              RTS
00004048                          4449              
00004048  B63C 0009               4450              CMP.B       #$9,D3
0000404C  6600 F2A2               4451              BNE         FO_CMP_A
00004050  4EB9 000042D2           4452              JSR         FOURTH_9
00004056  4E75                    4453              RTS
00004058                          4454              
00004058  B63C 000A               4455              CMP.B       #$A,D3
0000405C  6600 F2A2               4456              BNE         FO_CMP_B
00004060  4EB9 000042D4           4457              JSR         FOURTH_A
00004066  4E75                    4458              RTS
00004068                          4459              
00004068  B63C 000B               4460              CMP.B       #$B,D3
0000406C  6600 F2A2               4461              BNE         FO_CMP_C
00004070  4EB9 000042D6           4462              JSR         FOURTH_B
00004076  4E75                    4463              RTS
00004078                          4464              
00004078  B63C 000C               4465              CMP.B       #$C,D3
0000407C  6600 F2A2               4466              BNE         FO_CMP_D
00004080  4EB9 000042D8           4467              JSR         FOURTH_C
00004086  4E75                    4468              RTS
00004088                          4469              
00004088  B63C 000D               4470              CMP.B       #$D,D3
0000408C  6600 F2A2               4471              BNE         FO_CMP_E
00004090  4EB9 000042DA           4472              JSR         FOURTH_D
00004096  4E75                    4473              RTS
00004098                          4474              
00004098  B63C 000E               4475              CMP.B       #$E,D3
0000409C  6600 F2A2               4476              BNE         FO_CMP_F
000040A0  4EB9 000042DC           4477              JSR         FOURTH_E                 
000040A6  4E75                    4478              RTS
000040A8                          4479              
000040A8  4EB9 000042DE           4480              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000040AE  4E75                    4481              RTS
000040B0                          4482  
000040B0                          4483  
000040B0                          4484  *------------------------Third_E---------------------------
000040B0                          4485  *Purpose: Third_E is a subroutine of IDENTIFY. If Third_E is branched to, that means the third
000040B0                          4486  *         four digits of the machine code are 1110.
000040B0                          4487  *         Possible instructions are: MOVE, MOVEQ, MOVEM,
000040B0                          4488  *                                    ADD, ADDA, ADDI, ADDQ,
000040B0                          4489  *                                    SUB, SUBI, MULS, DIVU,
000040B0                          4490  *                                    LEA, AND, OR,
000040B0                          4491  *                                    LSL/LSR R, LSL/LSR M,
000040B0                          4492  *                                    ASL/ASR R, ASL/ASR M,
000040B0                          4493  *                                    ROL/ROR M, Bcc, BRA
000040B0                          4494  *----------------------------------------------------------- 
000040B0  2407                    4495  THIRD_E     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000040B2  123C 000C               4496              MOVE.B      #12,D1      *Moves 68 into D1
000040B6  E3AA                    4497              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
000040B8  123C 0044               4498              MOVE.B      #68,D1      *Moves 68 into D1
000040BC  E2AA                    4499              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
000040BE  D602                    4500              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000040C0                          4501              
000040C0  B63C 0000               4502              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000040C4  6600 F19A               4503              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
000040C8  4EB9 000042C0           4504              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
000040CE  4E75                    4505              RTS
000040D0                          4506              
000040D0  B63C 0001               4507              CMP.B       #$1,D3
000040D4  6600 F19A               4508              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000040D8  4EB9 000042C2           4509              JSR         FOURTH_1 
000040DE  4E75                    4510              RTS
000040E0                          4511             
000040E0  B63C 0002               4512              CMP.B       #$2,D3
000040E4  6600 F19A               4513              BNE         FO_CMP_3 
000040E8  4EB9 000042C4           4514              JSR         FOURTH_2
000040EE  4E75                    4515              RTS
000040F0                          4516              
000040F0  B63C 0003               4517              CMP.B       #$3,D3
000040F4  6600 F19A               4518              BNE         FO_CMP_4
000040F8  4EB9 000042C6           4519              JSR         FOURTH_3 
000040FE  4E75                    4520              RTS
00004100                          4521             
00004100  B63C 0004               4522              CMP.B       #$4,D3
00004104  6600 F19A               4523              BNE         FO_CMP_5
00004108  4EB9 000042C8           4524              JSR         FOURTH_4
0000410E  4E75                    4525              RTS
00004110                          4526              
00004110  B63C 0005               4527              CMP.B       #$5,D3
00004114  6600 F19A               4528              BNE         FO_CMP_6
00004118  4EB9 000042CA           4529              JSR         FOURTH_5
0000411E  4E75                    4530              RTS
00004120                          4531              
00004120  B63C 0006               4532              CMP.B       #$6,D3
00004124  6600 F19A               4533              BNE         FO_CMP_7
00004128  4EB9 000042CC           4534              JSR         FOURTH_6
0000412E  4E75                    4535              RTS
00004130                          4536              
00004130  B63C 0007               4537              CMP.B       #$7,D3
00004134  6600 F19A               4538              BNE         FO_CMP_8
00004138  4EB9 000042CE           4539              JSR         FOURTH_7
0000413E  4E75                    4540              RTS
00004140                          4541              
00004140  B63C 0008               4542              CMP.B       #$8,D3
00004144  6600 F19A               4543              BNE         FO_CMP_9
00004148  4EB9 000042D0           4544              JSR         FOURTH_8
0000414E  4E75                    4545              RTS
00004150                          4546              
00004150  B63C 0009               4547              CMP.B       #$9,D3
00004154  6600 F19A               4548              BNE         FO_CMP_A
00004158  4EB9 000042D2           4549              JSR         FOURTH_9
0000415E  4E75                    4550              RTS
00004160                          4551              
00004160  B63C 000A               4552              CMP.B       #$A,D3
00004164  6600 F19A               4553              BNE         FO_CMP_B
00004168  4EB9 000042D4           4554              JSR         FOURTH_A
0000416E  4E75                    4555              RTS
00004170                          4556              
00004170  B63C 000B               4557              CMP.B       #$B,D3
00004174  6600 F19A               4558              BNE         FO_CMP_C
00004178  4EB9 000042D6           4559              JSR         FOURTH_B
0000417E  4E75                    4560              RTS
00004180                          4561              
00004180  B63C 000C               4562              CMP.B       #$C,D3
00004184  6600 F19A               4563              BNE         FO_CMP_D
00004188  4EB9 000042D8           4564              JSR         FOURTH_C
0000418E  4E75                    4565              RTS
00004190                          4566              
00004190  B63C 000D               4567              CMP.B       #$D,D3
00004194  6600 F19A               4568              BNE         FO_CMP_E
00004198  4EB9 000042DA           4569              JSR         FOURTH_D
0000419E  4E75                    4570              RTS
000041A0                          4571              
000041A0  B63C 000E               4572              CMP.B       #$E,D3
000041A4  6600 F19A               4573              BNE         FO_CMP_F
000041A8  4EB9 000042DC           4574              JSR         FOURTH_E                 
000041AE  4E75                    4575              RTS
000041B0                          4576              
000041B0  4EB9 000042DE           4577              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000041B6  4E75                    4578              RTS
000041B8                          4579  
000041B8                          4580      
000041B8                          4581  *------------------------Third_F---------------------------
000041B8                          4582  *Purpose: Third_F is a subroutine of IDENTIFY. If Third_F is branched to, that means the third
000041B8                          4583  *         four digits of the machine code are 1111.
000041B8                          4584  *         Possible instructions are: MOVE, MOVEQ, MOVEM,
000041B8                          4585  *                                    ADD, ADDA, ADDI, ADDQ,
000041B8                          4586  *                                    SUB, SUBI, MULS, DIVU,
000041B8                          4587  *                                    LEA, AND, OR,
000041B8                          4588  *                                    ROL/ROR R, ROL/ROR M, 
000041B8                          4589  *                                    Bcc, BRA
000041B8                          4590  *----------------------------------------------------------- 
000041B8  2407                    4591  THIRD_F     MOVE.L      D7,D2       *Copies D7 contents to D2 for manipulation
000041BA  123C 000C               4592              MOVE.B      #12,D1      *Moves 68 into D1
000041BE  E3AA                    4593              LSL.L       D1,D2       *Shifts 12 bits so gets rid of leftmost 3 bytes
000041C0  123C 0044               4594              MOVE.B      #68,D1      *Moves 68 into D1
000041C4  E2AA                    4595              LSR.L       D1,D2       *Shifts 68 bits so the remaining contents = the left 4 bits of D7
000041C6  D602                    4596              ADD.B       D2,D3       *Copies those 4 bits (ie leftmost 4 bits of D7) into D3
000041C8                          4597              
000041C8  B63C 0000               4598              CMP.B       #$0,D3      *Following section determines what hex value the first 4 digits are
000041CC  6600 F092               4599              BNE         FO_CMP_1     *If the first hex value is not 0, branch and see if its 1
000041D0  4EB9 000042C0           4600              JSR         FOURTH_0     *If the first hex value is 0, jump to Fourth_0
000041D6  4E75                    4601              RTS
000041D8                          4602              
000041D8  B63C 0001               4603              CMP.B       #$1,D3
000041DC  6600 F092               4604              BNE         FO_CMP_2     *If the first hex value is not 2, branch and see if its 3, and so on
000041E0  4EB9 000042C2           4605              JSR         FOURTH_1 
000041E6  4E75                    4606              RTS
000041E8                          4607             
000041E8  B63C 0002               4608              CMP.B       #$2,D3
000041EC  6600 F092               4609              BNE         FO_CMP_3 
000041F0  4EB9 000042C4           4610              JSR         FOURTH_2
000041F6  4E75                    4611              RTS
000041F8                          4612              
000041F8  B63C 0003               4613              CMP.B       #$3,D3
000041FC  6600 F092               4614              BNE         FO_CMP_4
00004200  4EB9 000042C6           4615              JSR         FOURTH_3 
00004206  4E75                    4616              RTS
00004208                          4617             
00004208  B63C 0004               4618              CMP.B       #$4,D3
0000420C  6600 F092               4619              BNE         FO_CMP_5
00004210  4EB9 000042C8           4620              JSR         FOURTH_4
00004216  4E75                    4621              RTS
00004218                          4622              
00004218  B63C 0005               4623              CMP.B       #$5,D3
0000421C  6600 F092               4624              BNE         FO_CMP_6
00004220  4EB9 000042CA           4625              JSR         FOURTH_5
00004226  4E75                    4626              RTS
00004228                          4627              
00004228  B63C 0006               4628              CMP.B       #$6,D3
0000422C  6600 F092               4629              BNE         FO_CMP_7
00004230  4EB9 000042CC           4630              JSR         FOURTH_6
00004236  4E75                    4631              RTS
00004238                          4632              
00004238  B63C 0007               4633              CMP.B       #$7,D3
0000423C  6600 F092               4634              BNE         FO_CMP_8
00004240  4EB9 000042CE           4635              JSR         FOURTH_7
00004246  4E75                    4636              RTS
00004248                          4637              
00004248  B63C 0008               4638              CMP.B       #$8,D3
0000424C  6600 F092               4639              BNE         FO_CMP_9
00004250  4EB9 000042D0           4640              JSR         FOURTH_8
00004256  4E75                    4641              RTS
00004258                          4642              
00004258  B63C 0009               4643              CMP.B       #$9,D3
0000425C  6600 F092               4644              BNE         FO_CMP_A
00004260  4EB9 000042D2           4645              JSR         FOURTH_9
00004266  4E75                    4646              RTS
00004268                          4647              
00004268  B63C 000A               4648              CMP.B       #$A,D3
0000426C  6600 F092               4649              BNE         FO_CMP_B
00004270  4EB9 000042D4           4650              JSR         FOURTH_A
00004276  4E75                    4651              RTS
00004278                          4652              
00004278  B63C 000B               4653              CMP.B       #$B,D3
0000427C  6600 F092               4654              BNE         FO_CMP_C
00004280  4EB9 000042D6           4655              JSR         FOURTH_B
00004286  4E75                    4656              RTS
00004288                          4657              
00004288  B63C 000C               4658              CMP.B       #$C,D3
0000428C  6600 F092               4659              BNE         FO_CMP_D
00004290  4EB9 000042D8           4660              JSR         FOURTH_C
00004296  4E75                    4661              RTS
00004298                          4662              
00004298  B63C 000D               4663              CMP.B       #$D,D3
0000429C  6600 F092               4664              BNE         FO_CMP_E
000042A0  4EB9 000042DA           4665              JSR         FOURTH_D
000042A6  4E75                    4666              RTS
000042A8                          4667              
000042A8  B63C 000E               4668              CMP.B       #$E,D3
000042AC  6600 F092               4669              BNE         FO_CMP_F
000042B0  4EB9 000042DC           4670              JSR         FOURTH_E                 
000042B6  4E75                    4671              RTS
000042B8                          4672              
000042B8  4EB9 000042DE           4673              JSR         FOURTH_F     *If first hex value is not 0-E, it must be F. Branch to Second_F
000042BE  4E75                    4674              RTS
000042C0                          4675  
000042C0                          4676  *------------------------Fourth_0---------------------------
000042C0                          4677  *Purpose: Fourth_0 is a subroutine of IDENTIFY. If Fourth_0 is branched to, that means the fourth
000042C0                          4678  *         four digits of the machine code are 0000.
000042C0                          4679  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042C0                          4680  *                                    MOVEM, ADD, ADDA, ADDI,
000042C0                          4681  *                                    ADDQ, SUB, SUBI, MULS,
000042C0                          4682  *                                    DIVU, LEA, AND, OR,
000042C0                          4683  *                                    LSL/LSR M, ASL/ASR R,
000042C0                          4684  *                                    ASL/ASR M, ROL/ROR M,
000042C0                          4685  *                                    Bcc, JSR, BRA
000042C0                          4686  *-----------------------------------------------------------             
000042C0  4E75                    4687  FOURTH_0    RTS
000042C2                          4688  
000042C2                          4689  *------------------------Fourth_1---------------------------
000042C2                          4690  *Purpose: Fourth_1 is a subroutine of IDENTIFY. If Fourth_1 is branched to, that means the fourth
000042C2                          4691  *         four digits of the machine code are 0001.
000042C2                          4692  *         Possible instructions are: NOP, MOVE, MOVEA, MOVEQ,
000042C2                          4693  *                                    MOVEM, ADD, ADDA, ADDI,
000042C2                          4694  *                                    ADDQ, SUB, SUBI, MULS,
000042C2                          4695  *                                    DIVU, LEA, AND, OR,
000042C2                          4696  *                                    LSL/LSR M, ASL/ASR R,
000042C2                          4697  *                                    ASL/ASR M, ROL/ROR M,
000042C2                          4698  *                                    Bcc, JSR, BRA
000042C2                          4699  *-----------------------------------------------------------
000042C2  4E75                    4700  FOURTH_1    RTS
000042C4                          4701  
000042C4                          4702  *------------------------Fourth_2---------------------------
000042C4                          4703  *Purpose: Fourth_2 is a subroutine of IDENTIFY. If Fourth_2 is branched to, that means the fourth
000042C4                          4704  *         four digits of the machine code are 0010.
000042C4                          4705  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042C4                          4706  *                                    MOVEM, ADD, ADDA, ADDI,
000042C4                          4707  *                                    ADDQ, SUB, SUBI, MULS,
000042C4                          4708  *                                    DIVU, LEA, AND, OR,
000042C4                          4709  *                                    LSL/LSR M, ASL/ASR R,
000042C4                          4710  *                                    ASL/ASR M, ROL/ROR M,
000042C4                          4711  *                                    Bcc, JSR, BRA
000042C4                          4712  *-----------------------------------------------------------
000042C4  4E75                    4713  FOURTH_2    RTS
000042C6                          4714  
000042C6                          4715  *------------------------Fourth_3---------------------------
000042C6                          4716  *Purpose: Fourth_3 is a subroutine of IDENTIFY. If Fourth_3 is branched to, that means the fourth
000042C6                          4717  *         four digits of the machine code are 0011.
000042C6                          4718  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042C6                          4719  *                                    MOVEM, ADD, ADDA, ADDI,
000042C6                          4720  *                                    ADDQ, SUB, SUBI, MULS,
000042C6                          4721  *                                    DIVU, LEA, AND, OR,
000042C6                          4722  *                                    LSL/LSR M, ASL/ASR R,
000042C6                          4723  *                                    ASL/ASR M, ROL/ROR M,
000042C6                          4724  *                                    Bcc, JSR, BRA
000042C6                          4725  *-----------------------------------------------------------
000042C6  4E75                    4726  FOURTH_3    RTS
000042C8                          4727  
000042C8                          4728  *------------------------Fourth_4---------------------------
000042C8                          4729  *Purpose: Fourth_4 is a subroutine of IDENTIFY. If Fourth_4 is branched to, that means the fourth
000042C8                          4730  *         four digits of the machine code are 0100.
000042C8                          4731  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042C8                          4732  *                                    MOVEM, ADD, ADDA, ADDI,
000042C8                          4733  *                                    ADDQ, SUB, SUBI, MULS,
000042C8                          4734  *                                    DIVU, LEA, AND, OR,
000042C8                          4735  *                                    LSL/LSR M, ASL/ASR R,
000042C8                          4736  *                                    ASL/ASR M, ROL/ROR M,
000042C8                          4737  *                                    Bcc, JSR, BRA
000042C8                          4738  *-----------------------------------------------------------
000042C8  4E75                    4739  FOURTH_4    RTS
000042CA                          4740  
000042CA                          4741  *------------------------Fourth_5---------------------------
000042CA                          4742  *Purpose: Fourth_5 is a subroutine of IDENTIFY. If Fourth_5 is branched to, that means the fourth
000042CA                          4743  *         four digits of the machine code are 0101.
000042CA                          4744  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042CA                          4745  *                                    MOVEM, ADD, ADDA, ADDI,
000042CA                          4746  *                                    ADDQ, SUB, SUBI, MULS,
000042CA                          4747  *                                    DIVU, LEA, AND, OR,
000042CA                          4748  *                                    LSL/LSR M, ASL/ASR R,
000042CA                          4749  *                                    ASL/ASR M, ROL/ROR M,
000042CA                          4750  *                                    Bcc, JSR, RTS, BRA
000042CA                          4751  *-----------------------------------------------------------
000042CA  4E75                    4752  FOURTH_5    RTS
000042CC                          4753  
000042CC                          4754  *------------------------Fourth_6---------------------------
000042CC                          4755  *Purpose: Fourth_6 is a subroutine of IDENTIFY. If Fourth_6 is branched to, that means the fourth
000042CC                          4756  *         four digits of the machine code are 0110.
000042CC                          4757  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042CC                          4758  *                                    MOVEM, ADD, ADDA, ADDI,
000042CC                          4759  *                                    ADDQ, SUB, SUBI, MULS,
000042CC                          4760  *                                    DIVU, LEA, AND, OR,
000042CC                          4761  *                                    LSL/LSR M, ASL/ASR R,
000042CC                          4762  *                                    ASL/ASR M, ROL/ROR M,
000042CC                          4763  *                                    Bcc, JSR, BRA
000042CC                          4764  *-----------------------------------------------------------
000042CC  4E75                    4765  FOURTH_6    RTS
000042CE                          4766  
000042CE                          4767  *------------------------Fourth_7---------------------------
000042CE                          4768  *Purpose: Fourth_7 is a subroutine of IDENTIFY. If Fourth_7 is branched to, that means the fourth
000042CE                          4769  *         four digits of the machine code are 0111.
000042CE                          4770  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042CE                          4771  *                                    MOVEM, ADD, ADDA, ADDI,
000042CE                          4772  *                                    ADDQ, SUB, SUBI, MULS,
000042CE                          4773  *                                    DIVU, LEA, AND, OR,
000042CE                          4774  *                                    LSL/LSR M, ASL/ASR R,
000042CE                          4775  *                                    ASL/ASR M, ROR/ROR M,
000042CE                          4776  *                                    Bcc, JSR, BRA
000042CE                          4777  *-----------------------------------------------------------
000042CE  4E75                    4778  FOURTH_7    RTS
000042D0                          4779  
000042D0                          4780  *------------------------Fourth_8---------------------------
000042D0                          4781  *Purpose: Fourth_8 is a subroutine of IDENTIFY. If Fourth_8 is branched to, that means the fourth
000042D0                          4782  *         four digits of the machine code are 1000.
000042D0                          4783  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042D0                          4784  *                                    MOVEM, ADD, ADDA, ADDI,
000042D0                          4785  *                                    ADDQ, SUB, SUBI, MULS,
000042D0                          4786  *                                    DIVU, LEA, AND, OR,
000042D0                          4787  *                                    LSL/LSR R, LSL/LSR M,
000042D0                          4788  *                                    ASL/ASR M, ROL/ROR R, 
000042D0                          4789  *                                    ROL/ROR M,
000042D0                          4790  *                                    Bcc, JSR, BRA
000042D0                          4791  *-----------------------------------------------------------
000042D0  4E75                    4792  FOURTH_8    RTS
000042D2                          4793  
000042D2                          4794  *------------------------Fourth_9---------------------------
000042D2                          4795  *Purpose: Fourth_9 is a subroutine of IDENTIFY. If Fourth_9 is branched to, that means the fourth
000042D2                          4796  *         four digits of the machine code are 1001.
000042D2                          4797  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042D2                          4798  *                                    MOVEM, ADD, ADDA, ADDI,
000042D2                          4799  *                                    ADDQ, SUB, SUBI, MULS,
000042D2                          4800  *                                    DIVU, LEA, AND, OR,
000042D2                          4801  *                                    LSL/LSR R, LSL/LSR M,
000042D2                          4802  *                                    ASL/ASR M, ROL/ROR R, 
000042D2                          4803  *                                    ROL/ROR M,
000042D2                          4804  *                                    Bcc, JSR, BRA
000042D2                          4805  *-----------------------------------------------------------
000042D2  4E75                    4806  FOURTH_9    RTS
000042D4                          4807  
000042D4                          4808  *------------------------Fourth_A---------------------------
000042D4                          4809  *Purpose: Fourth_A is a subroutine of IDENTIFY. If Fourth_A is branched to, that means the fourth
000042D4                          4810  *         four digits of the machine code are 1010.
000042D4                          4811  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042D4                          4812  *                                    MOVEM, ADD, ADDA, ADDI,
000042D4                          4813  *                                    ADDQ, SUB, SUBI, MULS,
000042D4                          4814  *                                    DIVU, LEA, AND, OR,
000042D4                          4815  *                                    LSL/LSR R, LSL/LSR M,
000042D4                          4816  *                                    ASL/ASR M, ROL/ROR R, 
000042D4                          4817  *                                    ROL/ROR M,
000042D4                          4818  *                                    Bcc, JSR, BRA
000042D4                          4819  *-----------------------------------------------------------
000042D4  4E75                    4820  FOURTH_A    RTS
000042D6                          4821  
000042D6                          4822  *------------------------Fourth_B---------------------------
000042D6                          4823  *Purpose: Fourth_B is a subroutine of IDENTIFY. If Fourth_B is branched to, that means the fourth
000042D6                          4824  *         four digits of the machine code are 1011.
000042D6                          4825  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042D6                          4826  *                                    MOVEM, ADD, ADDA, ADDI,
000042D6                          4827  *                                    ADDQ, SUB, SUBI, MULS,
000042D6                          4828  *                                    DIVU, LEA, AND, OR,
000042D6                          4829  *                                    LSL/LSR R, LSL/LSR M,
000042D6                          4830  *                                    ASL/ASR M, ROL/ROR R, 
000042D6                          4831  *                                    ROL/ROR M,
000042D6                          4832  *                                    Bcc, JSR, BRA
000042D6                          4833  *-----------------------------------------------------------
000042D6  4E75                    4834  FOURTH_B    RTS
000042D8                          4835  
000042D8                          4836  *------------------------Fourth_C---------------------------
000042D8                          4837  *Purpose: Fourth_C is a subroutine of IDENTIFY. If Fourth_C is branched to, that means the fourth
000042D8                          4838  *         four digits of the machine code are 1100.
000042D8                          4839  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042D8                          4840  *                                    MOVEM, ADD, ADDA, ADDI,
000042D8                          4841  *                                    ADDQ, SUB, SUBI, MULS,
000042D8                          4842  *                                    DIVU, LEA, AND, OR,
000042D8                          4843  *                                    LSL/LSR R, LSL/LSR M,
000042D8                          4844  *                                    ASL/ASR M, ROL/ROR R, 
000042D8                          4845  *                                    ROL/ROR M,
000042D8                          4846  *                                    Bcc, JSR, BRA
000042D8                          4847  *-----------------------------------------------------------
000042D8  4E75                    4848  FOURTH_C    RTS
000042DA                          4849  
000042DA                          4850  *------------------------Fourth_D---------------------------
000042DA                          4851  *Purpose: Fourth_D is a subroutine of IDENTIFY. If Fourth_D is branched to, that means the fourth
000042DA                          4852  *         four digits of the machine code are 1101.
000042DA                          4853  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042DA                          4854  *                                    MOVEM, ADD, ADDA, ADDI,
000042DA                          4855  *                                    ADDQ, SUB, SUBI, MULS,
000042DA                          4856  *                                    DIVU, LEA, AND, OR,
000042DA                          4857  *                                    LSL/LSR R, LSL/LSR M,
000042DA                          4858  *                                    ASL/ASR M, ROL/ROR R, 
000042DA                          4859  *                                    ROL/ROR M,
000042DA                          4860  *                                    Bcc, JSR, BRA
000042DA                          4861  *-----------------------------------------------------------
000042DA  4E75                    4862  FOURTH_D    RTS
000042DC                          4863  
000042DC                          4864  *------------------------Fourth_E---------------------------
000042DC                          4865  *Purpose: Fourth_E is a subroutine of IDENTIFY. If Fourth_E is branched to, that means the fourth
000042DC                          4866  *         four digits of the machine code are 1110.
000042DC                          4867  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042DC                          4868  *                                    MOVEM, ADD, ADDA, ADDI,
000042DC                          4869  *                                    ADDQ, SUB, SUBI, MULS,
000042DC                          4870  *                                    DIVU, LEA, AND, OR,
000042DC                          4871  *                                    LSL/LSR R, LSL/LSR M,
000042DC                          4872  *                                    ASL/ASR M, ROL/ROR R, 
000042DC                          4873  *                                    ROL/ROR M,
000042DC                          4874  *                                    Bcc, JSR, BRA
000042DC                          4875  *-----------------------------------------------------------
000042DC  4E75                    4876  FOURTH_E    RTS
000042DE                          4877  
000042DE                          4878  *------------------------Fourth_F---------------------------
000042DE                          4879  *Purpose: Fourth_F is a subroutine of IDENTIFY. If Fourth_F is branched to, that means the fourth
000042DE                          4880  *         four digits of the machine code are 1111.
000042DE                          4881  *         Possible instructions are: MOVE, MOVEA, MOVEQ,
000042DE                          4882  *                                    MOVEM, ADD, ADDA, ADDI,
000042DE                          4883  *                                    ADDQ, SUB, SUBI, MULS,
000042DE                          4884  *                                    DIVU, LEA, AND, OR,
000042DE                          4885  *                                    LSL/LSR R, LSL/LSR M,
000042DE                          4886  *                                    ASL/ASR M, ROL/ROR R, 
000042DE                          4887  *                                    ROL/ROR M,
000042DE                          4888  *                                    Bcc, JSR, BRA
000042DE                          4889  *-----------------------------------------------------------
000042DE  4E75                    4890  FOURTH_F    RTS
000042E0                          4891  
000042E0                          4892              
000042E0                          4893  *-----------------------DONE--------------------------------
000042E0  103C 0009               4894  DONE        MOVE.B      #9,D0       *Load 9 into D0 (trap task)
000042E4  4E4F                    4895              TRAP        #15         *Halt program, Trap#15 task 9
000042E6                          4896              
000042E6                          4897  *---------------Variables and Constants---------------------
000042E6  =0000000D               4898  CR          EQU         $0D
000042E6  =0000000A               4899  LF          EQU         $0A
000042E6                          4900  
000042E6= 2D 2D 2D 2D 2D 2D ...   4901  NL_INTRO    DC.B        '------------TEAM NEVER LUCKY------------',CR,LF
00004310= 48 65 6E 72 79 20 ...   4902              DC.B        'Henry Hong, Ryan Palm, Joshua Plantilla',CR,LF
00004339= 43 53 53 20 34 32 ...   4903              DC.B        'CSS 422 Final Project: 68k Disassembler',CR,LF
00004362= 2D 2D 2D 2D 2D 2D ...   4904              DC.B        '----------------------------------------',CR,LF,0
0000438D                          4905              
0000438D= 45 6E 74 65 72 20 ...   4906  STA_MSG     DC.B        'Enter starting address (ALL CAPS):',0
000043B0= 45 6E 74 65 72 20 ...   4907  END_MSG     DC.B        'Enter ending address (ALL CAPS):',0
000043D1                          4908  
000043D1                          4909  STA_ADDR    DS.B        80
00004421                          4910  END_ADDR    DS.B        80
00004471                          4911              
00004471                          4912  
00004471                          4913              END         START       *LAST LINE

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AH_DONE             1098
ASCII_HEX           1080
CR                  D
DONE                42E0
END_ADDR            4421
END_MSG             43B0
FIRST_0             11BE
FIRST_1             12C2
FIRST_2             13C6
FIRST_3             14CA
FIRST_4             15CE
FIRST_5             16D2
FIRST_6             17D6
FIRST_7             18DA
FIRST_8             19DE
FIRST_9             1AE2
FIRST_A             1BE6
FIRST_B             1CEA
FIRST_C             1DEE
FIRST_D             1EF2
FIRST_E             1FF6
FIRST_F             20FA
FORMAT              10AE
FOURTH_0            42C0
FOURTH_1            42C2
FOURTH_2            42C4
FOURTH_3            42C6
FOURTH_4            42C8
FOURTH_5            42CA
FOURTH_6            42CC
FOURTH_7            42CE
FOURTH_8            42D0
FOURTH_9            42D2
FOURTH_A            42D4
FOURTH_B            42D6
FOURTH_C            42D8
FOURTH_D            42DA
FOURTH_E            42DC
FOURTH_F            42DE
FO_CMP_0            3250
FO_CMP_1            3260
FO_CMP_2            3270
FO_CMP_3            3280
FO_CMP_4            3290
FO_CMP_5            32A0
FO_CMP_6            32B0
FO_CMP_7            32C0
FO_CMP_8            32D0
FO_CMP_9            32E0
FO_CMP_A            32F0
FO_CMP_B            3300
FO_CMP_C            3310
FO_CMP_D            3320
FO_CMP_E            3330
FO_CMP_F            3340
F_CMP_0             10C6
F_CMP_1             10D6
F_CMP_2             10E6
F_CMP_3             10F6
F_CMP_4             1106
F_CMP_5             1116
F_CMP_6             1126
F_CMP_7             1136
F_CMP_8             1146
F_CMP_9             1156
F_CMP_A             1166
F_CMP_B             1176
F_CMP_C             1186
F_CMP_D             1196
F_CMP_E             11A6
F_CMP_F             11B6
GET_INPUT           1026
IDENTIFY            10BC
INTRO               1018
LET                 10A4
LF                  A
NL_INTRO            42E6
NUM                 109A
PROC_END            1074
PROC_STA            1068
SECOND_0            21FE
SECOND_1            2302
SECOND_2            2406
SECOND_3            250A
SECOND_4            260E
SECOND_5            2712
SECOND_6            2816
SECOND_7            291A
SECOND_8            2A1E
SECOND_9            2B22
SECOND_A            2C26
SECOND_B            2D2C
SECOND_C            2E30
SECOND_D            2F34
SECOND_E            3038
SECOND_F            313C
START               1000
STA_ADDR            43D1
STA_MSG             438D
S_CMP_0             11CA
S_CMP_1             11DA
S_CMP_2             11EA
S_CMP_3             11FA
S_CMP_4             120A
S_CMP_5             121A
S_CMP_6             122A
S_CMP_7             123A
S_CMP_8             124A
S_CMP_9             125A
S_CMP_A             126A
S_CMP_B             127A
S_CMP_C             128A
S_CMP_D             129A
S_CMP_E             12AA
S_CMP_F             12BA
THIRD_0             3240
THIRD_1             3348
THIRD_2             3450
THIRD_3             3558
THIRD_4             3660
THIRD_5             3768
THIRD_6             3870
THIRD_7             3978
THIRD_8             3A80
THIRD_9             3B88
THIRD_A             3C90
THIRD_B             3D98
THIRD_C             3EA0
THIRD_D             3FA8
THIRD_E             40B0
THIRD_F             41B8
T_CMP_0             220A
T_CMP_1             221A
T_CMP_2             222A
T_CMP_3             223A
T_CMP_4             224A
T_CMP_5             225A
T_CMP_6             226A
T_CMP_7             227A
T_CMP_8             228A
T_CMP_9             229A
T_CMP_A             22AA
T_CMP_B             22BA
T_CMP_C             22CA
T_CMP_D             22DA
T_CMP_E             22EA
T_CMP_F             22FA
