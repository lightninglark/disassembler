00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 4/25/2017 4:16:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Never Lucky Disassembler
00000000                             3  * Written by : Henry Hong, Ryan Palm, Joshua Plantilla
00000000                             4  * Date       : April 23, 2017
00000000                             5  * Description: Final Project for CSS 422. This program
00000000                             6  *              translates machine code into assembly (68k)
00000000                             7  *              language.
00000000                             8  *-----------------------------------------------------------
00000000                             9  
00001000                            10  START       ORG         $1000       *Start program
00001000  4EB9 00001012             11              JSR         INTRO       *Display Intro Message
00001006  4EB9 00001020             12              JSR         GET_INPUT   *Prompt user for input, convert input from ascii to hex and assign to sta_addr and end_addr
0000100C                            13              
0000100C                            14              *Assuming all input error checking is done before the next call
0000100C                            15              
0000100C                            16              *JSR         INIT_LOOP   *Initialize loop variables
0000100C                            17              *JSR         DECODE_LOOP *Enters maine decode loop
0000100C                            18              
0000100C                            19              * final call of program, may need to be removed if we jump directly to DONE from the loop
0000100C  4EF9 000010B6             20              JMP         DONE        *End Program               
00001012                            21                 
00001012                            22  *-----------------------INTRO-------------------------------
00001012  43F9 000010BC             23  INTRO       LEA         NL_INTRO,A1 *Load INTRO1 message into A1
00001018  103C 000E                 24              MOVE.B      #14,D0      *Trap task 14, display intro
0000101C  4E4F                      25              TRAP        #15         
0000101E  4E75                      26              RTS         
00001020                            27  
00001020                            28  *--------------------GET_INPUT------------------------------
00001020  43F9 00001163             29  GET_INPUT   LEA         STA_MSG,A1  *Load STA_MSG into A1
00001026  103C 000E                 30              MOVE.B      #14,D0      *Trap task 14, display start address msg
0000102A  4E4F                      31              TRAP        #15         
0000102C                            32              
0000102C  43F9 000011A7             33              LEA         STA_ADDR,A1 *Store input in STA_ADDR variable
00001032  103C 0002                 34              MOVE.B      #2,D0       *Trap task 2, collect start address from input, length in D1
00001036  4E4F                      35              TRAP        #15         
00001038                            36              
00001038  4EB9 00001062             37              JSR         PROC_STA    *Process Start address, check for errrors and convert to HEX
0000103E  4281                      38              CLR.L       D1          *Clear input length from D1
00001040                            39              
00001040  43F9 00001186             40              LEA         END_MSG,A1  *Load END_MSG into A1
00001046  103C 000E                 41              MOVE.B      #14,D0      *Trap task 14, display end address msg
0000104A  4E4F                      42              TRAP        #15
0000104C                            43              
0000104C  43F9 000011F7             44              LEA         END_ADDR,A1 *Store input in END_ADDR variable
00001052  103C 0002                 45              MOVE.B      #2,D0       *Trap task 2, collect end address from input, length in d1
00001056  4E4F                      46              TRAP        #15         
00001058                            47              
00001058  4EB9 0000106E             48              JSR         PROC_END    *Process End Address, check for errors and convert to HEX
0000105E  4281                      49              CLR.L       D1          *Clear input length from D1
00001060                            50              
00001060  4E75                      51              RTS
00001062                            52              
00001062                            53  *--------------------PROC_STA-------------------------------
00001062                            54  PROC_STA    *TODO: Check for Null, bad length, ODD address, range, convert to hex
00001062  4EB9 0000107A             55              JSR         ASCII_HEX   *Convert input into Hex
00001068  2A43                      56              MOVEA.L     D3,A5 *Move hex to STA_ADDR
0000106A  4283                      57              CLR.L       D3          *Clear D3
0000106C  4E75                      58              RTS                     
0000106E                            59  
0000106E                            60  *--------------------PROC_END-------------------------------
0000106E                            61  PROC_END    *TODO: Check for Null, bad length, odd address, range, convert to hex
0000106E                            62              *      does not fall before start
0000106E  4EB9 0000107A             63              JSR         ASCII_HEX   *Convert input into Hex
00001074  2C43                      64              MOVE.L      D3,A6 *Move hex to END_ADDR
00001076  4283                      65              CLR.L       D3          *Clear D3
00001078  4E75                      66              RTS
0000107A                            67  
0000107A                            68  *-------------------ASCII_HEX-------------------------------
0000107A  0C01 0000                 69  ASCII_HEX   CMPI.B      #$0,D1      *See if all characters are converted
0000107E  6700 0012                 70              BEQ         AH_DONE     *End subroutine if all converted
00001082  1419                      71              MOVE.B      (A1)+,D2    *Move first ASCII hex value into D2
00001084  183C 0039                 72              MOVE.B      #$39,D4     *Number to compare input to to select num or letter 
00001088  B404                      73              CMP.B       D4,D2       *Check if ascii code is for a number or letter
0000108A  6F00 0008                 74              BLE         NUM         *Codes less than $39 imply a number, so branch
0000108E  6000 000E                 75              BRA         LET         *If not a number, must be a letter.            
00001092  4E75                      76  AH_DONE     RTS
00001094                            77  
00001094  183C 0030                 78  NUM         MOVE.B      #$30,D4     *move $30 into D4 (ammount to sub from value if number)
00001098  9404                      79              SUB.B       D4,D2       *convert to hexadecimal number
0000109A  6000 000C                 80              BRA         FORMAT      *branch to subroutine to store converted hex number
0000109E                            81              
0000109E  183C 0037                 82  LET         MOVE.B      #$37,D4     *move $37 into D4 (ammount to sub from value if letter)
000010A2  9404                      83              SUB.B       D4,D2       *convert to hexadecimal letter
000010A4  6000 0002                 84              BRA         FORMAT      *branch to subroutine to store converted hex letter
000010A8                            85  
000010A8  5301                      86  FORMAT      SUBI.B      #$1,D1      *Decrement D2 counter, one character has been converted
000010AA  D602                      87              ADD.B       D2,D3       *Store converted number in D3
000010AC  0C01 0000                 88              CMPI.B      #$0,D1      *Check if we're all done converting
000010B0  67C8                      89              BEQ         ASCII_HEX   *If not continue conversion
000010B2  E983                      90              ASL.L       #4,D3       *Shift bits to the left to correct position
000010B4  60C4                      91              BRA         ASCII_HEX   *Branch back to label
000010B6                            92              
000010B6                            93  *-------------------INIT_LOOP-------------------------------
000010B6                            94  *INIT_LOOP   MOVEA.L     
000010B6                            95  
000010B6                            96              
000010B6                            97  *-----------------------DONE--------------------------------
000010B6  103C 0009                 98  DONE        MOVE.B      #9,D0       *Load 9 into D0 (trap task)
000010BA  4E4F                      99              TRAP        #15         *Halt program, Trap#15 task 9
000010BC                           100              
000010BC                           101  *---------------Variables and Constants---------------------
000010BC  =0000000D                102  CR          EQU         $0D
000010BC  =0000000A                103  LF          EQU         $0A
000010BC                           104  
000010BC= 2D 2D 2D 2D 2D 2D ...    105  NL_INTRO    DC.B        '------------TEAM NEVER LUCKY------------',CR,LF
000010E6= 48 65 6E 72 79 20 ...    106              DC.B        'Henry Hong, Ryan Palm, Joshua Plantilla',CR,LF
0000110F= 43 53 53 20 34 32 ...    107              DC.B        'CSS 422 Final Project: 68k Disassembler',CR,LF
00001138= 2D 2D 2D 2D 2D 2D ...    108              DC.B        '----------------------------------------',CR,LF,0
00001163                           109              
00001163= 45 6E 74 65 72 20 ...    110  STA_MSG     DC.B        'Enter starting address (ALL CAPS):',0
00001186= 45 6E 74 65 72 20 ...    111  END_MSG     DC.B        'Enter ending address (ALL CAPS):',0
000011A7                           112  
000011A7                           113  STA_ADDR    DS.B        80
000011F7                           114  END_ADDR    DS.B        80
00001247                           115              
00001247                           116  
00001247                           117              END         START       *LAST LINE

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AH_DONE             1092
ASCII_HEX           107A
CR                  D
DONE                10B6
END_ADDR            11F7
END_MSG             1186
FORMAT              10A8
GET_INPUT           1020
INTRO               1012
LET                 109E
LF                  A
NL_INTRO            10BC
NUM                 1094
PROC_END            106E
PROC_STA            1062
START               1000
STA_ADDR            11A7
STA_MSG             1163
