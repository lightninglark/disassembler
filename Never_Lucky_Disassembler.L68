00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
<<<<<<< HEAD
Created On: 5/16/2017 5:52:31 PM
=======
Created On: 5/16/2017 3:54:40 PM
>>>>>>> c1f52eab497fa12443532c119b7a1519830a58f8

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Never Lucky Disassembler
00000000                             3  * Written by : Henry Hong, Ryan Palm, Joshua Plantilla
00000000                             4  * Date       : April 23, 2017
00000000                             5  * Description: Final Project for CSS 422. This program
00000000                             6  *              translates machine code into assembly (68k)
00000000                             7  *              language.
00000000                             8  *-----------------------------------------------------------
00000000                             9  
00001000                            10  START       ORG         $1000       *Start program
00001000  4EB9 00001012             11              JSR         INTRO       *Display Intro Message
00001006  4EB9 00001020             12              JSR         GET_INPUT   *Prompt user for input, convert input from ascii to hex and assign to sta_addr and end_addr
0000100C                            13              
0000100C                            14              *Assuming all input error checking is done before the next call (not yet implemented)
0000100C                            15              
0000100C  4EB9 000010B6             16              JSR         DECODE_LOOP *Enters maine decode loop
00001012                            17              
00001012                            18              * final call of program, may need to be removed if we jump directly to DONE from the loop
00001012                            19              *JMP         DONE        *End Program               
00001012                            20                 
00001012                            21  *-----------------------INTRO-------------------------------
00001012  43F9 000016C4             22  INTRO       LEA         NL_INTRO,A1 *Load INTRO1 message into A1
00001018  103C 000E                 23              MOVE.B      #14,D0      *Trap task 14, display intro
0000101C  4E4F                      24              TRAP        #15         
0000101E  4E75                      25              RTS         
00001020                            26  
00001020                            27  *--------------------GET_INPUT------------------------------
00001020  43F9 0000176B             28  GET_INPUT   LEA         STA_MSG,A1  *Load STA_MSG into A1
00001026  103C 000E                 29              MOVE.B      #14,D0      *Trap task 14, display start address msg
0000102A  4E4F                      30              TRAP        #15         
0000102C                            31              
0000102C  43F9 000017D5             32              LEA         STA_ADDR,A1 *Store input in STA_ADDR variable
00001032  103C 0002                 33              MOVE.B      #2,D0       *Trap task 2, collect start address from input, length in D1
00001036  4E4F                      34              TRAP        #15         
00001038                            35              
00001038  4EB9 00001062             36              JSR         PROC_STA    *Process Start address, check for errrors and convert to HEX
0000103E  4281                      37              CLR.L       D1          *Clear input length from D1
00001040                            38              
00001040  43F9 0000178E             39              LEA         END_MSG,A1  *Load END_MSG into A1
00001046  103C 000E                 40              MOVE.B      #14,D0      *Trap task 14, display end address msg
0000104A  4E4F                      41              TRAP        #15
0000104C                            42              
0000104C  43F9 000017FD             43              LEA         END_ADDR,A1 *Store input in END_ADDR variable
00001052  103C 0002                 44              MOVE.B      #2,D0       *Trap task 2, collect end address from input, length in d1
00001056  4E4F                      45              TRAP        #15         
00001058                            46              
00001058  4EB9 0000106E             47              JSR         PROC_END    *Process End Address, check for errors and convert to HEX
0000105E  4281                      48              CLR.L       D1          *Clear input length from D1
00001060                            49              
00001060  4E75                      50              RTS
00001062                            51              
00001062                            52  *--------------------PROC_STA-------------------------------
00001062                            53  PROC_STA    *TODO: Check for Null, bad length, ODD address, range, convert to hex
00001062  4EB9 0000107A             54              JSR         ASCII_HEX   *Convert input into Hex
00001068                            55              
00001068                            56              *assuming all error checking is done before the next instruction (not yet implemented)
00001068                            57              
00001068  2A43                      58              MOVEA.L     D3,A5       *Move hex to STA_ADDR
0000106A  4283                      59              CLR.L       D3          *Clear D3
0000106C  4E75                      60              RTS                     
0000106E                            61  
0000106E                            62  *--------------------PROC_END-------------------------------
0000106E                            63  PROC_END    *TODO: Check for Null, bad length, odd address, range, convert to hex
0000106E                            64              *      does not fall before start
0000106E  4EB9 0000107A             65              JSR         ASCII_HEX   *Convert input into Hex
00001074                            66              
00001074                            67              *assuming all error checking is done before the next instruction (not yet implemented)
00001074                            68              
00001074  2C43                      69              MOVE.L      D3,A6       *Move hex to END_ADDR
00001076  4283                      70              CLR.L       D3          *Clear D3
00001078  4E75                      71              RTS
0000107A                            72  
0000107A                            73  *-------------------ASCII_HEX-------------------------------
0000107A  0C01 0000                 74  ASCII_HEX   CMPI.B      #$0,D1      *See if all characters are converted
0000107E  6700 0012                 75              BEQ         AH_DONE     *End subroutine if all converted
00001082  1419                      76              MOVE.B      (A1)+,D2    *Move first ASCII hex value into D2
00001084  183C 0039                 77              MOVE.B      #$39,D4     *Number to compare input to to select num or letter 
00001088  B404                      78              CMP.B       D4,D2       *Check if ascii code is for a number or letter
0000108A  6F00 0008                 79              BLE         NUM         *Codes less than $39 imply a number, so branch
0000108E  6000 000E                 80              BRA         LET         *If not a number, must be a letter.            
00001092  4E75                      81  AH_DONE     RTS
00001094                            82  
00001094  183C 0030                 83  NUM         MOVE.B      #$30,D4     *move $30 into D4 (ammount to sub from value if number)
00001098  9404                      84              SUB.B       D4,D2       *convert to hexadecimal number
0000109A  6000 000C                 85              BRA         FORMAT      *branch to subroutine to store converted hex number
0000109E                            86              
0000109E  183C 0037                 87  LET         MOVE.B      #$37,D4     *move $37 into D4 (ammount to sub from value if letter)
000010A2  9404                      88              SUB.B       D4,D2       *convert to hexadecimal letter
000010A4  6000 0002                 89              BRA         FORMAT      *branch to subroutine to store converted hex letter
000010A8                            90  
000010A8  5301                      91  FORMAT      SUBI.B      #$1,D1      *Decrement D2 counter, one character has been converted
000010AA  D602                      92              ADD.B       D2,D3       *Store converted number in D3
000010AC  0C01 0000                 93              CMPI.B      #$0,D1      *Check if we're all done converting
000010B0  67C8                      94              BEQ         ASCII_HEX   *If not continue conversion
000010B2  E983                      95              ASL.L       #4,D3       *Shift bits to the left to correct position
000010B4  60C4                      96              BRA         ASCII_HEX   *Branch back to label
000010B6                            97              
000010B6                            98  *-------------------DECODE_LOOP-----------------------------
000010B6  3E1D                      99  DECODE_LOOP MOVE.W      (A5)+,D7    *Move the instruction into D7        
000010B8  47F9 00001866            100              LEA         BAD_STR,A3  *Move Bad string constant into A3
000010BE  49F9 00001826            101              LEA         GOOD_STR,A4 *Move Good string constant into A4
000010C4                           102              
000010C4  4EB9 0000112A            103              JSR         INIT_STRS   *Initialize Bad and Good Str
000010CA                           104              
000010CA  4EB9 0000126E            105              JSR         JMP_TBL    *Start opcode identification waterfall
000010D0                           106              
000010D0  0C06 00FF                107              CMPI.B      #$FF,D6     *Look for good sentry value in D6 ($AA = good, $FF = bad)
000010D4  6700 0010                108              BEQ         PRINT_BAD   *Print good string if good opcode
000010D8  6000 0002                109              BRA         PRINT_GOOD  *Print bad string if bad opcode
000010DC  4EB9 00001236            110  PRINT_GOOD  JSR         PRINT_G     *Jump to Print good string
000010E2  6000 000C                111              BRA         CONTINUE    *Continue the loop
000010E6  4EB9 0000124C            112  PRINT_BAD   JSR         PRINT_B     *Jump to Pring bad string
000010EC  6000 0002                113              BRA         CONTINUE    *Continue the loop            
000010F0                           114              
000010F0  BCCD                     115  CONTINUE    CMP.W       A5,A6       *Check if we're done
000010F2  6700 016E                116              BEQ         END_OPT     *if we're done, move to end options (ask user what to do)
000010F6                           117              
000010F6  4286                     118              CLR.L       D6          *Clear the bad/good flag register
000010F8                           119              
000010F8  5205                     120              ADDQ.B      #1,D5       *Increment line counter
000010FA  BA3C 0018                121              CMP.B       #24,D5      *See if page is full
000010FE  6700 0004                122              BEQ         NEXT_PAGE   *Jump to next page prompt
00001102                           123              
00001102                           124              *Maybe a BGT check here also? would that ever be possible?
00001102                           125              *Need to implement line/page display (one page at a time via enter)
00001102                           126              
00001102  60B2                     127              BRA         DECODE_LOOP * Continue loop
00001104                           128  
00001104                           129  *-------------------NEXT_PAGE-----------------------------
00001104  43F9 000017AF            130  NEXT_PAGE   LEA         NXT_PG,A1   *Load STA_MSG into A1
0000110A  4280                     131              CLR.L       D0          *Make sure D0 is empty
0000110C  103C 000E                132              MOVE.B      #14,D0      *Trap task 14, display start address msg
00001110  4E4F                     133              TRAP        #15            
00001112                           134              
00001112  103C 000C                135              MOVE.B      #12,D0      *Keyboard echo trap task
00001116  4281                     136              CLR.L       D1          *Start keyboard echo trap
00001118  4E4F                     137              TRAP        #15         
0000111A                           138              
0000111A  103C 0005                139              MOVE.B      #5,D0       *Single char trap task
0000111E  4E4F                     140              TRAP        #15         
00001120                           141              
00001120  B23C 000D                142              CMP.B       #$D,D1      *Check if ENTER key was pressed
00001124  66DE                     143              BNE         NEXT_PAGE   *Force user to hit enter, or prompt again
00001126                           144              
00001126  4285                     145              CLR.L       D5          *Reset page counter
00001128                           146              
00001128  608C                     147              BRA         DECODE_LOOP *Continue the loop         
0000112A                           148              
0000112A                           149  *-------------------INIT_STRS-----------------------------
0000112A  4EB9 00001138            150  INIT_STRS   JSR         INIT_GOOD   *Initialize the good string
00001130  4EB9 00001170            151              JSR         INIT_BAD    *Initialize the bad string
00001136  4E75                     152              RTS
00001138                           153  *-------------------INIT_GOOD-----------------------------
00001138  18FC 004C                154  INIT_GOOD   MOVE.B      #'L',(A4)+  *Add to good string  
0000113C  18FC 0065                155              MOVE.B      #'e',(A4)+ 
00001140  18FC 0067                156              MOVE.B      #'g',(A4)+ 
00001144  18FC 0061                157              MOVE.B      #'a',(A4)+ 
00001148  18FC 006C                158              MOVE.B      #'l',(A4)+
0000114C  18FC 0020                159              MOVE.B      #' ',(A4)+
00001150  18FC 0020                160              MOVE.B      #' ',(A4)+ 
00001154  18FC 003A                161              MOVE.B      #':',(A4)+
00001158  18FC 0020                162              MOVE.B      #' ',(A4)+ 
0000115C  18FC 0024                163              MOVE.B      #'$',(A4)+ 
00001160                           164              
00001160  4EB9 000011EE            165              JSR         HEX_ASCII_G *Now convert opcode to ASCII
00001166                           166              
00001166  18FC 0020                167              MOVE.B      #' ',(A4)+  *Add spaces after memory location added
0000116A  18FC 0020                168              MOVE.B      #' ',(A4)+
0000116E                           169              
0000116E                           170              *Add 'Legal: ', then add opcode (must go from hex to ascii)
0000116E                           171              
0000116E                           172              
0000116E  4E75                     173              RTS
00001170                           174  
00001170                           175  *-------------------INIT_BAD------------------------------            
00001170  16FC 0049                176  INIT_BAD    MOVE.B      #'I',(A3)+  *Add to bad string
00001174  16FC 006C                177              MOVE.B      #'l',(A3)+ 
00001178  16FC 006C                178              MOVE.B      #'l',(A3)+    
0000117C  16FC 0065                179              MOVE.B      #'e',(A3)+ 
00001180  16FC 0067                180              MOVE.B      #'g',(A3)+ 
00001184  16FC 0061                181              MOVE.B      #'a',(A3)+ 
00001188  16FC 006C                182              MOVE.B      #'l',(A3)+ 
0000118C  16FC 003A                183              MOVE.B      #':',(A3)+
00001190  16FC 0020                184              MOVE.B      #' ',(A3)+ 
00001194  16FC 0024                185              MOVE.B      #'$',(A3)+  
00001198                           186              
00001198  4EB9 000011A8            187              JSR         HEX_ASCII_B *Now convert opcode to ASCII
0000119E                           188              
0000119E  18FC 0020                189              MOVE.B      #' ',(A4)+  *Add spaces after bad code added
000011A2  18FC 0020                190              MOVE.B      #' ',(A4)+
000011A6                           191              
000011A6                           192              *Add 'Illegal: ', then add opcode (must go from from hex to ascii)
000011A6                           193              
000011A6  4E75                     194              RTS
000011A8                           195              
000011A8                           196  *-------------------HEX_ASCII_B-------------------------------
000011A8  4280                     197  HEX_ASCII_B CLR.L       D0          *Make sure D0 is empty (Counter)
000011AA  4281                     198              CLR.L       D1          *Make sure D1 is empty (For shifting/Rotations)
000011AC  4282                     199              CLR.L       D2          *Make sure D2 is empty (each individual char)
000011AE  4283                     200              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
000011B0  3207                     201              MOVE.W      D7,D1       *Copy opcode into D0 for working with
000011B2  103C 0004                202              MOVE.B      #$4,D0      *Counter
000011B6  6000 0002                203              BRA         ISO_DIG_B   *Begin isolating chars
000011BA                           204              
000011BA  E959                     205  ISO_DIG_B   ROL.W       #4,D1       *Move first significant hex char to least sig position
000011BC                           206              
000011BC  2401                     207              MOVE.L      D1,D2       *Move to D2 to isolate least sig hex char
000011BE                           208              
000011BE  163C 001C                209              MOVE.B      #28,D3      *Shift left 28 times
000011C2  E7AA                     210              LSL.L       D3,D2       *Isolated hex digit now is $X0000000
000011C4  E99A                     211              ROL.L       #4,D2       *Isolated hex digit is now $0000000X
000011C6                           212              
000011C6  0C02 0009                213              CMPI.B      #$9,D2      *Is it a number?
000011CA  6F00 0006                214              BLE         NUM_B       *If it is, process number
000011CE  6000 000A                215              BRA         LET_B       *If not, process letter
000011D2                           216  
000011D2  0602 0030                217  NUM_B       ADDI.B      #$30,D2     *Make it an ascii number
000011D6  6000 000A                218              BRA         ADD_CHAR_B  *add to strings and continue
000011DA                           219              
000011DA  0602 0037                220  LET_B       ADDI.B      #$37,D2     *Make it an ascii letter
000011DE  6000 0002                221              BRA         ADD_CHAR_B  *add to strings and continue
000011E2                           222              
000011E2  16C2                     223  ADD_CHAR_B  MOVE.B      D2,(A3)+    *Add to bad data string
000011E4  5300                     224              SUBI.B      #$1,D0      *decrement counter
000011E6  0C00 0000                225              CMPI.B      #$0,D0      *Check if we're done            
000011EA  6ECE                     226              BGT         ISO_DIG_B   *If not, continue tranlation   
000011EC                           227              
000011EC  4E75                     228              RTS
000011EE                           229              
000011EE                           230  *-------------------HEX_ASCII_G-------------------------------            
000011EE  4280                     231  HEX_ASCII_G CLR.L       D0          *Make sure D0 is empty (Counter)
000011F0  4281                     232              CLR.L       D1          *Make sure D1 is empty (For shifting/Rotations)
000011F2  4282                     233              CLR.L       D2          *Make sure D2 is empty (each individual char)
000011F4  4283                     234              CLR.L       D3          *Make sure D3 is empty (for shifting source operand)
000011F6  220D                     235              MOVE.L      A5,D1       *Copy address into D7
000011F8  5501                     236              SUBI.B      #2,D1       *Move addres back one byte (for post increment)
000011FA  103C 0008                237              MOVE.B      #$8,D0      *Counter
000011FE  6000 0002                238              BRA         ISO_DIG_G   *Begin isolating chars
00001202                           239              
00001202  E999                     240  ISO_DIG_G   ROL.L       #4,D1       *Move first significant hex char to least sig position
00001204                           241              
00001204  2401                     242              MOVE.L      D1,D2       *Move to D2 to isolate least sig hex char
00001206                           243              
00001206  163C 001C                244              MOVE.B      #28,D3      *Shift left 28 times
0000120A  E7AA                     245              LSL.L       D3,D2       *Isolated hex digit now is $X0000000
0000120C  E99A                     246              ROL.L       #4,D2       *Isolated hex digit is now $0000000X
0000120E                           247              
0000120E  0C02 0009                248              CMPI.B      #$9,D2      *Is it a number?
00001212  6F00 0006                249              BLE         NUM_G       *If it is, process number
00001216  6000 000A                250              BRA         LET_G       *If not, process letter
0000121A                           251              
0000121A  0602 0030                252  NUM_G       ADDI.B      #$30,D2     *Make it an ascii number
0000121E  6000 000A                253              BRA         ADD_CHAR_G  *add to strings and continue
00001222                           254              
00001222  0602 0037                255  LET_G       ADDI.B      #$37,D2     *Make it an ascii letter
00001226  6000 0002                256              BRA         ADD_CHAR_G  *add to strings and continue
0000122A                           257  
0000122A  18C2                     258  ADD_CHAR_G  MOVE.B      D2,(A4)+    *Add to the good data string
0000122C  5300                     259              SUBI.B      #$1,D0      *decrement counter
0000122E  0C00 0000                260              CMPI.B      #$0,D0      *Check if we're done            
00001232  6ECE                     261              BGT         ISO_DIG_G    *If not, continue tranlation   
00001234                           262              
00001234  4E75                     263              RTS
00001236                           264              
00001236                           265  *-------------------PRINT_G---------------------------------
00001236  18FC 0020                266  PRINT_G     MOVE.B      #' ',(A4)+
0000123A  16FC 0000                267              MOVE.B      #$00,(A3)+  *Move null to end of string for printing
0000123E  43F9 00001826            268              LEA         GOOD_STR,A1 *Load good data for printing
00001244  103C 000D                269              MOVE.B      #13,D0      *Trap task 13, display null terminated string
00001248  4E4F                     270              TRAP        #15         *Display string
0000124A                           271            
0000124A  4E75                     272              RTS 
0000124C                           273  
0000124C                           274  *-------------------PRINT_B---------------------------------
0000124C  18FC 0020                275  PRINT_B     MOVE.B      #' ',(A4)+
00001250  18FC 0000                276              MOVE.B      #$00,(A4)+  *Move null to end of string for printing
00001254  43F9 00001866            277              LEA         BAD_STR,A1 *Load good data for printing
0000125A  103C 000D                278              MOVE.B      #13,D0      *Trap task 13, display null terminated string
0000125E  4E4F                     279              TRAP        #15         *Display string
00001260                           280              
00001260  4E75                     281              RTS 
00001262                           282  
00001262                           283  *-------------------END_OPT---------------------------------
00001262  4EF9 00001268            284  END_OPT     JMP         DONE        *Jump to done for now untill end options logic is implemented
00001268                           285              
00001268                           286  *-----------------------DONE--------------------------------
00001268  103C 0009                287  DONE        MOVE.B      #9,D0       *Load 9 into D0 (trap task)
0000126C  4E4F                     288              TRAP        #15         *Halt program, Trap#15 task 9
0000126E                           289              
0000126E                           290  *---------------Variables and Constants---------------------
0000126E                           291              INCLUDE     'Never_Lucky_Jump_Tables.x68' *Include jump tables file
0000126E                           292  
0000126E                           293  
0000126E  4282                     294  JMP_TBL    CLR.L       D2
00001270  3407                     295              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00001272  4281                     296              CLR.L       D1
00001274  123C 000C                297              MOVE.B      #12,D1      *Moves 12 into D1
00001278  E26A                     298              LSR.W       D1,D2       *Shifts 12 bits so the remaining contents = the left 4 bits of D7
0000127A                           299                          
0000127A  B43C 0000                300  OC_0        CMP.B       #$0,D2      *Following section determines what hex value the first 4 digits are
0000127E  6600 000A                301              BNE         OC_1        *If the first hex value is not 0, branch and see if its 1
00001282  4EB9 00001362            302              JSR         OPC_0       *If the first hex value is 0, jump to First_0
00001288  4E75                     303              RTS                     *Finished all jumping; whole instruction should be identified at this point
0000128A                           304              
0000128A  B43C 0001                305  OC_1        CMP.B       #$1,D2
0000128E  6600 000A                306              BNE         OC_2        *If the first hex value is not 2, branch and see if its 3, and so on
00001292  4EB9 00001364            307              JSR         OPC_1 
00001298  4E75                     308              RTS                     *Finished all jumping; whole instruction should be identified at this point, and so on       
0000129A                           309             
0000129A  B43C 0002                310  OC_2        CMP.B       #$2,D2
0000129E  6600 000A                311              BNE         OC_3 
000012A2  4EB9 00001366            312              JSR         OPC_2
000012A8  4E75                     313              RTS
000012AA                           314              
000012AA  B43C 0003                315  OC_3        CMP.B       #$3,D2
000012AE  6600 000A                316              BNE         OC_4
000012B2  4EB9 00001368            317              JSR         OPC_3 
000012B8  4E75                     318              RTS
000012BA  B43C 0004                319  OC_4        CMP.B       #$4,D2      *Where NOP SHOULD LAND
000012BE  6600 000A                320              BNE         OC_5
000012C2  4EB9 0000136A            321              JSR         OPC_4
000012C8  4E75                     322              RTS
000012CA                           323              
000012CA  B43C 0005                324  OC_5        CMP.B       #$5,D2
000012CE  6600 000A                325              BNE         OC_6
000012D2  4EB9 00001460            326              JSR         OPC_5
000012D8  4E75                     327              RTS
000012DA                           328              
000012DA  B43C 0006                329  OC_6        CMP.B       #$6,D2
000012DE  6600 000A                330              BNE         OC_7
000012E2  4EB9 00001462            331              JSR         OPC_6
000012E8  4E75                     332              RTS
000012EA                           333              
000012EA  B43C 0007                334  OC_7        CMP.B       #$7,D2
000012EE  6600 000A                335              BNE         OC_8
000012F2  4EB9 00001464            336              JSR         OPC_7
000012F8  4E75                     337              RTS
000012FA                           338              
000012FA  B43C 0008                339  OC_8        CMP.B       #$8,D2
000012FE  6600 000A                340              BNE         OC_9
00001302  4EB9 00001466            341              JSR         OPC_8
00001308  4E75                     342              RTS
0000130A                           343              
0000130A  B43C 0009                344  OC_9        CMP.B       #$9,D2
0000130E  6600 000A                345              BNE         OC_A
00001312  4EB9 00001468            346              JSR         OPC_9
00001318  4E75                     347              RTS
0000131A                           348              
0000131A  B43C 000A                349  OC_A        CMP.B       #$A,D2
0000131E  6600 000A                350              BNE         OC_B
00001322  4EB9 0000146A            351              JSR         OPC_A
00001328  4E75                     352              RTS
0000132A                           353              
0000132A  B43C 000B                354  OC_B        CMP.B       #$B,D2
0000132E  6600 000A                355              BNE         OC_C
00001332  4EB9 0000146C            356              JSR         OPC_B
00001338  4E75                     357              RTS
0000133A                           358              
0000133A  B43C 000C                359  OC_C        CMP.B       #$C,D2
0000133E  6600 000A                360              BNE         OC_D
00001342  4EB9 0000146E            361              JSR         OPC_C
00001348  4E75                     362              RTS
0000134A                           363              
0000134A  B43C 000D                364  OC_D        CMP.B       #$D,D2
0000134E  6600 000A                365              BNE         OC_E
00001352  4EB9 00001470            366              JSR         OPC_D
00001358  4E75                     367              RTS
0000135A                           368              
0000135A  4EB9 00001472            369  OC_E        JSR         OPC_E     *If first hex value is not 0-D, it must be E. Branch to First_E
00001360  4E75                     370              RTS
00001362                           371   
00001362                           372  
00001362                           373             
00001362  4E75                     374  OPC_0     RTS          
00001364  4E75                     375  OPC_1     RTS
00001366  4E75                     376  OPC_2     RTS
00001368  4E75                     377  OPC_3     RTS
0000136A                           378  
0000136A  4282                     379  OPC_4       CLR.L       D2
0000136C  3407                     380              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
0000136E  4281                     381              CLR.L       D1
00001370  E94A                     382              LSL.W       #4,D2       *Clear the most sig hex digit
00001372  123C 000C                383              MOVE.B      #12,D1      *Moves 12 into D1
00001376  E26A                     384              LSR.W       D1,D2       *Shifts 12 right to isolate Digit we're working with at $0000000X
00001378                           385                          
00001378  B43C 0000                386  OC4_0       CMP.B       #$0,D2      *Following section determines what hex value the first 4 digits are
0000137C  6600 000A                387              BNE         OC4_1       *If the first hex value is not 0, branch and see if its 1
00001380  4EB9 00001474            388              JSR         OPC4_0      *If the first hex value is 0, jump to First_0
00001386  4E75                     389              RTS                     *Finished all jumping; whole instruction should be identified at this point
00001388                           390              
00001388  B43C 0001                391  OC4_1       CMP.B       #$1,D2
0000138C  6600 000A                392              BNE         OC4_2       *If the first hex value is not 2, branch and see if its 3, and so on
00001390  4EB9 00001476            393              JSR         OPC4_1 
00001396  4E75                     394              RTS                     *Finished all jumping; whole instruction should be identified at this point, and so on       
00001398                           395             
00001398  B43C 0002                396  OC4_2       CMP.B       #$2,D2
0000139C  6600 000A                397              BNE         OC4_3 
000013A0  4EB9 00001478            398              JSR         OPC4_2
000013A6  4E75                     399              RTS
000013A8                           400              
000013A8  B43C 0003                401  OC4_3       CMP.B       #$3,D2
000013AC  6600 000A                402              BNE         OC4_4
000013B0  4EB9 0000147A            403              JSR         OPC4_3 
000013B6  4E75                     404              RTS
000013B8                           405             
000013B8  B43C 0004                406  OC4_4       CMP.B       #$4,D2 
000013BC  6600 000A                407              BNE         OC4_5
000013C0  4EB9 0000147C            408              JSR         OPC4_4
000013C6  4E75                     409              RTS
000013C8                           410              
000013C8  B43C 0005                411  OC4_5       CMP.B       #$5,D2
000013CC  6600 000A                412              BNE         OC4_6
000013D0  4EB9 0000147E            413              JSR         OPC4_5
000013D6  4E75                     414              RTS
000013D8                           415              
000013D8  B43C 0006                416  OC4_6       CMP.B       #$6,D2
000013DC  6600 000A                417              BNE         OC4_7
000013E0  4EB9 00001480            418              JSR         OPC4_6
000013E6  4E75                     419              RTS
000013E8                           420              
000013E8  B43C 0007                421  OC4_7       CMP.B       #$7,D2
000013EC  6600 000A                422              BNE         OC4_8
000013F0  4EB9 00001482            423              JSR         OPC4_7
000013F6  4E75                     424              RTS
000013F8                           425              
000013F8  B43C 0008                426  OC4_8       CMP.B       #$8,D2
000013FC  6600 000A                427              BNE         OC4_9
00001400  4EB9 00001484            428              JSR         OPC4_8
00001406  4E75                     429              RTS
00001408                           430              
00001408  B43C 0009                431  OC4_9       CMP.B       #$9,D2
0000140C  6600 000A                432              BNE         OC4_A
00001410  4EB9 00001486            433              JSR         OPC4_9
00001416  4E75                     434              RTS
00001418                           435              
00001418  B43C 000A                436  OC4_A       CMP.B       #$A,D2
0000141C  6600 000A                437              BNE         OC4_B
00001420  4EB9 00001488            438              JSR         OPC4_A
00001426  4E75                     439              RTS
00001428                           440              
00001428  B43C 000B                441  OC4_B       CMP.B       #$B,D2
0000142C  6600 000A                442              BNE         OC4_C
00001430  4EB9 0000148A            443              JSR         OPC4_B
00001436  4E75                     444              RTS
00001438                           445              
00001438  B43C 000C                446  OC4_C       CMP.B       #$C,D2
0000143C  6600 000A                447              BNE         OC4_D
00001440  4EB9 0000148C            448              JSR         OPC4_C
00001446  4E75                     449              RTS
00001448                           450              
00001448  B43C 000D                451  OC4_D       CMP.B       #$D,D2
0000144C  6600 000A                452              BNE         OC4_E
00001450  4EB9 0000148E            453              JSR         OPC4_D
00001456  4E75                     454              RTS
00001458                           455              
00001458  4EB9 00001490            456  OC4_E       JSR         OPC4_E     *If first hex value is not 0-D, it must be E. Branch to First_E
0000145E  4E75                     457              RTS
00001460                           458                                                
00001460  4E75                     459  OPC_5       RTS
00001462  4E75                     460  OPC_6       RTS
00001464  4E75                     461  OPC_7       RTS
00001466  4E75                     462  OPC_8       RTS
00001468  4E75                     463  OPC_9       RTS
0000146A  4E75                     464  OPC_A       RTS
0000146C  4E75                     465  OPC_B       RTS
0000146E  4E75                     466  OPC_C       RTS
00001470  4E75                     467  OPC_D       RTS
00001472  4E75                     468  OPC_E       RTS
00001474                           469  
00001474                           470  
00001474  4E75                     471  OPC4_0      RTS
00001476  4E75                     472  OPC4_1      RTS
00001478  4E75                     473  OPC4_2      RTS
0000147A  4E75                     474  OPC4_3      RTS
0000147C  4E75                     475  OPC4_4      RTS
0000147E  4E75                     476  OPC4_5      RTS
00001480  4E75                     477  OPC4_6      RTS
00001482  4E75                     478  OPC4_7      RTS
00001484  4E75                     479  OPC4_8      RTS
00001486  4E75                     480  OPC4_9      RTS
00001488  4E75                     481  OPC4_A      RTS
0000148A  4E75                     482  OPC4_B      RTS
0000148C  4E75                     483  OPC4_C      RTS
0000148E  4E75                     484  OPC4_D      RTS
00001490                           485  
00001490  4282                     486  OPC4_E      CLR.L       D2
00001492  3407                     487              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00001494  4281                     488              CLR.L       D1      
00001496  E18A                     489              LSL.L       #8,D2       *Clear the two most significant hex digits
00001498  123C 000C                490              MOVE.B      #12,D1      *Moves 12 into D1 for shifting
0000149C  E26A                     491              LSR.W       D1,D2       *Shifts 12 to the right, THIRD hex digit lands $0000000X
0000149E                           492                          
0000149E  B43C 0000                493  OC4E_0      CMP.B       #$0,D2      *Following section determines what hex value the first 4 digits are
000014A2  6600 000A                494              BNE         OC4E_1      *If the first hex value is not 0, branch and see if its 1
000014A6  4EB9 00001584            495              JSR         OPC4E_0     *If the first hex value is 0, jump to First_0
000014AC  4E75                     496              RTS                     *Finished all jumping; whole instruction should be identified at this point
000014AE                           497              
000014AE  B43C 0001                498  OC4E_1      CMP.B       #$1,D2
000014B2  6600 000A                499              BNE         OC4E_2      *If the first hex value is not 2, branch and see if its 3, and so on
000014B6  4EB9 00001586            500              JSR         OPC4E_1 
000014BC  4E75                     501              RTS                     *Finished all jumping; whole instruction should be identified at this point, and so on       
000014BE                           502             
000014BE  B43C 0002                503  OC4E_2      CMP.B       #$2,D2
000014C2  6600 000A                504              BNE         OC4E_3 
000014C6  4EB9 00001588            505              JSR         OPC4E_2
000014CC  4E75                     506              RTS
000014CE                           507              
000014CE  B43C 0003                508  OC4E_3      CMP.B       #$3,D2
000014D2  6600 000A                509              BNE         OC4E_4
000014D6  4EB9 0000158A            510              JSR         OPC4E_3 
000014DC  4E75                     511              RTS
000014DE                           512             
000014DE  B43C 0004                513  OC4E_4      CMP.B       #$4,D2      
000014E2  6600 000A                514              BNE         OC4E_5
000014E6  4EB9 0000158C            515              JSR         OPC4E_4
000014EC  4E75                     516              RTS
000014EE                           517              
000014EE  B43C 0005                518  OC4E_5      CMP.B       #$5,D2
000014F2  6600 000A                519              BNE         OC4E_6
000014F6  4EB9 0000158E            520              JSR         OPC4E_5
000014FC  4E75                     521              RTS
000014FE                           522              
000014FE  B43C 0006                523  OC4E_6      CMP.B       #$6,D2
00001502  6600 000A                524              BNE         OC4E_7
00001506  4EB9 00001590            525              JSR         OPC4E_6
0000150C  4E75                     526              RTS
0000150E  B43C 0007                527  OC4E_7      CMP.B       #$7,D2      *NOP LANDS HERE
00001512  6600 000A                528              BNE         OC4E_8
00001516  4EB9 00001592            529              JSR         OPC4E_7
0000151C  4E75                     530              RTS
0000151E                           531              
0000151E  B43C 0008                532  OC4E_8      CMP.B       #$8,D2
00001522  6600 000A                533              BNE         OC4E_9
00001526  4EB9 00001688            534              JSR         OPC4E_8
0000152C  4E75                     535              RTS
0000152E                           536              
0000152E  B43C 0009                537  OC4E_9      CMP.B       #$9,D2
00001532  6600 000A                538              BNE         OC4E_A
00001536  4EB9 0000168A            539              JSR         OPC4E_9
0000153C  4E75                     540              RTS
0000153E                           541              
0000153E  B43C 000A                542  OC4E_A      CMP.B       #$A,D2
00001542  6600 000A                543              BNE         OC4E_B
00001546  4EB9 0000168C            544              JSR         OPC4E_A
0000154C  4E75                     545              RTS
0000154E                           546              
0000154E  B43C 000B                547  OC4E_B      CMP.B       #$B,D2
00001552  6600 000A                548              BNE         OC4E_C
00001556  4EB9 0000168E            549              JSR         OPC4E_B
0000155C  4E75                     550              RTS
0000155E                           551              
0000155E  B43C 000C                552  OC4E_C      CMP.B       #$C,D2
00001562  6600 000A                553              BNE         OC4E_D
00001566  4EB9 00001690            554              JSR         OPC4E_C
0000156C  4E75                     555              RTS
0000156E                           556              
0000156E  B43C 000D                557  OC4E_D      CMP.B       #$D,D2
00001572  6600 000A                558              BNE         OC4E_E
00001576  4EB9 00001692            559              JSR         OPC4E_D
0000157C  4E75                     560              RTS
0000157E                           561              
0000157E  4EB8 1490                562  OC4E_E      JSR         OPC4_E     *If first hex value is not 0-D, it must be E. Branch to First_E
00001582  4E75                     563              RTS
00001584                           564  
00001584  4E75                     565  OPC4E_0     RTS
00001586  4E75                     566  OPC4E_1     RTS
00001588  4E75                     567  OPC4E_2     RTS
0000158A  4E75                     568  OPC4E_3     RTS
0000158C  4E75                     569  OPC4E_4     RTS
0000158E  4E75                     570  OPC4E_5     RTS
00001590  4E75                     571  OPC4E_6     RTS
00001592  4282                     572  OPC4E_7     CLR.L       D2
00001594  3407                     573              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00001596  4281                     574              CLR.L       D1
00001598  123C 000C                575              MOVE.B      #12,D1      *Move 12 into D1 for shifting
0000159C  E36A                     576              LSL.W       D1,D2       *Clear the three most significant hex digits
0000159E  E26A                     577              LSR.W       D1,D2       *Shift right 12 spaces to make working digit $0000000X
000015A0                           578                          
000015A0  B43C 0000                579  OC4E7_0     CMP.B       #$0,D2      *Following section determines what hex value the first 4 digits are
000015A4  6600 000A                580              BNE         OC4E7_1     *If the first hex value is not 0, branch and see if its 1
000015A8  4EB9 00001696            581              JSR         OPC4E7_0    *If the first hex value is 0, jump to First_0
000015AE  4E75                     582              RTS                     *Finished all jumping; whole instruction should be identified at this point
000015B0  B43C 0001                583  OC4E7_1     CMP.B       #$1,D2      *NOP LANDS HERE
000015B4  6600 000A                584              BNE         OC4E7_2     *If the first hex value is not 2, branch and see if its 3, and so on
000015B8  4EB9 00001698            585              JSR         OPC4E7_1 
000015BE  4E75                     586              RTS                     *Finished all jumping; whole instruction should be identified at this point, and so on       
000015C0                           587             
000015C0  B43C 0002                588  OC4E7_2     CMP.B       #$2,D2
000015C4  6600 000A                589              BNE         OC4E7_3 
000015C8  4EB9 000016AA            590              JSR         OPC4E7_2
000015CE  4E75                     591              RTS
000015D0                           592              
000015D0  B43C 0003                593  OC4E7_3     CMP.B       #$3,D2
000015D4  6600 000A                594              BNE         OC4E7_4
000015D8  4EB9 000016AC            595              JSR         OPC4E7_3 
000015DE  4E75                     596              RTS
000015E0                           597             
000015E0  B43C 0004                598  OC4E7_4     CMP.B       #$4,D2      
000015E4  6600 000A                599              BNE         OC4E7_5
000015E8  4EB9 000016AE            600              JSR         OPC4E7_4
000015EE  4E75                     601              RTS
000015F0                           602              
000015F0  B43C 0005                603  OC4E7_5     CMP.B       #$5,D2
000015F4  6600 000A                604              BNE         OC4E7_6
000015F8  4EB9 000016B0            605              JSR         OPC4E7_5
000015FE  4E75                     606              RTS
00001600                           607              
00001600  B43C 0006                608  OC4E7_6     CMP.B       #$6,D2
00001604  6600 000A                609              BNE         OC4E7_7
00001608  4EB9 000016B2            610              JSR         OPC4E7_6
0000160E  4E75                     611              RTS
00001610                           612              
00001610  B43C 0007                613  OC4E7_7     CMP.B       #$7,D2
00001614  6600 000A                614              BNE         OC4E7_8
00001618  4EB9 000016B4            615              JSR         OPC4E7_7
0000161E  4E75                     616              RTS
00001620                           617              
00001620  B43C 0008                618  OC4E7_8     CMP.B       #$8,D2
00001624  6600 000A                619              BNE         OC4E7_9
00001628  4EB9 000016B6            620              JSR         OPC4E7_8
0000162E  4E75                     621              RTS
00001630                           622              
00001630  B43C 0009                623  OC4E7_9     CMP.B       #$9,D2
00001634  6600 000A                624              BNE         OC4E7_A
00001638  4EB9 000016B8            625              JSR         OPC4E7_9
0000163E  4E75                     626              RTS
00001640                           627              
00001640  B43C 000A                628  OC4E7_A     CMP.B       #$A,D2
00001644  6600 000A                629              BNE         OC4E7_B
00001648  4EB9 000016BA            630              JSR         OPC4E7_A
0000164E  4E75                     631              RTS
00001650                           632              
00001650  B43C 000B                633  OC4E7_B     CMP.B       #$B,D2
00001654  6600 000A                634              BNE         OC4E7_C
00001658  4EB9 000016BC            635              JSR         OPC4E7_B
0000165E  4E75                     636              RTS
00001660                           637              
00001660  B43C 000C                638  OC4E7_C     CMP.B       #$C,D2
00001664  6600 000A                639              BNE         OC4E7_D
00001668  4EB9 000016BE            640              JSR         OPC4E7_C
0000166E  4E75                     641              RTS
00001670                           642              
00001670  B43C 000D                643  OC4E7_D     CMP.B       #$D,D2
00001674  6600 000A                644              BNE         OC4E7_E
00001678  4EB9 000016C0            645              JSR         OPC4E7_D
0000167E  4E75                     646              RTS
00001680                           647              
00001680  4EB9 000016C2            648  OC4E7_E     JSR         OPC4E7_E     *If first hex value is not 0-D, it must be E. Branch to First_E
00001686  4E75                     649              RTS
00001688                           650  
00001688                           651  
00001688  4E75                     652  OPC4E_8     RTS
0000168A  4E75                     653  OPC4E_9     RTS
0000168C  4E75                     654  OPC4E_A     RTS
0000168E  4E75                     655  OPC4E_B     RTS
00001690  4E75                     656  OPC4E_C     RTS
00001692  4E75                     657  OPC4E_D     RTS
00001694  4E75                     658  OPC4E_E     RTS
00001696                           659  
00001696                           660  
00001696  4E75                     661  OPC4E7_0     RTS
00001698                           662  
00001698  1C3C 00AA                663  OPC4E7_1    MOVE.B      #$AA,D6     *Set good data flag. IF THIS WAS A PARAMERTARIZED INSTRUCTION, NEEDS TO HAPPEN AFTER <EA>/Dn/An...
0000169C                           664  
0000169C  18FC 004E                665              MOVE.B      #'N',(A4)+
000016A0  18FC 004F                666              MOVE.B      #'O',(A4)+
000016A4  18FC 0050                667              MOVE.B      #'P',(A4)+
000016A8                           668              
000016A8                           669              *IF this was a  paramertarize instruction, we'd jump to <EA> decode here
000016A8  4E75                     670              RTS
000016AA                           671  
000016AA  4E75                     672  OPC4E7_2     RTS
000016AC  4E75                     673  OPC4E7_3     RTS
000016AE  4E75                     674  OPC4E7_4     RTS
000016B0  4E75                     675  OPC4E7_5     RTS
000016B2  4E75                     676  OPC4E7_6     RTS
000016B4  4E75                     677  OPC4E7_7     RTS
000016B6  4E75                     678  OPC4E7_8     RTS
000016B8  4E75                     679  OPC4E7_9     RTS
000016BA  4E75                     680  OPC4E7_A     RTS
000016BC  4E75                     681  OPC4E7_B     RTS
000016BE  4E75                     682  OPC4E7_C     RTS
000016C0  4E75                     683  OPC4E7_D     RTS
000016C2  4E75                     684  OPC4E7_E     RTS
000016C4                           685  
000016C4                           686  -------------------- end include --------------------
000016C4                           687  
000016C4  =0000000D                688  CR          EQU         $0D
000016C4  =0000000A                689  LF          EQU         $0A
000016C4                           690  
000016C4= 2D 2D 2D 2D 2D 2D ...    691  NL_INTRO    DC.B        '------------TEAM NEVER LUCKY------------',CR,LF
000016EE= 48 65 6E 72 79 20 ...    692              DC.B        'Henry Hong, Ryan Palm, Joshua Plantilla',CR,LF
00001717= 43 53 53 20 34 32 ...    693              DC.B        'CSS 422 Final Project: 68k Disassembler',CR,LF
00001740= 2D 2D 2D 2D 2D 2D ...    694              DC.B        '----------------------------------------',CR,LF,0
0000176B                           695              
0000176B= 45 6E 74 65 72 20 ...    696  STA_MSG     DC.B        'Enter starting address (ALL CAPS):',0
0000178E= 45 6E 74 65 72 20 ...    697  END_MSG     DC.B        'Enter ending address (ALL CAPS):',0
000017AF= 50 72 65 73 73 20 ...    698  NXT_PG      DC.B        'Press enter key to contiune reading',CR,LF,0
000017D5                           699  
000017D5                           700  STA_ADDR    DS.B        40
000017FD                           701  END_ADDR    DS.B        40
00001825                           702  
00001826= 00000001                 703  GOOD_STR    DC.L        1
0000182A                           704  
0000182A= 00000050                 705  SPACER1     DC.L        80
0000182E= 00000050                 706  SPACER2     DC.L        80
00001832= 00000050                 707  SPACER3     DC.L        80
00001836= 00000050                 708  SPACER4     DC.L        80
0000183A= 00000050                 709  SPACER5     DC.L        80
0000183E= 00000050                 710  SPACER6     DC.L        80
00001842= 00000050                 711  SPACER7     DC.L        80
00001846= 00000050                 712  SPACER8     DC.L        80
0000184A= 00000050                 713  SPACER9     DC.L        80
0000184E= 00000050                 714  SPACERA     DC.L        80
00001852= 00000050                 715  SPACERB     DC.L        80
00001856= 00000050                 716  SPACERC     DC.L        80
0000185A= 00000050                 717  SPACERD     DC.L        80
0000185E= 00000050                 718  SPACERE     DC.L        80
00001862= 00000050                 719  SPACERF     DC.L        80
00001866                           720  
00001866= 00000001                 721  BAD_STR     DC.L        1
0000186A                           722  
0000186A= 00000050                 723  SPACER11    DC.L        80
0000186E= 00000050                 724  SPACER22    DC.L        80
00001872= 00000050                 725  SPACER33    DC.L        80
00001876= 00000050                 726  SPACER44    DC.L        80
0000187A= 00000050                 727  SPACER55    DC.L        80
0000187E= 00000050                 728  SPACER66    DC.L        80
00001882= 00000050                 729  SPACER77    DC.L        80
00001886= 00000050                 730  SPACER88    DC.L        80
0000188A= 00000050                 731  SPACER99    DC.L        80
0000188E= 00000050                 732  SPACERAA    DC.L        80
00001892= 00000050                 733  SPACERBB    DC.L        80
00001896= 00000050                 734  SPACERCC    DC.L        80
0000189A= 00000050                 735  SPACERDD    DC.L        80
0000189E= 00000050                 736  SPACEREE    DC.L        80
000018A2= 00000050                 737  SPACERFF    DC.L        80
000018A6                           738  
000018A6                           739              END         START       *LAST LINE

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_CHAR_B          11E2
ADD_CHAR_G          122A
AH_DONE             1092
ASCII_HEX           107A
BAD_STR             1866
CONTINUE            10F0
CR                  D
DECODE_LOOP         10B6
DONE                1268
END_ADDR            17FD
END_MSG             178E
END_OPT             1262
FORMAT              10A8
GET_INPUT           1020
GOOD_STR            1826
HEX_ASCII_B         11A8
HEX_ASCII_G         11EE
INIT_BAD            1170
INIT_GOOD           1138
INIT_STRS           112A
INTRO               1012
ISO_DIG_B           11BA
ISO_DIG_G           1202
JMP_TBL             126E
LET                 109E
LET_B               11DA
LET_G               1222
LF                  A
NEXT_PAGE           1104
NL_INTRO            16C4
NUM                 1094
NUM_B               11D2
NUM_G               121A
NXT_PG              17AF
OC4E7_0             15A0
OC4E7_1             15B0
OC4E7_2             15C0
OC4E7_3             15D0
OC4E7_4             15E0
OC4E7_5             15F0
OC4E7_6             1600
OC4E7_7             1610
OC4E7_8             1620
OC4E7_9             1630
OC4E7_A             1640
OC4E7_B             1650
OC4E7_C             1660
OC4E7_D             1670
OC4E7_E             1680
OC4E_0              149E
OC4E_1              14AE
OC4E_2              14BE
OC4E_3              14CE
OC4E_4              14DE
OC4E_5              14EE
OC4E_6              14FE
OC4E_7              150E
OC4E_8              151E
OC4E_9              152E
OC4E_A              153E
OC4E_B              154E
OC4E_C              155E
OC4E_D              156E
OC4E_E              157E
OC4_0               1378
OC4_1               1388
OC4_2               1398
OC4_3               13A8
OC4_4               13B8
OC4_5               13C8
OC4_6               13D8
OC4_7               13E8
OC4_8               13F8
OC4_9               1408
OC4_A               1418
OC4_B               1428
OC4_C               1438
OC4_D               1448
OC4_E               1458
OC_0                127A
OC_1                128A
OC_2                129A
OC_3                12AA
OC_4                12BA
OC_5                12CA
OC_6                12DA
OC_7                12EA
OC_8                12FA
OC_9                130A
OC_A                131A
OC_B                132A
OC_C                133A
OC_D                134A
OC_E                135A
OPC4E7_0            1696
OPC4E7_1            1698
OPC4E7_2            16AA
OPC4E7_3            16AC
OPC4E7_4            16AE
OPC4E7_5            16B0
OPC4E7_6            16B2
OPC4E7_7            16B4
OPC4E7_8            16B6
OPC4E7_9            16B8
OPC4E7_A            16BA
OPC4E7_B            16BC
OPC4E7_C            16BE
OPC4E7_D            16C0
OPC4E7_E            16C2
OPC4E_0             1584
OPC4E_1             1586
OPC4E_2             1588
OPC4E_3             158A
OPC4E_4             158C
OPC4E_5             158E
OPC4E_6             1590
OPC4E_7             1592
OPC4E_8             1688
OPC4E_9             168A
OPC4E_A             168C
OPC4E_B             168E
OPC4E_C             1690
OPC4E_D             1692
OPC4E_E             1694
OPC4_0              1474
OPC4_1              1476
OPC4_2              1478
OPC4_3              147A
OPC4_4              147C
OPC4_5              147E
OPC4_6              1480
OPC4_7              1482
OPC4_8              1484
OPC4_9              1486
OPC4_A              1488
OPC4_B              148A
OPC4_C              148C
OPC4_D              148E
OPC4_E              1490
OPC_0               1362
OPC_1               1364
OPC_2               1366
OPC_3               1368
OPC_4               136A
OPC_5               1460
OPC_6               1462
OPC_7               1464
OPC_8               1466
OPC_9               1468
OPC_A               146A
OPC_B               146C
OPC_C               146E
OPC_D               1470
OPC_E               1472
PRINT_B             124C
PRINT_BAD           10E6
PRINT_G             1236
PRINT_GOOD          10DC
PROC_END            106E
PROC_STA            1062
SPACER1             182A
SPACER11            186A
SPACER2             182E
SPACER22            186E
SPACER3             1832
SPACER33            1872
SPACER4             1836
SPACER44            1876
SPACER5             183A
SPACER55            187A
SPACER6             183E
SPACER66            187E
SPACER7             1842
SPACER77            1882
SPACER8             1846
SPACER88            1886
SPACER9             184A
SPACER99            188A
SPACERA             184E
SPACERAA            188E
SPACERB             1852
SPACERBB            1892
SPACERC             1856
SPACERCC            1896
SPACERD             185A
SPACERDD            189A
SPACERE             185E
SPACEREE            189E
SPACERF             1862
SPACERFF            18A2
START               1000
STA_ADDR            17D5
STA_MSG             176B
