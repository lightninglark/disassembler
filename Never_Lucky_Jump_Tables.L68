00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/1/2017 7:38:00 AM

00000000                             1  ************************************************************
00000000                             2  * TEAM NEVERY LUCKY DISSASSEMBLER
00000000                             3  * This file includes OPCODE logic (OPCODE and size decoding)
00000000                             4  ************************************************************
00000000                             5  
00000000                             6  *-----------------------JMP_TBL------------------------------
00000000                             7  * Purpose: JMP_TBL takes a data register input (D7) and navigates to the correct OPCODE table
00000000                             8  *          entry.
00000000                             9  *          $FF is saved to D6 if OPCode is determined to be incorrect
00000000                            10  * Assumption: Whenever JMP_TBL is called, D7 contains the next new machine code instruction
00000000                            11  *------------------------------------------------------------
00000000                            12  
00000000                            13  *============================================================
00000000                            14  *===================ID FIRST OPCODE DIGIT====================
00000000                            15  *============================================================
00000000  4282                      16  JMP_TBL     CLR.L       D2
00000002  3407                      17              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000004  4281                      18              CLR.L       D1
00000006  123C 000C                 19              MOVE.B      #12,D1      *Moves 12 into D1
0000000A  E26A                      20              LSR.W       D1,D2       *Shifts 12 bits so the remaining contents = the left 4 bits of D7
0000000C                            21                          
0000000C  B43C 0000                 22  JMP_0       CMP.B       #$0,D2      *Following section determines what hex value the first 4 digits are
00000010  6600 000A                 23              BNE         JMP_1       *If the first hex value is not 0, branch and see if its 1
00000014  4EB9 00000186             24              JSR         JMP_0X      *If the first hex value is 0, jump to JMP_0X to determine the next set of digits
0000001A  4E75                      25              RTS                     *Finished all jumping; whole instruction should be identified at this point
0000001C                            26              
0000001C  B43C 0001                 27  JMP_1       CMP.B       #$1,D2
00000020  6600 000A                 28              BNE         JMP_2       *If the first hex value is not 2, branch and see if its 3, and so on
00000024  4EB9 00000446             29              JSR         OPC_MOVEB   *If the first hex value is 1, the instruction is determined to be MOVE.B. Jump to OPC_MOVEB in OPCODE table.
0000002A  4E75                      30              RTS                     *Finished all jumping; whole instruction should be identified at this point, and so on       
0000002C                            31             
0000002C  B43C 0002                 32  JMP_2       CMP.B       #$2,D2
00000030  6600 000A                 33              BNE         JMP_3 
00000034  4EB9 000001B2             34              JSR         JMP_2X      *If the first hex value is 2, jump to JMP_2X to determine the next set of digits
0000003A  4E75                      35              RTS
0000003C                            36              
0000003C  B43C 0003                 37  JMP_3       CMP.B       #$3,D2
00000040  6600 000A                 38              BNE         JMP_4
00000044  4EB9 000001D6             39              JSR         JMP_3X      *If the first hex value is 3, jump to JMP_3X to determine the next set of digits
0000004A  4E75                      40              RTS
0000004C                            41           
0000004C  B43C 0004                 42  JMP_4       CMP.B       #$4,D2      *Where NOP SHOULD LAND
00000050  6600 000A                 43              BNE         JMP_5
00000054  4EB9 000001FA             44              JSR         JMP_4X      *If the first hex value is 4, jump to JMP_4X to determine the next set of digits
0000005A  4E75                      45              RTS
0000005C                            46              
0000005C  B43C 0005                 47  JMP_5       CMP.B       #$5,D2
00000060  6600 000A                 48              BNE         JMP_6
00000064  4EB9 0000046A             49              JSR         OPC_ADDQ    *If the first hex digit is 5, the instruction is determined to be ADDQ. Jump to OPC_ADDQ in OPCODE table.
0000006A  4E75                      50              RTS
0000006C                            51              
0000006C  B43C 0006                 52  JMP_6       CMP.B       #$6,D2
00000070  6600 000A                 53              BNE         JMP_7
00000074  4EB9 00000242             54              JSR         JMP_6X      *If the first hex value is 6, jump to JMP_6X to determine the next set of digits
0000007A  4E75                      55              RTS
0000007C                            56              
0000007C  B43C 0007                 57  JMP_7       CMP.B       #$7,D2
00000080  6600 000A                 58              BNE         JMP_8
00000084  4EB9 00000492             59              JSR         OPC_MOVEQ    *If the first hex digit is 7, the instruction is determined to be MOVEQ. Jump to OPC_MOVEQ in OPCODE table.
0000008A  4E75                      60              RTS
0000008C                            61              
0000008C  B43C 0008                 62  JMP_8       CMP.B       #$8,D2
00000090  6600 000A                 63              BNE         JMP_9
00000094  4EB9 00000266             64              JSR         JMP_8X      *If the first hex value is 8, jump to JMP_8X to determine the next set of digits
0000009A  4E75                      65              RTS
0000009C                            66              
0000009C  B43C 0009                 67  JMP_9       CMP.B       #$9,D2
000000A0  6600 000A                 68              BNE         JMP_A
000000A4  4EB9 000004AE             69              JSR         OPC_SUB    *If the first hex digit is 9, the instruction is determined to be SUB. Jump to OPC_9XXX in OPCODE table.
000000AA  4E75                      70              RTS
000000AC                            71              
000000AC  B43C 000A                 72  JMP_A       CMP.B       #$A,D2
000000B0  6600 000A                 73              BNE         JMP_B
Line 74 ERROR: Undefined symbol
000000B4  4EB9 004DBB8E             74              JSR         INVALID     *0x A is an invalid first hex digit. Jump to INVALID
000000BA  4E75                      75              RTS
000000BC                            76              
000000BC  B43C 000B                 77  JMP_B       CMP.B       #$B,D2
000000C0  6600 000A                 78              BNE         JMP_C
Line 79 ERROR: Undefined symbol
000000C4  4EB9 004DBB8E             79              JSR         INVALID     *0xB is an invalid first hex digit. Jump to INVALID
000000CA  4E75                      80              RTS
000000CC                            81              
000000CC  B43C 000C                 82  JMP_C       CMP.B       #$C,D2
000000D0  6600 000A                 83              BNE         JMP_D
000000D4  4EB9 0000028A             84              JSR         JMP_CX
000000DA                            85        *If the first hex value is C, jump to JMP_CX to determine the next set of digits
000000DA  4E75                      86              RTS
000000DC                            87              
000000DC  B43C 000D                 88  JMP_D       CMP.B       #$D,D2
000000E0  6600 000A                 89              BNE         JMP_E   
000000E4  4EB9 000002AE             90              JSR         JMP_DX      *If the first hex value is D, jump to JMP_DX to determine the next set of digits
000000EA  4E75                      91              RTS
000000EC                            92              
000000EC  B43C 000F                 93  JMP_E       CMP.B       #$F,D2      *If first hex value is not 0-D, it must be E(valid) or F(invalid)
000000F0  6700 000A                 94              BEQ         INV_OP      *If first hex value is F, jump to INVALID
000000F4  4EB9 00000312             95              JSR         JMP_EX      *If the first hex value is E, jump to JMP_EX to determine the next set of digits
000000FA  4E75                      96              RTS
000000FC                            97              
Line 98 ERROR: Undefined symbol
000000FC  4EF9 004DBB8E             98  INV_OP      JMP         INVALID     *Got here? Must be invalid.
00000102  4E75                      99              RTS
00000104                           100   
00000104                           101  *============================================================
00000104                           102  *==================ID SECOND OPCODE DIGIT====================
00000104                           103  *============================================================
00000104                           104  *------------------ Helper functions ------------------------
00000104                           105  * J_CLR4 prepares the data registers for data manipulation on the second input hex digit by isolating the next 4 bits:
00000104                           106  * %0000 XXXX 0000 0000
00000104  4282                     107  J_CLR4      CLR.L       D2                                
00000106  3407                     108              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000108  4281                     109              CLR.L       D1
0000010A  E94A                     110              LSL.W       #4,D2       *Clear the most sig hex digit
0000010C  123C 000C                111              MOVE.B      #12,D1      *Moves 12 into D1
00000110  E26A                     112              LSR.W       D1,D2       *Shifts 12 right to isolate the bits we're working with
00000112  4E75                     113              RTS                     *Return back to JMP_Xn    
00000114                           114              
00000114                           115  * J_CLR3 prepares the data registers for data manipulation by isolating the next 3 bits:
00000114                           116  * %0000 XXX0 0000 0000 0000          
00000114  4282                     117  J_CLR3      CLR.L       D2          
00000116  3407                     118              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000118  4281                     119              CLR.L       D1
0000011A  E94A                     120              LSL.W       #4,D2       *Clear the most sig hex digit
0000011C  123C 000D                121              MOVE.B      #13,D1      *Moves 13 into D1
00000120  E26A                     122              LSR.W       D1,D2       *Shifts 13 right to isolate the bits we're working with 
00000122  4E75                     123              RTS                     *Return back to JMP_Xn  
00000124                           124  
00000124                           125  * J_CLR1 prepares the data registers for data manipulation by isolating the rightmost bit of the second hex dig:
00000124                           126  * %0000 0000 0000 XX00 0000                   
00000124  4282                     127  J_CLR2      CLR.L       D2          
00000126  3407                     128              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000128  4281                     129              CLR.L       D1
0000012A  E14A                     130              LSL.W       #8,D2       *Clear the most sig 7 bits
0000012C  123C 000E                131              MOVE.B      #14,D1      *Moves 16 into D1
00000130  E26A                     132              LSR.W       D1,D2       *Shifts 16 right to isolate the bit we're working with 
00000132  4E75                     133              RTS     
00000134                           134  
00000134                           135  * J_CLR1 prepares the data registers for data manipulation by isolating the rightmost bit of the second hex dig:
00000134                           136  * %0000 000X 0000 0000 0000                   
00000134  4282                     137  J_CLR1      CLR.L       D2          
00000136  3407                     138              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000138  4281                     139              CLR.L       D1
0000013A  EF4A                     140              LSL.W       #7,D2       *Clear the most sig 7 bits
0000013C  123C 000F                141              MOVE.B      #15,D1      *Moves 16 into D1
00000140  E26A                     142              LSR.W       D1,D2       *Shifts 16 right to isolate the bit we're working with 
00000142  4E75                     143              RTS                     *Return back to JMP_Xn
00000144                           144          
00000144                           145  * %0000 000X XX00 0000        
00000144  4282                     146  J_CLR_LEA   CLR.L       D2          
00000146  3407                     147              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000148  4281                     148              CLR.L       D1
0000014A  EF4A                     149              LSL.W       #7,D2       *Clear the most sig 7 bits
0000014C  123C 000D                150              MOVE.B      #13,D1      *Moves 13 into D1
00000150  E26A                     151              LSR.W       D1,D2       *Shifts 13 right to isolate the bit we're working with 
00000152  4E75                     152              RTS    
00000154                           153              
00000154                           154  * %XXXX X000 0000 0000   
00000154  4282                     155  J_CLR_MM    CLR.L       D2          
00000156  3407                     156              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000158  4281                     157              CLR.L       D1   
0000015A  123C 000B                158              MOVE.B      #11,D1      *Moves 11 into D1
0000015E  E26A                     159              LSR.W       D1,D2       *Shifts 11 right to isolate the bit we're working with 
00000160  4E75                     160              RTS  
00000162                           161       
00000162                           162  * J_CLR_DM prepares the data registers for data manipulation by isolating the DESTINATION MODE bits:
00000162                           163  * Also alternatively known as the OPMODE bits for some OPCODES: OR, DIVU, SUB, ADDA, ADD
00000162                           164  * %0000 000X XX00 0000 0000          
00000162  4282                     165  J_CLR_DM    CLR.L       D2          
00000164  3407                     166              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000166  4281                     167              CLR.L       D1
00000168  EF4A                     168              LSL.W       #7,D2       *Clear the most sig 7 bits
0000016A  123C 000D                169              MOVE.B      #13,D1      *Moves 13 into D1
0000016E  E26A                     170              LSR.W       D1,D2       *Shifts 13 right to isolate the bits we're working with 
00000170  4E75                     171              RTS                     *Return back to JMP_Xn     
00000172                           172  
00000172                           173  * %0000 0000 000X X000            
00000172  4282                     174  J_CLR_SHFT  CLR.L       D2
00000174  3407                     175              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000176  4281                     176              CLR.L       D1
00000178  183C 000B                177              MOVE.B      #11,D4      *Moves 11 into D4
0000017C  E96A                     178              LSL.W       D4,D2      *Clear the most sig 11 bits
0000017E  123C 000E                179              MOVE.B      #14,D1      *Moves 14 into D1
00000182  E26A                     180              LSR.W       D1,D2       *Shifts 14 right to isolate the bits we're working with 
00000184  4E75                     181              RTS                     *Return back to JMP_Xn 
00000186                           182              
00000186                           183   
00000186                           184  *---------------End Helper functions ------------------------
00000186                           185  
00000186                           186          
00000186                           187  *---------------------SUBI, ADDI-----------------------------
00000186  4EB8 0104                188  JMP_0X      JSR         J_CLR4      *Isolate next hex digit
0000018A  B43C 0004                189              CMP.B       #$4,D2      *Is the next hex digit 4?
0000018E  6700 0012                190              BEQ         J_SUBI      *Instruction is determined to be SUBI. Jump to intermediate OPCODE table jump
00000192  B43C 0006                191              CMP.B       #$6,D2      *Is the next hex digit 5?
00000196  6700 0012                192              BEQ         J_ADDI      *Instruction is determined to be ADDI. Jump to intermediate OPCODE table jump
Line 193 ERROR: Undefined symbol
0000019A  4EB9 004DBB8E            193              JSR         INVALID     *If neither, OPCODE is invalid
000001A0  4E75                     194              RTS
000001A2                           195  
000001A2  4EB9 000003F6            196  J_SUBI      JSR         OPC_SUBI    *Jump to OPC_SUBI in OPCODE table
000001A8  4E75                     197              RTS
000001AA                           198              
000001AA  4EB9 0000041E            199  J_ADDI      JSR         OPC_ADDI    *Jump to OPC_ADDI in OPCODE table
000001B0  4E75                     200              RTS              
000001B2                           201  
000001B2                           202  *---------------------MOVE.L, MOVEA.L----------------------------- 
000001B2                           203  * NOTE - NO INVALID CASE. Probably correct tho-
000001B2                           204  
000001B2  4EB8 0162                205  JMP_2X      JSR         J_CLR_DM    *Isolate the destination mode bits %0000 000X XX00 0000 0000  
000001B6  B43C 0001                206              CMP.B       #$1,D2      *is the DEST MODE 1?
000001BA  6700 000A                207              BEQ         J_MOVEAL    *Instruction is determined to be MOVEA.L Jump to intermediate OPCODE table jump
000001BE  4EB9 000001CE            208              JSR         J_MOVEL     *Otherwise, Instruction is determined to be MOVE.L Jump to intermediate OPCODE table jump
000001C4  4E75                     209              RTS
000001C6                           210  
000001C6  4EB9 00000536            211  J_MOVEAL    JSR         OPC_MOVEAL  *Jump to OPC_MOVEAL in OPCODE table
000001CC  4E75                     212              RTS
000001CE                           213  
000001CE  4EB9 00000562            214  J_MOVEL     JSR         OPC_MOVEL   *Jump to OPC_MOVEL in OPCODE table   
000001D4  4E75                     215              RTS                           
000001D6                           216  *---------------------MOVE.W, MOVEA.W----------------------------- 
000001D6                           217  * NOTE - NO INVALID CASE. Probably correct tho- 
000001D6                           218              
000001D6  4EB8 0162                219  JMP_3X      JSR         J_CLR_DM    *Isolate the destination mode bits %0000 000X XX00 0000 0000  
000001DA  B43C 0001                220              CMP.B       #$1,D2      *is the DEST MODE 1?
000001DE  6700 000A                221              BEQ         J_MOVEAW    *Instruction is determined to be MOVEA.W Jump to intermediate OPCODE table jump
000001E2  4EB9 000001F2            222              JSR         J_MOVEW     *Otherwise, Instruction is determined to be MOVE.W Jump to intermediate OPCODE table jump
000001E8  4E75                     223              RTS
000001EA                           224  
000001EA  4EB9 0000058A            225  J_MOVEAW    JSR         OPC_MOVEAW  *Jump to OPC_MOVEAW in OPCODE table
000001F0  4E75                     226              RTS
000001F2                           227  
000001F2  4EB9 000005B6            228  J_MOVEW     JSR         OPC_MOVEW   *Jump to OPC_MOVEW in OPCODE table 
000001F8  4E75                     229              RTS
000001FA                           230  *-----------------NOP, MOVEM, LEA, JSR, RTS-----------------------
000001FA  4EB8 0104                231  JMP_4X      JSR         J_CLR4      *Isolate next hex digit   
000001FE  B43C 000E                232              CMP.B       #$E,D2      *Is the next hex digit E?
00000202  6700 0026                233              BEQ         J_47X       *Instruction is determined to be NOP, JSR, or RTS. Jump to JMP_47X to determine.
00000206  4EB8 0134                234              JSR         J_CLR1      *Otherwise, isolate the %0000 000X 0000 0000 digit
0000020A  4EB8 0144                235              JSR         J_CLR_LEA
0000020E  B43C 0007                236              CMP.B       #7,D2       *Is the last bit 7?
00000212  6700 001E                237              BEQ         J_LEA       *Instruction is determined to be LEA. Jump to intermediate OPCODE table jump 
00000216  4EB8 0154                238              JSR         J_CLR_MM
0000021A  B43C 0009                239              CMP.B       #9,D2       *Is the last bit 0?
0000021E  6700 001A                240              BEQ         J_MOVEM     *Instruction is determined to be MOVEM. Jump to intermediate OPCODE table jump 
Line 241 ERROR: Undefined symbol
00000222  4EB9 004DBB8E            241              JSR         INVALID     *If none of the above, OPCODE is invalid
00000228  4E75                     242              RTS                                         
0000022A                           243              
0000022A  4EB9 000003BC            244  J_47X       JSR         JMP_47X     *Instruction is NOP, JSR, or RTS. Jump to JMP_47X to determine.
00000230  4E75                     245              RTS
00000232                           246              
00000232  4EB9 000004CC            247  J_LEA       JSR         OPC_LEA     *Jump to OPC_LEA in the OPCODE table    
00000238  4E75                     248              RTS
0000023A                           249              
0000023A  4EB9 000004EE            250  J_MOVEM     JSR         OPC_MOVEM   *Jump to OPC_MOVEM in the OPCODE table
00000240  4E75                     251              RTS
00000242                           252              
00000242                           253  *------------------Bcc(BCC, BLT, BGE), BRA------------------------
00000242  4EB8 0104                254  JMP_6X      JSR         J_CLR4       *Isolate next hex digit 
00000246  B43C 0000                255              CMP.B       #0,D2        *Is the next hex digit 0?
0000024A  6700 000A                256              BEQ         J_BRA        *Instruction is determined to be BRA. Jump to intermediate OPCODE table jump
0000024E  4EB9 0000025E            257              JSR         J_Bcc        *Otherwise, Instruction is determined to be some form of Bcc. Jump to intermediate OPCODE table jump
00000254  4E75                     258              RTS
00000256                           259              
00000256  4EB9 000005DE            260  J_BRA       JSR         OPC_BRA      *Jump to OPC_BRA in the OPCODE table  
0000025C                           261  
0000025C  4E75                     262              RTS
0000025E                           263  
0000025E  4EB9 000005FA            264  J_Bcc       JSR         OPC_Bcc      *Jump to OPC_Bcc in the OPCODE table  
00000264                           265  
00000264  4E75                     266              RTS
00000266                           267              
00000266                           268  *------------------------OR, DIVU---------------------------------     
00000266  4EB8 0162                269  JMP_8X      JSR         J_CLR_DM    *Isolate the OPMODE bits %0000 000X XX00 0000 0000
0000026A  B43C 0003                270              CMP.B       #3,D2       *Are the bits equivalent to $3?
0000026E  6700 000A                271              BEQ         J_DIVU      *Instruction is determined to be DIVU. Jump to intermediate OPCODE table jump
00000272  4EB9 00000282            272              JSR         J_OR        *Otherwise, Instruction is determined to be OR. Jump to intermediate OPCODE table jump
00000278  4E75                     273              RTS
0000027A                           274  
0000027A  4EB9 00000606            275  J_DIVU      JSR         OPC_DIVU    *Jump to OPC_DIVU in the OPCODE table  
00000280  4E75                     276              RTS
00000282                           277              
00000282  4EB9 0000062C            278  J_OR        JSR         OPC_OR      *Jump to OPC_OR in the OPCODE table  
00000288  4E75                     279              RTS
0000028A                           280  
0000028A                           281  *-----------------------MULS, AND---------------------------------  
0000028A  4EB8 0162                282  JMP_CX      JSR         J_CLR_DM    *Isolate the OPMODE bits %0000 000X XX00 0000 0000
0000028E  B43C 0007                283              CMP.B       #7,D2       *Are the bits equivalent to $7?
00000292  6700 000A                284              BEQ         J_MULS      *Instruction is determined to be MULS. Jump to intermediate OPCODE table jump
00000296  4EB9 000002A6            285              JSR         J_AND       *Otherwise, Instruction is determined to be AND. Jump to intermediate OPCODE table jump
0000029C  4E75                     286              RTS
0000029E                           287  
0000029E  4EB9 00000646            288  J_MULS      JSR         OPC_MULS    *Jump to OPC_MULS in the OPCODE table  
000002A4  4E75                     289              RTS
000002A6                           290              
000002A6  4EB9 0000066C            291  J_AND       JSR         OPC_AND     *Jump to OPC_AND in the OPCODE table  
000002AC  4E75                     292              RTS
000002AE                           293  
000002AE                           294  *-----------------------ADD, ADDA--------------------------------
000002AE  4EB8 0162                295  JMP_DX      JSR         J_CLR_DM    *Isolate OPMODE bits to determine if ADD or ADDA
000002B2  4284                     296              CLR.L       D4          *For adding size (easy to do it here).
000002B4  183C 0001                297              MOVE.B      #1,D4       *Set size to WORD
000002B8  B43C 0003                298              CMP.B       #3,D2       *Is it Word ADDA?
000002BC  6700 0044                299              BEQ         OP_ADDA
000002C0  183C 0002                300              MOVE.B      #2,D4       *set size to LONG
000002C4  B43C 0007                301              CMP.B       #7,D2       *is it Long ADDA?
000002C8  6700 0038                302              BEQ         OP_ADDA
000002CC                           303              
000002CC  4284                     304              CLR.L       D4          *Not ADDA? Clear the manual size sets
000002CE                           305              
000002CE  B83C 0000                306              CMP.B       #0,D4       Is it ADD?
000002D2  6700 0036                307              BEQ         OP_ADD
000002D6  B83C 0001                308              CMP.B       #1,D4       
000002DA  6700 002E                309              BEQ         OP_ADD
000002DE  B83C 0002                310              CMP.B       #2,D4       
000002E2  6700 0026                311              BEQ         OP_ADD
000002E6  B83C 0004                312              CMP.B       #4,D4 
000002EA  6700 001E                313              BEQ         OP_ADD
000002EE  B83C 0005                314              CMP.B       #5,D4     
000002F2  6700 0016                315              BEQ         OP_ADD
000002F6  B83C 0006                316              CMP.B       #6,D4     
000002FA  6700 000E                317              BEQ         OP_ADD       
000002FE                           318           
Line 319 ERROR: Undefined symbol
000002FE  6000 B88E                319              BRA         INVALID     *Got here, must be invalid data.    
00000302                           320              
00000302  4EB9 0000068A            321  OP_ADDA     JSR         OPC_ADDA
00000308  4E75                     322              RTS
0000030A                           323              
0000030A  4EB9 000006AC            324  OP_ADD      JSR         OPC_ADD
00000310  4E75                     325              RTS
00000312                           326              
00000312                           327  *------LSL/LSR REG/MEM, ASL/ASR REG/MEM, ROL/ROR REG/MEM---------
00000312                           328  
00000312  4EB8 0124                329  JMP_EX      JSR         J_CLR2
00000316  B43C 0003                330              CMP.B       #3,D2          *Is it a memory variant?
0000031A  6700 0020                331              BEQ         SR_MEM_VAR  
0000031E  B43C 0000                332              CMP.B       #0,D2
00000322  6700 0020                333              BEQ         SR_REG_VAR  *Is it a reg variant
00000326  B43C 0001                334              CMP.B       #1,D2
0000032A  6700 0018                335              BEQ         SR_REG_VAR
0000032E  B43C 0002                336              CMP.B       #2,D2
00000332  6700 0010                337              BEQ         SR_REG_VAR
Line 338 ERROR: Undefined symbol
00000336  4EF9 004DBB8E            338              JMP         INVALID     *Got here? Mus be invalid.
0000033C                           339              
0000033C  4EB9 0000034C            340  SR_MEM_VAR  JSR         SRMEM_VAR
00000342  4E75                     341              RTS
00000344                           342  
00000344  4EB9 00000384            343  SR_REG_VAR  JSR         SRREG_VAR
0000034A  4E75                     344              RTS
0000034C                           345              
0000034C                           346  *------------------SHIFT AND ROTATE MEM VAR-----------------
0000034C                           347  * For memory variant shifts and rotations
0000034C                           348  *-----------------------------------------------------------   
0000034C  4EB8 0114                349  SRMEM_VAR   JSR         J_CLR3      *Isolate unique hardcoded mem section
00000350  B43C 0000                350              CMP.B       #0,D2
00000354  6700 0016                351              BEQ         OP_AS_MEM  *Is it as AS?
00000358  B43C 0001                352              CMP.B       #1,D2
0000035C  6700 0016                353              BEQ         OP_LS_MEM  *Is it a LS
00000360  B43C 0003                354              CMP.B       #3,D2
00000364  6700 0016                355              BEQ         OP_RO_MEM  *Is it a RO
Line 356 ERROR: Undefined symbol
00000368  6000 B824                356              BRA         INVALID     *Got here? Must be invalid
0000036C                           357              
0000036C  4EB9 00000702            358  OP_AS_MEM   JSR         OPC_AS_MEM
00000372  4E75                     359              RTS
00000374                           360  
00000374  4EB9 0000071C            361  OP_LS_MEM   JSR         OPC_LS_MEM
0000037A  4E75                     362              RTS
0000037C                           363  
0000037C  4EB9 00000736            364  OP_RO_MEM   JSR         OPC_RO_MEM
00000382  4E75                     365              RTS
00000384                           366              
00000384                           367  
00000384                           368  
00000384                           369  *------------------SHIFT AND ROTATE MEM VAR-----------------
00000384                           370  * For memory variant shifts and rotations
00000384                           371  *-----------------------------------------------------------
00000384  4EB8 0172                372  SRREG_VAR   JSR         J_CLR_SHFT *Isolate hardoced unique
00000388  B43C 0000                373              CMP.B       #0,D2       *Is it a AS?
0000038C  6700 0016                374              BEQ         OP_AS_REG
00000390  B43C 0001                375              CMP.B       #1,D2       *Is it a LS?
00000394  6700 0016                376              BEQ         OP_LS_REG
00000398  B43C 0003                377              CMP.B       #3,D2       *is it a RO?
0000039C  6700 0016                378              BEQ         OP_RO_REG
Line 379 ERROR: Undefined symbol
000003A0  6000 B7EC                379              BRA         INVALID     *Got here? Must be invalid.
000003A4                           380  
000003A4  4EB9 00000750            381  OP_AS_REG   JSR         OPC_AS_REG
000003AA  4E75                     382              RTS   
000003AC                           383  
000003AC  4EB9 00000776            384  OP_LS_REG   JSR         OPC_LS_REG
000003B2  4E75                     385              RTS
000003B4                           386  
000003B4  4EB9 0000079C            387  OP_RO_REG   JSR         OPC_RO_REG
000003BA  4E75                     388              RTS
000003BC                           389  
000003BC                           390  
000003BC                           391  
000003BC                           392  
000003BC                           393  *JMP_EX      *Change to isolate size
000003BC                           394  *            JSR         J_CLR2      *Isolate size to see if memory variant
000003BC                           395  *            CMP.B       #3,D2       
000003BC                           396  *            BEQ         JMP_AS_MEM  *Instruction is determined to be ASR or ASL MEMORY variant
000003BC                           397  *            CMP.B       #1,D2
000003BC                           398  *            BEQ         JMP_LS_MEM  *Instruction is determined to be LSR or LSL MEMORY variant
000003BC                           399  *            CMP.B       #3,D2       
000003BC                           400  *            BEQ         JMP_RO_MEM  *Instruction is determined to be ROR or ROL MEMORY variant
000003BC                           401  *                                    *If none of the above, possibly a REGISTER variant
000003BC                           402  *                                    
000003BC                           403  *            JSR         J_CLR_SHFT  *Isolate the identifying bits that determine whether LS(L/R) / AS(L/R) / RO(L/R) for the REGISTER variant          
000003BC                           404  *            CMP.B       #0,D2
000003BC                           405  *            BEQ         JMP_AS_REG  *Instruction is determined to be ASR or ASL REGISTER variant
000003BC                           406  *            CMP.B       #1,D2
000003BC                           407  *            BEQ         JMP_LS_REG  *Instruction is determined to be LSR or LSL REGISTER variant 
000003BC                           408  *            CMP.B       #3,D2
000003BC                           409  *            BEQ         JMP_RO_REG  *Instruction is determined to be ROR or ROL REGISTER variant
000003BC                           410  *           
000003BC                           411  *            JSR         INVALID     *Otherwise instruction is determined to be invalid
000003BC                           412  *            RTS
000003BC                           413  *           
000003BC                           414  *JMP_AS_MEM  JSR         OPC_AS_MEM
000003BC                           415  *            RTS
000003BC                           416  *
000003BC                           417  *JMP_LS_MEM  JSR         OPC_LS_MEM
000003BC                           418  *            RTS
000003BC                           419  *
000003BC                           420  *JMP_RO_MEM  JSR         OPC_RO_MEM
000003BC                           421  *            RTS
000003BC                           422  *
000003BC                           423  *JMP_AS_REG  JSR         OPC_AS_REG
000003BC                           424  *            RTS
000003BC                           425  *
000003BC                           426  *JMP_LS_REG  JSR         OPC_LS_REG
000003BC                           427  *            RTS
000003BC                           428  *
000003BC                           429  *JMP_RO_REG  JSR         OPC_RO_REG
000003BC                           430  *            RTS           
000003BC                           431  
000003BC                           432       
000003BC                           433  
000003BC                           434  *============================================================
000003BC                           435  *==================ID THIRD OPCODE DIGIT=====================
000003BC                           436  *============================================================
000003BC                           437     
000003BC  BE7C 4E71                438  JMP_47X     CMP.W       #$4E71,D7    *Is it NOP?
000003C0  6700 001C                439              BEQ         O_NOP
000003C4  BE7C 4E75                440              CMP.W       #$4E75,D7       *Is it RTS?
000003C8  6700 001C                441              BEQ         O_RTS
000003CC  4EB8 0124                442              JSR         J_CLR2       *Isolate the 6th and 7th bit
000003D0  B43C 0002                443              CMP.B       #2,D2        *Is it JSR?
000003D4  6700 0018                444              BEQ         O_JSR
Line 445 ERROR: Undefined symbol
000003D8  4EF9 004DBB8E            445              JMP         INVALID      *Got here? Must be invalid data.
000003DE                           446  
000003DE  4EB9 000006E6            447  O_NOP       JSR         OPC_NOP
000003E4  4E75                     448              RTS
000003E6                           449  
000003E6  4EB9 000006F4            450  O_RTS       JSR         OPC_RTS
000003EC  4E75                     451              RTS
000003EE                           452  
000003EE  4EB9 000006CA            453  O_JSR       JSR         OPC_JSR
000003F4  4E75                     454              RTS
000003F6                           455           
000003F6                           456  
000003F6                           457  *============================================================
000003F6                           458  *=====================OPCODE TABLE===========================
000003F6                           459  *================OPCODE KNOWN, PRINTING======================
000003F6                           460  *============================================================
000003F6                           461  * IF YOU DO NOT USE A GET_SIZE_X SUBROUTINE, YOU MUST
000003F6                           462  * MANUALLY SET THE SIZE CODE IN D4. (0 = B, 1 = W, 2 = L)
000003F6                           463  
000003F6                           464  *---------------------SUBI OPCODE----------------------------
000003F6  18FC 0053                465  OPC_SUBI    MOVE.B      #'S',(A4)+
000003FA  18FC 0055                466              MOVE.B      #'U',(A4)+
000003FE  18FC 0042                467              MOVE.B      #'B',(A4)+
00000402  18FC 0049                468              MOVE.B      #'I',(A4)+
00000406  18FC 002E                469              MOVE.B      #'.',(A4)+
0000040A                           470              
0000040A  4EB9 00000A16            471              JSR         GET_SIZE_2  *Get 2 bit size code
00000410  4EB9 000009C4            472              JSR         ADD_SIZE    *Add the size character based on size code
00000416                           473              
Line 474 ERROR: Undefined symbol
00000416  4EB9 004DBB8E            474              JSR         IDATASRC_EA *Jump to #<data>,<ea> operand flow.
0000041C                           475              
0000041C  4E75                     476              RTS
0000041E                           477  
0000041E                           478  *---------------------ADDI OPCODE----------------------------
0000041E  18FC 0041                479  OPC_ADDI    MOVE.B      #'A',(A4)+
00000422  18FC 0044                480              MOVE.B      #'D',(A4)+
00000426  18FC 0044                481              MOVE.B      #'D',(A4)+
0000042A  18FC 0049                482              MOVE.B      #'I',(A4)+
0000042E  18FC 002E                483              MOVE.B      #'.',(A4)+
00000432                           484              
00000432  4EB9 00000A16            485              JSR         GET_SIZE_2  *Get 2 bit size code
00000438  4EB9 000009C4            486              JSR         ADD_SIZE    *Add the size character based on size code
0000043E                           487              
Line 488 ERROR: Undefined symbol
0000043E  4EB9 004DBB8E            488              JSR         IDATASRC_EA *Jump to #<data>,<ea> operand flow.
00000444                           489              
00000444  4E75                     490              RTS
00000446                           491  
00000446                           492  *--------------------MOVE.B OPCODE---------------------------
00000446  18FC 004D                493  OPC_MOVEB   MOVE.B      #'M',(A4)+
0000044A  18FC 004F                494              MOVE.B      #'O',(A4)+
0000044E  18FC 0056                495              MOVE.B      #'V',(A4)+
00000452  18FC 0045                496              MOVE.B      #'E',(A4)+
00000456  18FC 002E                497              MOVE.B      #'.',(A4)+
0000045A                           498  
0000045A                           499  
0000045A  4284                     500              CLR.L       D4          *Manually set size to byte (D4 = 0)
0000045C  4EB9 000009C4            501              JSR         ADD_SIZE    *Add size characters
00000462                           502              
Line 503 ERROR: Undefined symbol
00000462  4EB9 004DBB8E            503              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
00000468                           504              
00000468  4E75                     505              RTS
0000046A                           506  
0000046A                           507  *--------------------ADDQ OPCODE----------------------------
0000046A  18FC 0041                508  OPC_ADDQ    MOVE.B      #'A',(A4)+
0000046E  18FC 0044                509              MOVE.B      #'D',(A4)+
00000472  18FC 0044                510              MOVE.B      #'D',(A4)+
00000476  18FC 0051                511              MOVE.B      #'Q',(A4)+
0000047A  18FC 002E                512              MOVE.B      #'.',(A4)+
0000047E                           513  
0000047E  4EB9 00000A16            514              JSR         GET_SIZE_2   *Get size code (placed in D4)
00000484  4EB9 000009C4            515              JSR         ADD_SIZE     *Add size character to string (B/W/L)
0000048A                           516              
Line 517 ERROR: Undefined symbol
0000048A  4EB9 004DBB8E            517              JSR         ADDQ_EA      *Start the EA/operand decode logic
00000490                           518   
00000490  4E75                     519              RTS
00000492                           520  
00000492                           521  *------------------MOVEQ OPCODE-----------------------------
00000492  18FC 004D                522  OPC_MOVEQ   MOVE.B      #'M',(A4)+
00000496  18FC 004F                523              MOVE.B      #'O',(A4)+
0000049A  18FC 0056                524              MOVE.B      #'V',(A4)+
0000049E  18FC 0045                525              MOVE.B      #'E',(A4)+
000004A2  18FC 0051                526              MOVE.B      #'Q',(A4)+
000004A6                           527              
Line 528 ERROR: Undefined symbol
000004A6  4EB9 004DBB8E            528              JSR         MOVEQ_EA     *Start the EA/opderand decode logic for moveq
000004AC                           529            
000004AC  4E75                     530              RTS
000004AE                           531  
000004AE                           532  *------------------SUB OPCODE-------------------------------
000004AE  18FC 0053                533  OPC_SUB     MOVE.B      #'S',(A4)+
000004B2  18FC 0055                534              MOVE.B      #'U',(A4)+
000004B6  18FC 0042                535              MOVE.B      #'B',(A4)+
000004BA  18FC 002E                536              MOVE.B      #'.',(A4)+
000004BE                           537  
000004BE  4EB9 00000A06            538              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
000004C4                           539              
000004C4  4EB9 00000A3C            540              JSR         OR_ADD_SIZE    * This will add size characters and start operand decode sequence
000004CA                           541  
000004CA  4E75                     542              RTS
000004CC                           543  
000004CC                           544  *------------------LEA OPCODE-------------------------------            
000004CC  18FC 004C                545  OPC_LEA     MOVE.B      #'L',(A4)+
000004D0  18FC 0045                546              MOVE.B      #'E',(A4)+
000004D4  18FC 0041                547              MOVE.B      #'A',(A4)+
000004D8  18FC 0020                548              MOVE.B      #' ',(A4)+
000004DC  18FC 0020                549              MOVE.B      #' ',(A4)+
000004E0                           550              
000004E0  4284                     551              CLR.L       D4          *Manually set size to byte (D4 = 0)
000004E2  183C 0002                552              MOVE.B      #2,D4       *Manually set size to long.
000004E6                           553              
Line 554 ERROR: Undefined symbol
000004E6  4EB9 004DBB8E            554              JSR         EASRC_ADES
000004EC                           555              
000004EC  4E75                     556              RTS
000004EE                           557              
000004EE                           558  *------------------MOVEM OPCODE----------------------------- 
000004EE  18FC 004D                559  OPC_MOVEM   MOVE.B      #'M',(A4)+
000004F2  18FC 004F                560              MOVE.B      #'O',(A4)+
000004F6  18FC 0056                561              MOVE.B      #'V',(A4)+
000004FA  18FC 0045                562              MOVE.B      #'E',(A4)+
000004FE  18FC 004D                563              MOVE.B      #'M',(A4)+
00000502  18FC 002E                564              MOVE.B      #'.',(A4)+
00000506                           565              
00000506  4EB9 00000A26            566              JSR         GET_SIZE_1
0000050C                           567              
0000050C  B83C 0000                568              CMP.B       #0,D4       *Change size code so it matches standard formatting
00000510  6700 000A                569              BEQ         MM_WORD
00000514  B83C 0001                570              CMP.B       #1,D4
00000518  6700 000A                571              BEQ         MM_LONG
0000051C                           572  
0000051C  183C 0001                573  MM_WORD     MOVE.B      #1,D4
00000520  6000 0006                574              BRA         MM_ADD_S
00000524                           575  
00000524  183C 0002                576  MM_LONG     MOVE.B      #2,D4
00000528                           577         
00000528  4EB9 000009C4            578  MM_ADD_S    JSR         ADD_SIZE
Line 579 ERROR: Undefined symbol
0000052E  4EB9 004DBB8E            579              JSR         MM_OP_ORD
00000534                           580              
00000534  4E75                     581              RTS
00000536                           582  
00000536                           583  
00000536                           584  *------------------MOVEA.L OPCODE----------------------------
00000536  18FC 004D                585  OPC_MOVEAL  MOVE.B      #'M',(A4)+
0000053A  18FC 004F                586              MOVE.B      #'O',(A4)+
0000053E  18FC 0056                587              MOVE.B      #'V',(A4)+
00000542  18FC 0045                588              MOVE.B      #'E',(A4)+
00000546  18FC 0041                589              MOVE.B      #'A',(A4)+
0000054A  18FC 002E                590              MOVE.B      #'.',(A4)+
0000054E                           591  
0000054E  4284                     592              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000550  183C 0002                593              MOVE.B      #2,D4       *Set size code to long
00000554  4EB9 000009C4            594              JSR         ADD_SIZE    *Add size characters
0000055A                           595              
Line 596 ERROR: Undefined symbol
0000055A  4EB9 004DBB8E            596              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
00000560  4E75                     597              RTS
00000562                           598  
00000562                           599  
00000562                           600  *------------------MOVEM.L OPCODE----------------------------
00000562  18FC 004D                601  OPC_MOVEL   MOVE.B      #'M',(A4)+
00000566  18FC 004F                602              MOVE.B      #'O',(A4)+
0000056A  18FC 0056                603              MOVE.B      #'V',(A4)+
0000056E  18FC 0045                604              MOVE.B      #'E',(A4)+
00000572  18FC 002E                605              MOVE.B      #'.',(A4)+
00000576                           606  
00000576  4284                     607              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000578  183C 0002                608              MOVE.B      #2,D4       *Set size code to long
0000057C  4EB9 000009C4            609              JSR         ADD_SIZE    *Add size characters
00000582                           610              
Line 611 ERROR: Undefined symbol
00000582  4EB9 004DBB8E            611              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
00000588  4E75                     612              RTS
0000058A                           613  
0000058A                           614  *------------------MOVEA.W OPCODE----------------------------
0000058A  18FC 004D                615  OPC_MOVEAW  MOVE.B      #'M',(A4)+
0000058E  18FC 004F                616              MOVE.B      #'O',(A4)+
00000592  18FC 0056                617              MOVE.B      #'V',(A4)+
00000596  18FC 0045                618              MOVE.B      #'E',(A4)+
0000059A  18FC 0041                619              MOVE.B      #'A',(A4)+
0000059E  18FC 002E                620              MOVE.B      #'.',(A4)+
000005A2                           621  
000005A2  4284                     622              CLR.L       D4          *Manually set size to byte (D4 = 0)
000005A4  183C 0001                623              MOVE.B      #1,D4       *Set size code to word
000005A8  4EB9 000009C4            624              JSR         ADD_SIZE    *Add size characters
000005AE                           625              
Line 626 ERROR: Undefined symbol
000005AE  4EB9 004DBB8E            626              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
000005B4  4E75                     627              RTS
000005B6                           628  
000005B6                           629  
000005B6                           630  *------------------MOVE.W OPCODE----------------------------
000005B6  18FC 004D                631  OPC_MOVEW   MOVE.B      #'M',(A4)+
000005BA  18FC 004F                632              MOVE.B      #'O',(A4)+
000005BE  18FC 0056                633              MOVE.B      #'V',(A4)+
000005C2  18FC 0045                634              MOVE.B      #'E',(A4)+
000005C6  18FC 002E                635              MOVE.B      #'.',(A4)+
000005CA                           636  
000005CA  4284                     637              CLR.L       D4          *Manually set size to byte (D4 = 0)
000005CC  183C 0001                638              MOVE.B      #1,D4       *Set size code to word
000005D0  4EB9 000009C4            639              JSR         ADD_SIZE    *Add size characters
000005D6                           640              
Line 641 ERROR: Undefined symbol
000005D6  4EB9 004DBB8E            641              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
000005DC  4E75                     642              RTS
000005DE                           643  
000005DE                           644  
000005DE                           645  *---------------------BRA OPCODE----------------------------
000005DE  18FC 0042                646  OPC_BRA     MOVE.B      #'B',(A4)+
000005E2  18FC 0052                647              MOVE.B      #'R',(A4)+
000005E6  18FC 0041                648              MOVE.B      #'A',(A4)+
000005EA  18FC 0020                649              MOVE.B      #' ',(A4)+
000005EE  18FC 0020                650              MOVE.B      #' ',(A4)+
000005F2                           651              
Line 652 ERROR: Undefined symbol
000005F2  4EB9 004DBB8E            652              JSR         ABW       *Grab the next word value (BRA bug)
000005F8                           653                          
000005F8  4E75                     654              RTS
000005FA                           655  
000005FA                           656  *---------------------Bcc OPCODE----------------------------
000005FA  18FC 0042                657  OPC_Bcc     MOVE.B      #'B',(A4)+
000005FE                           658              *BCC bug, does not use 8bit displacment, but is next word value (ABSW)
000005FE  4EB9 000007E8            659              JSR         BCC_CODE    *Get condition code and start decoding
00000604                           660              
00000604  4E75                     661              RTS
00000606                           662  
00000606                           663  *--------------------DIVU OPCODE----------------------------
00000606  18FC 0044                664  OPC_DIVU    MOVE.B      #'D',(A4)+
0000060A  18FC 0049                665              MOVE.B      #'I',(A4)+
0000060E  18FC 0056                666              MOVE.B      #'V',(A4)+
00000612  18FC 0055                667              MOVE.B      #'U',(A4)+
00000616  18FC 0020                668              MOVE.B      #' ',(A4)+
0000061A  18FC 0020                669              MOVE.B      #' ',(A4)+
0000061E                           670              
0000061E  4284                     671              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000620  183C 0001                672              MOVE.B      #1,D4       *Set size code to word
00000624                           673              
Line 674 ERROR: Undefined symbol
00000624  4EB9 004DBB8E            674              JSR         EASRC_DDES  *Start operand <ea>,Dn
0000062A                           675              
0000062A                           676              
0000062A  4E75                     677              RTS
0000062C                           678  
0000062C                           679  *---------------------OR OPCODE-----------------------------
0000062C  18FC 004F                680  OPC_OR      MOVE.B      #'O',(A4)+
00000630  18FC 0052                681              MOVE.B      #'R',(A4)+
00000634  18FC 002E                682              MOVE.B      #'.',(A4)+
00000638                           683  
00000638  4EB9 00000A06            684              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
0000063E                           685              
0000063E  4EB9 00000A3C            686              JSR         OR_ADD_SIZE    * This will add size characters and start operand decode sequence
00000644                           687  
00000644  4E75                     688              RTS
00000646                           689  
00000646                           690  *---------------------MULS  OPCODE--------------------------
00000646  18FC 004D                691  OPC_MULS    MOVE.B      #'M',(A4)+
0000064A  18FC 0055                692              MOVE.B      #'U',(A4)+
0000064E  18FC 004C                693              MOVE.B      #'L',(A4)+
00000652  18FC 0053                694              MOVE.B      #'S',(A4)+
00000656  18FC 0020                695              MOVE.B      #' ',(A4)+
0000065A  18FC 0020                696              MOVE.B      #' ',(A4)+
0000065E                           697              
0000065E  4284                     698              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000660  183C 0001                699              MOVE.B      #1,D4       *Set size code to word
00000664                           700              
Line 701 ERROR: Undefined symbol
00000664  4EB9 004DBB8E            701              JSR         EASRC_DDES  *Jump to <ea>,Dn
0000066A                           702              
0000066A  4E75                     703              RTS
0000066C                           704  
0000066C                           705  *---------------------AND  OPCODE---------------------------
0000066C  18FC 0041                706  OPC_AND     MOVE.B      #'A',(A4)+
00000670  18FC 004E                707              MOVE.B      #'N',(A4)+
00000674  18FC 0044                708              MOVE.B      #'D',(A4)+
00000678  18FC 002E                709              MOVE.B      #'.',(A4)+
0000067C                           710  
0000067C  4EB9 00000A06            711              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
00000682                           712              
00000682  4EB9 00000A3C            713              JSR         OR_ADD_SIZE *This will add size characters and start operand decode sequence
00000688                           714  
00000688  4E75                     715              RTS
0000068A                           716              
0000068A                           717  *-------------------ADDA OPCODE-----------------------------
0000068A  18FC 0041                718  OPC_ADDA    MOVE.B      #'A',(A4)+
0000068E  18FC 0044                719              MOVE.B      #'D',(A4)+
00000692  18FC 0044                720              MOVE.B      #'D',(A4)+
00000696  18FC 0041                721              MOVE.B      #'A',(A4)+
0000069A  18FC 002E                722              MOVE.B      #'.',(A4)+
0000069E                           723              
0000069E  4EB9 000009C4            724              JSR         ADD_SIZE    *Size should already be in D4 (special case for ADDA)
000006A4                           725              
Line 726 ERROR: Undefined symbol
000006A4  4EB9 004DBB8E            726              JSR         EASRC_ADES  *Start operand decode for <ea>,An format
000006AA                           727              
000006AA  4E75                     728              RTS
000006AC                           729  
000006AC                           730  *--------------------ADD OPCODE-----------------------------
000006AC  18FC 0041                731  OPC_ADD     MOVE.B      #'A',(A4)+
000006B0  18FC 0044                732              MOVE.B      #'D',(A4)+
000006B4  18FC 0044                733              MOVE.B      #'D',(A4)+
000006B8  18FC 002E                734              MOVE.B      #'.',(A4)+
000006BC                           735  
000006BC  4EB9 00000A06            736              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
000006C2                           737              
000006C2  4EB9 00000A3C            738              JSR         OR_ADD_SIZE *This will add size characters and start operand decode sequence
000006C8                           739  
000006C8  4E75                     740              RTS
000006CA                           741  
000006CA                           742  *--------------------JSR OPCODE-----------------------------
000006CA  18FC 004A                743  OPC_JSR     MOVE.B      #'J',(A4)+
000006CE  18FC 0053                744              MOVE.B      #'S',(A4)+
000006D2  18FC 0052                745              MOVE.B      #'R',(A4)+
000006D6  18FC 0020                746              MOVE.B      #' ',(A4)+
000006DA  18FC 0020                747              MOVE.B      #' ',(A4)+
Line 748 ERROR: Undefined symbol
000006DE  4EB9 004DBB8E            748              JSR         GEN_EA_CODE *Get EA code
000006E4                           749              
000006E4  4E75                     750              RTS
000006E6                           751  
000006E6                           752  *--------------------NOP OPCODE-----------------------------
000006E6  18FC 004E                753  OPC_NOP     MOVE.B      #'N',(A4)+
000006EA  18FC 004F                754              MOVE.B      #'O',(A4)+
000006EE  18FC 0050                755              MOVE.B      #'P',(A4)+
000006F2                           756              
000006F2  4E75                     757              RTS
000006F4                           758  
000006F4                           759  *--------------------RTS OPCODE-----------------------------
000006F4  18FC 0052                760  OPC_RTS     MOVE.B      #'R',(A4)+
000006F8  18FC 0054                761              MOVE.B      #'T',(A4)+
000006FC  18FC 0053                762              MOVE.B      #'S',(A4)+
00000700                           763              
00000700  4E75                     764              RTS
00000702                           765              
00000702                           766  *-LSL/LSR REG/MEM, ASL/ASR REG/MEM, ROL/ROR REG/MEM OPCODE--  
00000702                           767  *------------AS(L/R) OPCODE MEMORY variant------------------          
00000702  18FC 0041                768  OPC_AS_MEM  MOVE.B      #'A',(A4)+
00000706  18FC 0053                769              MOVE.B      #'S',(A4)+
0000070A  4EB9 000007C2            770              JSR         SHFT_DECODE
00000710  18FC 002E                771              MOVE.B      #'.',(A4)+
00000714                           772                         
Line 773 ERROR: Undefined symbol
00000714  4EB9 004DBB8E            773              JSR         SR_MEM
0000071A  4E75                     774              RTS
0000071C                           775  
0000071C                           776  *------------LS(L/R) OPCODE MEMORY variant------------------    
0000071C  18FC 004C                777  OPC_LS_MEM  MOVE.B      #'L',(A4)+
00000720  18FC 0053                778              MOVE.B      #'S',(A4)+
00000724  4EB9 000007C2            779              JSR         SHFT_DECODE
0000072A  18FC 002E                780              MOVE.B      #'.',(A4)+
0000072E                           781                          
Line 782 ERROR: Undefined symbol
0000072E  4EB9 004DBB8E            782              JSR         SR_MEM
00000734  4E75                     783              RTS
00000736                           784  
00000736                           785  *------------RO(L/R) OPCODE MEMORY variant------------------     
00000736  18FC 0052                786  OPC_RO_MEM  MOVE.B      #'R',(A4)+
0000073A  18FC 004F                787              MOVE.B      #'O',(A4)+
0000073E  4EB9 000007C2            788              JSR         SHFT_DECODE
00000744  18FC 002E                789              MOVE.B      #'.',(A4)+
00000748                           790                         
Line 791 ERROR: Undefined symbol
00000748  4EB9 004DBB8E            791              JSR         SR_MEM
0000074E  4E75                     792              RTS   
00000750                           793  
00000750                           794  *----------AS(L/R) OPCODE REGISTER variant------------------      
00000750  18FC 0041                795  OPC_AS_REG  MOVE.B      #'A',(A4)+
00000754  18FC 0053                796              MOVE.B      #'S',(A4)+
00000758  4EB9 000007C2            797              JSR         SHFT_DECODE
0000075E  18FC 002E                798              MOVE.B      #'.',(A4)+
00000762                           799              
00000762  4EB9 00000A16            800              JSR         GET_SIZE_2
00000768  4EB9 000009C4            801              JSR         ADD_SIZE
Line 802 ERROR: Undefined symbol
0000076E  4EB9 004DBB8E            802              JSR         SR_REG
00000774                           803              
00000774  4E75                     804              RTS
00000776                           805  
00000776                           806  *----------LS(L/R) OPCODE REGISTER variant------------------ 
00000776  18FC 004C                807  OPC_LS_REG  MOVE.B      #'L',(A4)+
0000077A  18FC 0053                808              MOVE.B      #'S',(A4)+
0000077E  4EB9 000007C2            809              JSR         SHFT_DECODE
00000784  18FC 002E                810              MOVE.B      #'.',(A4)+
00000788                           811              
00000788  4EB9 00000A16            812              JSR         GET_SIZE_2
0000078E  4EB9 000009C4            813              JSR         ADD_SIZE
Line 814 ERROR: Undefined symbol
00000794  4EB9 004DBB8E            814              JSR         SR_REG
0000079A  4E75                     815              RTS
0000079C                           816  
0000079C                           817  *----------RO(L/R) OPCODE REGISTER variant------------------ 
0000079C  18FC 0052                818  OPC_RO_REG  MOVE.B      #'R',(A4)+
000007A0  18FC 004F                819              MOVE.B      #'O',(A4)+
000007A4  4EB9 000007C2            820              JSR         SHFT_DECODE
000007AA  18FC 002E                821              MOVE.B      #'.',(A4)+
000007AE                           822  
000007AE  4EB9 00000A16            823              JSR         GET_SIZE_2
000007B4  4EB9 000009C4            824              JSR         ADD_SIZE
Line 825 ERROR: Undefined symbol
000007BA  4EB9 004DBB8E            825              JSR         SR_REG
000007C0  4E75                     826              RTS          
000007C2                           827  
000007C2                           828  *===========================================================
000007C2                           829  *=====================HELPER SUBROUTINES====================
000007C2                           830  *===========================================================
000007C2                           831  
000007C2                           832  *---------------Determine Shift Direction-------------------
000007C2                           833  * %0000 000X 0000 0000 
000007C2  4282                     834  SHFT_DECODE CLR.L       D2
000007C4  3407                     835              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
000007C6  4281                     836              CLR.L       D1
000007C8  EF4A                     837              LSL.W       #7,D2       *Clear the most sig 7 bits
000007CA  123C 000F                838              MOVE.B      #15,D1      *Moves 15 into D1
000007CE  E26A                     839              LSR.W       D1,D2       *Shifts 15 right to isolate the bits we're working with 
000007D0  B43C 0000                840              CMP.B       #0,D2       *If 0, direction is determined to be R       
000007D4  6700 0006                841              BEQ         DECODE_R
000007D8  6000 0008                842              BRA         DECODE_L
000007DC                           843              
000007DC  18FC 0052                844  DECODE_R    MOVE.B      #'R',(A4)+  *Adds R to the output
000007E0  4E75                     845              RTS
000007E2                           846  
000007E2  18FC 004C                847  DECODE_L    MOVE.B      #'L',(A4)+  *Adds L to the output
000007E6  4E75                     848              RTS
000007E8                           849                      
000007E8                           850  
000007E8                           851  *-------------------------BCC_DECODE------------------------
000007E8                           852  * Isolates the 4 bit condition code for BCC OPCODES
000007E8                           853  *-----------------------------------------------------------
000007E8  4283                     854  BCC_CODE    CLR.L       D3          *Make sure D3 is empty to hold condition code
000007EA  3607                     855              MOVE.W      D7,D3       *Move in original address to be shifted
000007EC  E94B                     856              LSL.W       #4,D3
000007EE  4282                     857              CLR.L       D2
000007F0  143C 000C                858              MOVE.B      #12,D2
000007F4  E46B                     859              LSR.W       D2,D3
000007F6  4EB9 000007FE            860              JSR         BCC_TABLE   *Jump to BCC table now that condition code is in D3
000007FC  4E75                     861              RTS
000007FE                           862  
000007FE                           863  *-------------------------BCC_TABLE-------------------------
000007FE                           864  * This jump table looks at the condition code in D3 to
000007FE                           865  * select the correct B"CC" for the BCC OPCODE. After the
000007FE                           866  * correct condition code is selected, it then jumps to the
000007FE                           867  * 8 bit displacment.
000007FE                           868  *-----------------------------------------------------------
000007FE  B63C 0002                869  BCC_TABLE   CMP.B       #$2,D3      *Is it BHI?
00000802  6700 0070                870              BEQ         BCC_HI
00000806  B63C 0003                871              CMP.B       #$3,D3      *Is it BLS?
0000080A  6700 0080                872              BEQ         BCC_LS      
0000080E  B63C 0004                873              CMP.B       #$4,D3      *Is it BCC?
00000812  6700 0090                874              BEQ         BCC_CC
00000816  B63C 0005                875              CMP.B       #$5,D3      *Is it BCS?
0000081A  6700 00A0                876              BEQ         BCC_CS
0000081E  B63C 0006                877              CMP.B       #$6,D3      *Is it BNE?
00000822  6700 00B0                878              BEQ         BCC_NE
00000826  B63C 0007                879              CMP.B       #$7,D3      *Is it BEQ?
0000082A  6700 00C0                880              BEQ         BCC_EQ
0000082E  B63C 0008                881              CMP.B       #$8,D3      *Is it BVC?
00000832  6700 00D0                882              BEQ         BCC_VC      
00000836  B63C 0009                883              CMP.B       #$9,D3      *Is it BVS?
0000083A  6700 00E0                884              BEQ         BCC_VS
0000083E  B63C 000A                885              CMP.B       #$A,D3      *Is it BPL?
00000842  6700 00F0                886              BEQ         BCC_PL
00000846  B63C 000B                887              CMP.B       #$B,D3      *Is it BMI?
0000084A  6700 0100                888              BEQ         BCC_MI
0000084E  B63C 000C                889              CMP.B       #$C,D3      *Is it BGE?
00000852  6700 0110                890              BEQ         BCC_GE
00000856  B63C 000D                891              CMP.B       #$D,D3      *Is it BLT?
0000085A  6700 0120                892              BEQ         BCC_LT
0000085E  B63C 000E                893              CMP.B       #$E,D3      *Is it BGT?
00000862  6700 0130                894              BEQ         BCC_GT      
00000866  B63C 000F                895              CMP.B       #$F,D3      *Is it BLE?
0000086A  6700 0140                896              BEQ         BCC_LE
Line 897 ERROR: Undefined symbol
0000086E  4EF9 004DBB8E            897              JMP         INVALID     *Got here? Something is wrong.
00000874                           898  
00000874  18FC 0048                899  BCC_HI      MOVE.B      #'H',(A4)+
00000878  18FC 0049                900              MOVE.B      #'I',(A4)+
0000087C  18FC 0020                901              MOVE.B      #' ',(A4)+
00000880  18FC 0020                902              MOVE.B      #' ',(A4)+
Line 903 ERROR: Undefined symbol
00000884  4EB9 004DBB8E            903              JSR         ABW         *Add absolute word in next word address.
0000088A  4E75                     904              RTS
0000088C                           905  
0000088C  18FC 004C                906  BCC_LS      MOVE.B      #'L',(A4)+
00000890  18FC 0053                907              MOVE.B      #'S',(A4)+
00000894  18FC 0020                908              MOVE.B      #' ',(A4)+
00000898  18FC 0020                909              MOVE.B      #' ',(A4)+
Line 910 ERROR: Undefined symbol
0000089C  4EB9 004DBB8E            910              JSR         ABW         *Add absolute word in next word address.
000008A2  4E75                     911              RTS
000008A4                           912  
000008A4  18FC 0043                913  BCC_CC      MOVE.B      #'C',(A4)+
000008A8  18FC 0043                914              MOVE.B      #'C',(A4)+
000008AC  18FC 0020                915              MOVE.B      #' ',(A4)+
000008B0  18FC 0020                916              MOVE.B      #' ',(A4)+
Line 917 ERROR: Undefined symbol
000008B4  4EB9 004DBB8E            917              JSR         ABW         *Add absolute word in next word address.
000008BA  4E75                     918              RTS
000008BC                           919              
000008BC  18FC 0043                920  BCC_CS      MOVE.B      #'C',(A4)+
000008C0  18FC 0053                921              MOVE.B      #'S',(A4)+
000008C4  18FC 0020                922              MOVE.B      #' ',(A4)+
000008C8  18FC 0020                923              MOVE.B      #' ',(A4)+
Line 924 ERROR: Undefined symbol
000008CC  4EB9 004DBB8E            924              JSR         ABW         *Add absolute word in next word address.
000008D2  4E75                     925              RTS
000008D4                           926              
000008D4  18FC 004E                927  BCC_NE      MOVE.B      #'N',(A4)+
000008D8  18FC 0045                928              MOVE.B      #'E',(A4)+
000008DC  18FC 0020                929              MOVE.B      #' ',(A4)+
000008E0  18FC 0020                930              MOVE.B      #' ',(A4)+
Line 931 ERROR: Undefined symbol
000008E4  4EB9 004DBB8E            931              JSR         ABW         *Add absolute word in next word address.
000008EA  4E75                     932              RTS
000008EC                           933              
000008EC  18FC 0045                934  BCC_EQ      MOVE.B      #'E',(A4)+
000008F0  18FC 0051                935              MOVE.B      #'Q',(A4)+
000008F4  18FC 0020                936              MOVE.B      #' ',(A4)+
000008F8  18FC 0020                937              MOVE.B      #' ',(A4)+
Line 938 ERROR: Undefined symbol
000008FC  4EB9 004DBB8E            938              JSR         ABW         *Add absolute word in next word address.
00000902  4E75                     939              RTS
00000904                           940              
00000904  18FC 0056                941  BCC_VC      MOVE.B      #'V',(A4)+
00000908  18FC 0043                942              MOVE.B      #'C',(A4)+
0000090C  18FC 0020                943              MOVE.B      #' ',(A4)+
00000910  18FC 0020                944              MOVE.B      #' ',(A4)+
Line 945 ERROR: Undefined symbol
00000914  4EB9 004DBB8E            945              JSR         ABW         *Add absolute word in next word address.
0000091A  4E75                     946              RTS
0000091C                           947  
0000091C  18FC 0056                948  BCC_VS      MOVE.B      #'V',(A4)+
00000920  18FC 0053                949              MOVE.B      #'S',(A4)+
00000924  18FC 0020                950              MOVE.B      #' ',(A4)+
00000928  18FC 0020                951              MOVE.B      #' ',(A4)+
Line 952 ERROR: Undefined symbol
0000092C  4EB9 004DBB8E            952              JSR         ABW         *Add absolute word in next word address.
00000932  4E75                     953              RTS
00000934                           954              
00000934  18FC 0050                955  BCC_PL      MOVE.B      #'P',(A4)+
00000938  18FC 004C                956              MOVE.B      #'L',(A4)+
0000093C  18FC 0020                957              MOVE.B      #' ',(A4)+
00000940  18FC 0020                958              MOVE.B      #' ',(A4)+
Line 959 ERROR: Undefined symbol
00000944  4EB9 004DBB8E            959              JSR         ABW         *Add absolute word in next word address.
0000094A  4E75                     960              RTS
0000094C                           961              
0000094C  18FC 004D                962  BCC_MI      MOVE.B      #'M',(A4)+
00000950  18FC 0049                963              MOVE.B      #'I',(A4)+
00000954  18FC 0020                964              MOVE.B      #' ',(A4)+
00000958  18FC 0020                965              MOVE.B      #' ',(A4)+
Line 966 ERROR: Undefined symbol
0000095C  4EB9 004DBB8E            966              JSR         ABW         *Add absolute word in next word address.
00000962  4E75                     967              RTS
00000964                           968              
00000964  18FC 0047                969  BCC_GE      MOVE.B      #'G',(A4)+
00000968  18FC 0045                970              MOVE.B      #'E',(A4)+
0000096C  18FC 0020                971              MOVE.B      #' ',(A4)+
00000970  18FC 0020                972              MOVE.B      #' ',(A4)+
Line 973 ERROR: Undefined symbol
00000974  4EB9 004DBB8E            973              JSR         ABW         *Add absolute word in next word address.
0000097A  4E75                     974              RTS
0000097C                           975              
0000097C  18FC 004C                976  BCC_LT      MOVE.B      #'L',(A4)+
00000980  18FC 0054                977              MOVE.B      #'T',(A4)+
00000984  18FC 0020                978              MOVE.B      #' ',(A4)+
00000988  18FC 0020                979              MOVE.B      #' ',(A4)+
Line 980 ERROR: Undefined symbol
0000098C  4EB9 004DBB8E            980              JSR         ABW         *Add absolute word in next word address.
00000992  4E75                     981              RTS
00000994                           982              
00000994  18FC 0047                983  BCC_GT      MOVE.B      #'G',(A4)+
00000998  18FC 0054                984              MOVE.B      #'T',(A4)+
0000099C  18FC 0020                985              MOVE.B      #' ',(A4)+
000009A0  18FC 0020                986              MOVE.B      #' ',(A4)+
Line 987 ERROR: Undefined symbol
000009A4  4EB9 004DBB8E            987              JSR         ABW         *Add absolute word in next word address.
000009AA  4E75                     988              RTS
000009AC                           989              
000009AC  18FC 004C                990  BCC_LE      MOVE.B      #'L',(A4)+
000009B0  18FC 0045                991              MOVE.B      #'E',(A4)+
000009B4  18FC 0020                992              MOVE.B      #' ',(A4)+
000009B8  18FC 0020                993              MOVE.B      #' ',(A4)+
Line 994 ERROR: Undefined symbol
000009BC  4EB9 004DBB8E            994              JSR         ABW         *Add absolute word in next word address.
000009C2  4E75                     995              RTS
000009C4                           996  
000009C4                           997  
000009C4                           998  *--------------------ADD SIZE-------------------------------
000009C4                           999  * A simple helper that looks at the size code in D4 to add
000009C4                          1000  * the appropriate B,W,L to the string.
000009C4                          1001  *-----------------------------------------------------------
000009C4  B83C 0000               1002  ADD_SIZE    CMP.B       #0,D4       *Is it a B, <ea>,dn/an
000009C8  6700 0012               1003              BEQ         B_SIZE
000009CC  B83C 0001               1004              CMP.B       #1,D4       *Is it a W, <ea>,dn/an
000009D0  6700 0018               1005              BEQ         W_SIZE
000009D4  B83C 0002               1006              CMP.B       #2,D4       *Is it a L, <ea>,dn/an
000009D8  6700 001E               1007              BEQ         L_SIZE 
000009DC                          1008              
000009DC  18FC 0042               1009  B_SIZE      MOVE.B      #'B',(A4)+  *Add size character to good string
000009E0  18FC 0020               1010              MOVE.B      #' ',(A4)+
000009E4  18FC 0020               1011              MOVE.B      #' ',(A4)+
000009E8  4E75                    1012              RTS
000009EA                          1013  
000009EA  18FC 0057               1014  W_SIZE      MOVE.B      #'W',(A4)+  *Add size character to good string
000009EE  18FC 0020               1015              MOVE.B      #' ',(A4)+
000009F2  18FC 0020               1016              MOVE.B      #' ',(A4)+
000009F6  4E75                    1017              RTS
000009F8                          1018  
000009F8  18FC 004C               1019  L_SIZE      MOVE.B      #'L',(A4)+  *Add size character to good string
000009FC  18FC 0020               1020              MOVE.B      #' ',(A4)+
00000A00  18FC 0020               1021              MOVE.B      #' ',(A4)+
00000A04  4E75                    1022              RTS
00000A06                          1023  
00000A06                          1024  *--------------------GET SIZE CODE--------------------------
00000A06                          1025  * The following three subroutines isolate the size bits for
00000A06                          1026  * all opcodes. They are by number of bits (e.g. 3 bits for
00000A06                          1027  * size implies GET_SIZE_3). Bit(s) are isolated into D4)
00000A06                          1028  *-----------------------------------------------------------
00000A06  4284                    1029  GET_SIZE_3  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
00000A08  3807                    1030              MOVE.W      D7,D4       *Copy untouched opcode into D4
00000A0A  EF4C                    1031              LSL.W       #7,D4       *Clear more significant bits
00000A0C  4283                    1032              CLR.L       D3          *Make sure D3 is clear for shifting
00000A0E  163C 000D               1033              MOVE.B      #13,D3      *Shifting 13 times
00000A12  E66C                    1034              LSR.W       D3,D4       *Move size bits to LSB position
00000A14  4E75                    1035              RTS
00000A16                          1036  
00000A16  4284                    1037  GET_SIZE_2  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
00000A18  3807                    1038              MOVE.W      D7,D4       *Copy untouched opcode into D4
00000A1A  E14C                    1039              LSL.W       #8,D4       *Clear more significant bits
00000A1C  4283                    1040              CLR.L       D3          *Make sure D3 is clear for shifting
00000A1E  163C 000E               1041              MOVE.B      #14,D3      *Shifting 14 times
00000A22  E66C                    1042              LSR.W       D3,D4       *Move size bits to LSB position
00000A24  4E75                    1043              RTS
00000A26                          1044  
00000A26  4284                    1045  GET_SIZE_1  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
00000A28  3807                    1046              MOVE.W      D7,D4       *Copy untouched opcode into D4
00000A2A  4283                    1047              CLR.L       D3          *Make sure D3 is clear for shifting
00000A2C  163C 0009               1048              MOVE.B      #9,D3       *Shift 9 times to the left
00000A30  E76C                    1049              LSL.W       D3,D4       *Clear more significant bits
00000A32  4283                    1050              CLR.L       D3          *Make sure D3 is clear for shifting
00000A34  163C 000F               1051              MOVE.B      #15,D3      *Shifting 15 times
00000A38  E66C                    1052              LSR.W       D3,D4       *Move size bits to LSB position
00000A3A  4E75                    1053              RTS
00000A3C                          1054  
00000A3C                          1055  *--------------------ADD SIZE (Pseudo JMP TABLE)------------
00000A3C                          1056  * This subroutine is for ADD, AND, OR, SUB.
00000A3C                          1057  * It adds the appropriate "B", "W", "L" and space characters
00000A3C                          1058  * to the output strings. It then starts the parameter decode
00000A3C                          1059  * sequence for the above 4 subroutines.
00000A3C                          1060  * Values 0, 1, 2 => B, W, L => <ea>,Dn => JSR EA_SRC
00000A3C                          1061  * Values 4, 5, 6 => B, W, L => Dn,<ea> => JSR DN_SRC
00000A3C                          1062  *-----------------------------------------------------------
00000A3C  B83C 0000               1063  OR_ADD_SIZE CMP.B       #0,D4       *Is it a B, <ea>,dn
00000A40  6700 002E               1064              BEQ         B_EA
00000A44  B83C 0001               1065              CMP.B       #1,D4       *Is it a W, <ea>,dn
00000A48  6700 003A               1066              BEQ         W_EA
00000A4C  B83C 0002               1067              CMP.B       #2,D4       *Is it a L, <ea>,dn
00000A50  6700 0046               1068              BEQ         L_EA
00000A54                          1069  
00000A54  B83C 0004               1070              CMP.B       #4,D4       *Is it a B, dn,<ea>
00000A58  6700 0052               1071              BEQ         B_DN
00000A5C  B83C 0005               1072              CMP.B       #5,D4       *Is it a W, dn,<ea>
00000A60  6700 005E               1073              BEQ         W_DN
00000A64  B83C 0006               1074              CMP.B       #6,D4       *Is it a L, dn,<ea>
00000A68  6700 006A               1075              BEQ         L_DN        
Line 1076 ERROR: Undefined symbol
00000A6C  6000 B120               1076              BRA         INVALID     *Got here, must be invalid data.
00000A70                          1077              
00000A70  18FC 0042               1078  B_EA        MOVE.B      #'B',(A4)+  *Add size character to good string
00000A74  18FC 0020               1079              MOVE.B      #' ',(A4)+
00000A78  18FC 0020               1080              MOVE.B      #' ',(A4)+
Line 1081 ERROR: Undefined symbol
00000A7C  4EB9 004DBB8E           1081              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
00000A82  4E75                    1082              RTS
00000A84                          1083  
00000A84  18FC 0057               1084  W_EA        MOVE.B      #'W',(A4)+  *Add size character to good string
00000A88  18FC 0020               1085              MOVE.B      #' ',(A4)+
00000A8C  18FC 0020               1086              MOVE.B      #' ',(A4)+
Line 1087 ERROR: Undefined symbol
00000A90  4EB9 004DBB8E           1087              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
00000A96  4E75                    1088              RTS
00000A98                          1089  
00000A98  18FC 004C               1090  L_EA        MOVE.B      #'L',(A4)+  *Add size character to good string
00000A9C  18FC 0020               1091              MOVE.B      #' ',(A4)+
00000AA0  18FC 0020               1092              MOVE.B      #' ',(A4)+
Line 1093 ERROR: Undefined symbol
00000AA4  4EB9 004DBB8E           1093              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
00000AAA  4E75                    1094              RTS
00000AAC                          1095  
00000AAC  18FC 0042               1096  B_DN        MOVE.B      #'B',(A4)+  *Add size character to good string
00000AB0  18FC 0020               1097              MOVE.B      #' ',(A4)+
00000AB4  18FC 0020               1098              MOVE.B      #' ',(A4)+
Line 1099 ERROR: Undefined symbol
00000AB8  4EB9 004DBB8E           1099              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
00000ABE  4E75                    1100              RTS
00000AC0                          1101  
00000AC0  18FC 0057               1102  W_DN        MOVE.B      #'W',(A4)+  *Add size character to good string
00000AC4  18FC 0020               1103              MOVE.B      #' ',(A4)+
00000AC8  18FC 0020               1104              MOVE.B      #' ',(A4)+
Line 1105 ERROR: Undefined symbol
00000ACC  4EB9 004DBB8E           1105              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
00000AD2  4E75                    1106              RTS
00000AD4                          1107  
00000AD4  18FC 004C               1108  L_DN        MOVE.B      #'L',(A4)+  *Add size character to good string
00000AD8  18FC 0020               1109              MOVE.B      #' ',(A4)+
00000ADC  18FC 0020               1110              MOVE.B      #' ',(A4)+
Line 1111 ERROR: Undefined symbol
00000AE0  4EB9 004DBB8E           1111              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
00000AE6  4E75                    1112              RTS            
00000AE8                          1113              
00000AE8                          1114              
00000AE8                          1115              
00000AE8                          1116              
00000AE8                          1117              
00000AE8                          1118              
00000AE8                          1119              
00000AE8                          1120  
00000AE8                          1121  
00000AE8                          1122  
00000AE8                          1123  
00000AE8                          1124  
00000AE8                          1125  
00000AE8                          1126  
00000AE8                          1127  
00000AE8                          1128  
00000AE8                          1129  
00000AE8                          1130  
00000AE8                          1131  
Line 1132 WARNING: END directive missing, starting address not set

54 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_SIZE            9C4
BCC_CC              8A4
BCC_CODE            7E8
BCC_CS              8BC
BCC_EQ              8EC
BCC_GE              964
BCC_GT              994
BCC_HI              874
BCC_LE              9AC
BCC_LS              88C
BCC_LT              97C
BCC_MI              94C
BCC_NE              8D4
BCC_PL              934
BCC_TABLE           7FE
BCC_VC              904
BCC_VS              91C
B_DN                AAC
B_EA                A70
B_SIZE              9DC
DECODE_L            7E2
DECODE_R            7DC
GET_SIZE_1          A26
GET_SIZE_2          A16
GET_SIZE_3          A06
INV_OP              FC
JMP_0               C
JMP_0X              186
JMP_1               1C
JMP_2               2C
JMP_2X              1B2
JMP_3               3C
JMP_3X              1D6
JMP_4               4C
JMP_47X             3BC
JMP_4X              1FA
JMP_5               5C
JMP_6               6C
JMP_6X              242
JMP_7               7C
JMP_8               8C
JMP_8X              266
JMP_9               9C
JMP_A               AC
JMP_B               BC
JMP_C               CC
JMP_CX              28A
JMP_D               DC
JMP_DX              2AE
JMP_E               EC
JMP_EX              312
JMP_TBL             0
J_47X               22A
J_ADDI              1AA
J_AND               2A6
J_BCC               25E
J_BRA               256
J_CLR1              134
J_CLR2              124
J_CLR3              114
J_CLR4              104
J_CLR_DM            162
J_CLR_LEA           144
J_CLR_MM            154
J_CLR_SHFT          172
J_DIVU              27A
J_LEA               232
J_MOVEAL            1C6
J_MOVEAW            1EA
J_MOVEL             1CE
J_MOVEM             23A
J_MOVEW             1F2
J_MULS              29E
J_OR                282
J_SUBI              1A2
L_DN                AD4
L_EA                A98
L_SIZE              9F8
MM_ADD_S            528
MM_LONG             524
MM_WORD             51C
OPC_ADD             6AC
OPC_ADDA            68A
OPC_ADDI            41E
OPC_ADDQ            46A
OPC_AND             66C
OPC_AS_MEM          702
OPC_AS_REG          750
OPC_BCC             5FA
OPC_BRA             5DE
OPC_DIVU            606
OPC_JSR             6CA
OPC_LEA             4CC
OPC_LS_MEM          71C
OPC_LS_REG          776
OPC_MOVEAL          536
OPC_MOVEAW          58A
OPC_MOVEB           446
OPC_MOVEL           562
OPC_MOVEM           4EE
OPC_MOVEQ           492
OPC_MOVEW           5B6
OPC_MULS            646
OPC_NOP             6E6
OPC_OR              62C
OPC_RO_MEM          736
OPC_RO_REG          79C
OPC_RTS             6F4
OPC_SUB             4AE
OPC_SUBI            3F6
OP_ADD              30A
OP_ADDA             302
OP_AS_MEM           36C
OP_AS_REG           3A4
OP_LS_MEM           374
OP_LS_REG           3AC
OP_RO_MEM           37C
OP_RO_REG           3B4
OR_ADD_SIZE         A3C
O_JSR               3EE
O_NOP               3DE
O_RTS               3E6
SHFT_DECODE         7C2
SRMEM_VAR           34C
SRREG_VAR           384
SR_MEM_VAR          33C
SR_REG_VAR          344
W_DN                AC0
W_EA                A84
W_SIZE              9EA
