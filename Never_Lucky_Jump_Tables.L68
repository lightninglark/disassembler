00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2017 5:25:16 PM

00000000                             1  ************************************************************
00000000                             2  * TEAM NEVERY LUCKY DISSASSEMBLER
00000000                             3  * This file includes OPCODE logic (OPCODE and size decoding)
00000000                             4  ************************************************************
00000000                             5  
00000000                             6  *-----------------------JMP_TBL------------------------------
00000000                             7  * Purpose: JMP_TBL takes a data register input (D7) and navigates to the correct OPCODE table
00000000                             8  *          entry.
00000000                             9  *          $FF is saved to D6 if OPCode is determined to be incorrect
00000000                            10  * Assumption: Whenever JMP_TBL is called, D7 contains the next new machine code instruction
00000000                            11  *------------------------------------------------------------
00000000                            12  
00000000                            13  *============================================================
00000000                            14  *===================ID FIRST OPCODE DIGIT====================
00000000                            15  *============================================================
00000000  4282                      16  JMP_TBL     CLR.L       D2
00000002  3407                      17              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000004  4281                      18              CLR.L       D1
00000006  123C 000C                 19              MOVE.B      #12,D1      *Moves 12 into D1
0000000A  E26A                      20              LSR.W       D1,D2       *Shifts 12 bits so the remaining contents = the left 4 bits of D7
0000000C                            21                          
0000000C  B43C 0000                 22  JMP_0       CMP.B       #$0,D2      *Following section determines what hex value the first 4 digits are
00000010  6600 000A                 23              BNE         JMP_1       *If the first hex value is not 0, branch and see if its 1
00000014  4EB9 0000014C             24              JSR         JMP_0X      *If the first hex value is 0, jump to JMP_0X to determine the next set of digits
0000001A  4E75                      25              RTS                     *Finished all jumping; whole instruction should be identified at this point
0000001C                            26              
0000001C  B43C 0001                 27  JMP_1       CMP.B       #$1,D2
00000020  6600 000A                 28              BNE         JMP_2       *If the first hex value is not 2, branch and see if its 3, and so on
00000024  4EB9 00000302             29              JSR         OPC_MOVEB   *If the first hex value is 1, the instruction is determined to be MOVE.B. Jump to OPC_MOVEB in OPCODE table.
0000002A  4E75                      30              RTS                     *Finished all jumping; whole instruction should be identified at this point, and so on       
0000002C                            31             
0000002C  B43C 0002                 32  JMP_2       CMP.B       #$2,D2
00000030  6600 000A                 33              BNE         JMP_3 
00000034  4EB9 00000178             34              JSR         JMP_2X      *If the first hex value is 2, jump to JMP_2X to determine the next set of digits
0000003A  4E75                      35              RTS
0000003C                            36              
0000003C  B43C 0003                 37  JMP_3       CMP.B       #$3,D2
00000040  6600 000A                 38              BNE         JMP_4
00000044  4EB9 0000019C             39              JSR         JMP_3X      *If the first hex value is 3, jump to JMP_3X to determine the next set of digits
0000004A  4E75                      40              RTS
0000004C                            41           
0000004C  B43C 0004                 42  JMP_4       CMP.B       #$4,D2      *Where NOP SHOULD LAND
00000050  6600 000A                 43              BNE         JMP_5
00000054  4EB9 000001C0             44              JSR         JMP_4X      *If the first hex value is 4, jump to JMP_4X to determine the next set of digits
0000005A  4E75                      45              RTS
0000005C                            46              
0000005C  B43C 0005                 47  JMP_5       CMP.B       #$5,D2
00000060  6600 000A                 48              BNE         JMP_6
00000064  4EB9 00000326             49              JSR         OPC_ADDQ    *If the first hex digit is 5, the instruction is determined to be ADDQ. Jump to OPC_ADDQ in OPCODE table.
0000006A  4E75                      50              RTS
0000006C                            51              
0000006C  B43C 0006                 52  JMP_6       CMP.B       #$6,D2
00000070  6600 000A                 53              BNE         JMP_7
00000074  4EB9 00000200             54              JSR         JMP_6X      *If the first hex value is 6, jump to JMP_6X to determine the next set of digits
0000007A  4E75                      55              RTS
0000007C                            56              
0000007C  B43C 0007                 57  JMP_7       CMP.B       #$7,D2
00000080  6600 000A                 58              BNE         JMP_8
00000084  4EB9 0000034E             59              JSR         OPC_MOVEQ    *If the first hex digit is 7, the instruction is determined to be MOVEQ. Jump to OPC_MOVEQ in OPCODE table.
0000008A  4E75                      60              RTS
0000008C                            61              
0000008C  B43C 0008                 62  JMP_8       CMP.B       #$8,D2
00000090  6600 000A                 63              BNE         JMP_9
00000094  4EB9 00000224             64              JSR         JMP_8X      *If the first hex value is 8, jump to JMP_8X to determine the next set of digits
0000009A  4E75                      65              RTS
0000009C                            66              
0000009C  B43C 0009                 67  JMP_9       CMP.B       #$9,D2
000000A0  6600 000A                 68              BNE         JMP_A
000000A4  4EB9 0000036A             69              JSR         OPC_9XXX    *If the first hex digit is 9, the instruction is determined to be SUB. Jump to OPC_9XXX in OPCODE table.
000000AA  4E75                      70              RTS
000000AC                            71              
000000AC  B43C 000A                 72  JMP_A       CMP.B       #$A,D2
000000B0  6600 000A                 73              BNE         JMP_B
Line 74 ERROR: Undefined symbol
000000B4  4EB9 004DBB8E             74              JSR         INVALID     *0x A is an invalid first hex digit. Jump to INVALID
000000BA  4E75                      75              RTS
000000BC                            76              
000000BC  B43C 000B                 77  JMP_B       CMP.B       #$B,D2
000000C0  6600 000A                 78              BNE         JMP_C
Line 79 ERROR: Undefined symbol
000000C4  4EB9 004DBB8E             79              JSR         INVALID     *0xB is an invalid first hex digit. Jump to INVALID
000000CA  4E75                      80              RTS
000000CC                            81              
000000CC  B43C 000C                 82  JMP_C       CMP.B       #$C,D2
000000D0  6600 000A                 83              BNE         JMP_D
000000D4  4EB9 00000248             84              JSR         JMP_CX      *If the first hex value is C, jump to JMP_CX to determine the next set of digits
000000DA  4E75                      85              RTS
000000DC                            86              
000000DC  B43C 000D                 87  JMP_D       CMP.B       #$D,D2
000000E0  6600 000A                 88              BNE         JMP_E   
000000E4  4EB9 0000026C             89              JSR         JMP_DX      *If the first hex value is D, jump to JMP_DX to determine the next set of digits
000000EA  4E75                      90              RTS
000000EC                            91              
000000EC  B43C 000F                 92  JMP_E       CMP.B       #$F,D2      *If first hex value is not 0-D, it must be E(valid) or F(invalid)
Line 93 ERROR: Undefined symbol
000000F0  6700 BA9C                 93              BEQ         INVALID     *If first hex value is F, jump to INVALID
000000F4  4EB9 00000272             94              JSR         JMP_EX      *If the first hex value is E, jump to JMP_EX to determine the next set of digits
000000FA  4E75                      95              RTS
000000FC                            96   
000000FC                            97  *============================================================
000000FC                            98  *==================ID SECOND OPCODE DIGIT====================
000000FC                            99  *============================================================
000000FC                           100  *------------------ Helper functions ------------------------
000000FC                           101  * J_CLR4 prepares the data registers for data manipulation on the second input hex digit by isolating the next 4 bits:
000000FC                           102  * %0000 XXXX 0000 0000
000000FC  4282                     103  J_CLR4      CLR.L       D2                                
000000FE  3407                     104              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000100  4281                     105              CLR.L       D1
00000102  E94A                     106              LSL.W       #4,D2       *Clear the most sig hex digit
00000104  123C 000C                107              MOVE.B      #12,D1      *Moves 12 into D1
00000108  E26A                     108              LSR.W       D1,D2       *Shifts 12 right to isolate the bits we're working with
0000010A  4E75                     109              RTS                     *Return back to JMP_Xn    
0000010C                           110              
0000010C                           111  * J_CLR3 prepares the data registers for data manipulation by isolating the next 3 bits:
0000010C                           112  * %0000 XXX0 0000 0000 0000          
0000010C  4282                     113  J_CLR3      CLR.L       D2          
0000010E  3407                     114              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000110  4281                     115              CLR.L       D1
00000112  E94A                     116              LSL.W       #4,D2       *Clear the most sig hex digit
00000114  123C 000D                117              MOVE.B      #13,D1      *Moves 13 into D1
00000118  E26A                     118              LSR.W       D1,D2       *Shifts 13 right to isolate the bits we're working with 
0000011A  4E75                     119              RTS                     *Return back to JMP_Xn  
0000011C                           120  
0000011C                           121  * J_CLR1 prepares the data registers for data manipulation by isolating the rightmost bit of the second hex dig:
0000011C                           122  * %0000 0000 0000 XX00 0000                   
0000011C  4282                     123  J_CLR2  CLR.L       D2          
0000011E  3407                     124          MOVE.W      D7,D2           *Copies D7 contents to D2 for manipulation
00000120  4281                     125          CLR.L       D1
00000122  E14A                     126          LSL.W       #8,D2           *Clear the most sig 7 bits
00000124  123C 000E                127          MOVE.B      #14,D1          *Moves 16 into D1
00000128  E26A                     128          LSR.W       D1,D2           *Shifts 16 right to isolate the bit we're working with 
0000012A  4E75                     129          RTS     
0000012C                           130  
0000012C                           131  * J_CLR1 prepares the data registers for data manipulation by isolating the rightmost bit of the second hex dig:
0000012C                           132  * %0000 000X 0000 0000 0000                   
0000012C  4282                     133  J_CLR1  CLR.L       D2          
0000012E  3407                     134          MOVE.W      D7,D2           *Copies D7 contents to D2 for manipulation
00000130  4281                     135          CLR.L       D1
00000132  EF4A                     136          LSL.W       #7,D2           *Clear the most sig 7 bits
00000134  123C 000F                137          MOVE.B      #15,D1          *Moves 16 into D1
00000138  E26A                     138          LSR.W       D1,D2           *Shifts 16 right to isolate the bit we're working with 
0000013A  4E75                     139          RTS                         *Return back to JMP_Xn  
0000013C                           140       
0000013C                           141  * J_CLR_DM prepares the data registers for data manipulation by isolating the DESTINATION MODE bits:
0000013C                           142  * Also alternatively known as the OPMODE bits for some OPCODES: OR, DIVU, SUB, etc
0000013C                           143  * %0000 000X XX00 0000 0000          
0000013C  4282                     144  J_CLR_DM    CLR.L       D2          
0000013E  3407                     145              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000140  4281                     146              CLR.L       D1
00000142  EF4A                     147              LSL.W       #7,D2       *Clear the most sig 7 bits
00000144  123C 0011                148              MOVE.B      #17,D1      *Moves 17 into D1
00000148  E26A                     149              LSR.W       D1,D2       *Shifts 17 right to isolate the bits we're working with 
0000014A  4E75                     150              RTS                     *Return back to JMP_Xn     
0000014C                           151   
0000014C                           152  *---------------End Helper functions ------------------------
0000014C                           153  
0000014C                           154          
0000014C                           155  *---------------------SUBI, ADDI-----------------------------
0000014C  4EB8 00FC                156  JMP_0X      JSR         J_CLR4      *Isolate next hex digit
00000150  B43C 0004                157              CMP.B       #$4,D2      *Is the next hex digit 4?
00000154  6700 0012                158              BEQ         J_SUBI      *Instruction is determined to be SUBI. Jump to intermediate OPCODE table jump
00000158  B43C 0006                159              CMP.B       #$6,D2      *Is the next hex digit 5?
0000015C  6700 0012                160              BEQ         J_ADDI      *Instruction is determined to be ADDI. Jump to intermediate OPCODE table jump
Line 161 ERROR: Undefined symbol
00000160  4EB9 004DBB8E            161              JSR         INVALID     *If neither, OPCODE is invalid
00000166  4E75                     162              RTS
00000168                           163  
00000168  4EB9 000002B2            164  J_SUBI      JSR         OPC_SUBI    *Jump to OPC_SUBI in OPCODE table
0000016E  4E75                     165              RTS
00000170                           166              
00000170  4EB9 000002DA            167  J_ADDI      JSR         OPC_ADDI    *Jump to OPC_ADDI in OPCODE table
00000176  4E75                     168              RTS              
00000178                           169  
00000178                           170  *---------------------MOVE.L, MOVEA.L----------------------------- 
00000178                           171  * NOTE - NO INVALID CASE. Probably correct tho-
00000178                           172  
00000178  4EB8 013C                173  JMP_2X      JSR         J_CLR_DM    *Isolate the destination mode bits %0000 000X XX00 0000 0000  
0000017C  B43C 0001                174              CMP.B       #$1,D2      *is the DEST MODE 1?
00000180  6700 000A                175              BEQ         J_MOVEAL    *Instruction is determined to be MOVEA.L Jump to intermediate OPCODE table jump
00000184  4EB9 00000194            176              JSR         J_MOVEL     *Otherwise, Instruction is determined to be MOVE.L Jump to intermediate OPCODE table jump
0000018A  4E75                     177              RTS
0000018C                           178  
0000018C  4EB9 000003AC            179  J_MOVEAL    JSR         OPC_MOVEAL  *Jump to OPC_MOVEAL in OPCODE table
00000192  4E75                     180              RTS
00000194                           181  
00000194  4EB9 000003D8            182  J_MOVEL     JSR         OPC_MOVEL   *Jump to OPC_MOVEL in OPCODE table   
0000019A  4E75                     183              RTS                           
0000019C                           184  *---------------------MOVE.W, MOVEA.W----------------------------- 
0000019C                           185  * NOTE - NO INVALID CASE. Probably correct tho- 
0000019C                           186              
0000019C  4EB8 013C                187  JMP_3X      JSR         J_CLR_DM    *Isolate the destination mode bits %0000 000X XX00 0000 0000  
000001A0  B43C 0001                188              CMP.B       #$1,D2      *is the DEST MODE 1?
000001A4  6700 000A                189              BEQ         J_MOVEAW    *Instruction is determined to be MOVEA.W Jump to intermediate OPCODE table jump
000001A8  4EB9 000001B8            190              JSR         J_MOVEW     *Otherwise, Instruction is determined to be MOVE.W Jump to intermediate OPCODE table jump
000001AE  4E75                     191              RTS
000001B0                           192  
000001B0  4EB9 00000400            193  J_MOVEAW    JSR         OPC_MOVEAW  *Jump to OPC_MOVEAW in OPCODE table
000001B6  4E75                     194              RTS
000001B8                           195  
000001B8  4EB9 0000042C            196  J_MOVEW     JSR         OPC_MOVEW   *Jump to OPC_MOVEW in OPCODE table 
000001BE  4E75                     197              RTS
000001C0                           198  *-----------------NOP, MOVEM, LEA, JSR, RTS-----------------------
000001C0  4EB8 00FC                199  JMP_4X      JSR         J_CLR4      *Isolate next hex digit   
000001C4  B43C 000E                200              CMP.B       #$E,D2      *Is the next hex digit E?
000001C8  6700 001E                201              BEQ         J_47X       *Instruction is determined to be NOP, JSR, or RTS. Jump to JMP_47X to determine.
000001CC  4EB8 012C                202              JSR         J_CLR1      *Otherwise, isolate the %0000 000X 0000 0000 digit
000001D0  B43C 0001                203              CMP.B       #1,D2       *Is the last bit 1?
000001D4  6700 001A                204              BEQ         J_LEA       *Instruction is determined to be LEA. Jump to intermediate OPCODE table jump 
000001D8  B43C 0000                205              CMP.B       #0,D2       *Is the last bit 0?
000001DC  6700 001A                206              BEQ         J_MOVEM     *Instruction is determined to be MOVEM. Jump to intermediate OPCODE table jump 
Line 207 ERROR: Undefined symbol
000001E0  4EB9 004DBB8E            207              JSR         INVALID     *If none of the above, OPCODE is invalid
000001E6  4E75                     208              RTS                                         
000001E8                           209              
000001E8  4EB9 00000278            210  J_47X       JSR         JMP_47X     *Instruction is NOP, JSR, or RTS. Jump to JMP_47X to determine.
000001EE  4E75                     211              RTS
000001F0                           212              
000001F0  4EB9 00000388            213  J_LEA       JSR         OPC_LEA     *Jump to OPC_LEA in the OPCODE table    
000001F6  4E75                     214              RTS
000001F8                           215              
000001F8  4EB9 000003AA            216  J_MOVEM     JSR         OPC_MOVEM   *Jump to OPC_MOVEM in the OPCODE table
000001FE  4E75                     217              RTS
00000200                           218              
00000200                           219  *------------------Bcc(BCC, BLT, BGE), BRA------------------------
00000200  4EB8 00FC                220  JMP_6X      JSR         J_CLR4       *Isolate next hex digit 
00000204  B43C 0000                221              CMP.B       #0,D2        *Is the next hex digit 0?
00000208  6700 000A                222              BEQ         J_BRA        *Instruction is determined to be BRA. Jump to intermediate OPCODE table jump
0000020C  4EB9 0000021C            223              JSR         J_Bcc        *Otherwise, Instruction is determined to be some form of Bcc. Jump to intermediate OPCODE table jump
00000212  4E75                     224              RTS
00000214                           225              
00000214  4EB9 00000454            226  J_BRA       JSR         OPC_BRA      *Jump to OPC_BRA in the OPCODE table  
0000021A                           227  
0000021A  4E75                     228              RTS
0000021C                           229  
0000021C  4EB9 00000456            230  J_Bcc       JSR         OPC_Bcc      *Jump to OPC_Bcc in the OPCODE table  
00000222                           231  
00000222  4E75                     232              RTS
00000224                           233              
00000224                           234  *------------------------OR, DIVU---------------------------------     
00000224  4EB8 013C                235  JMP_8X      JSR         J_CLR_DM    *Isolate the OPMODE bits %0000 000X XX00 0000 0000
00000228  B43C 0003                236              CMP.B       #3,D2       *Are the bits equivalent to $3?
0000022C  6700 000A                237              BEQ         J_DIVU      *Instruction is determined to be DIVU. Jump to intermediate OPCODE table jump
00000230  4EB9 00000240            238              JSR         J_OR        *Otherwise, Instruction is determined to be OR. Jump to intermediate OPCODE table jump
00000236  4E75                     239              RTS
00000238                           240  
00000238  4EB9 00000458            241  J_DIVU      JSR         OPC_DIVU    *Jump to OPC_DIVU in the OPCODE table  
0000023E  4E75                     242              RTS
00000240                           243              
00000240  4EB9 0000045A            244  J_OR        JSR         OPC_OR      *Jump to OPC_OR in the OPCODE table  
00000246  4E75                     245              RTS
00000248                           246  
00000248                           247  *-----------------------MULS, AND---------------------------------  
00000248  4EB8 013C                248  JMP_CX      JSR         J_CLR_DM    *Isolate the OPMODE bits %0000 000X XX00 0000 0000
0000024C  B43C 0007                249              CMP.B       #7,D2       *Are the bits equivalent to $7?
00000250  6700 000A                250              BEQ         J_MULS      *Instruction is determined to be MULS. Jump to intermediate OPCODE table jump
00000254  4EB9 00000264            251              JSR         J_AND       *Otherwise, Instruction is determined to be AND. Jump to intermediate OPCODE table jump
0000025A  4E75                     252              RTS
0000025C                           253  
0000025C  4EB9 0000045C            254  J_MULS      JSR         OPC_MULS    *Jump to OPC_MULS in the OPCODE table  
00000262  4E75                     255              RTS
00000264                           256              
00000264  4EB9 0000045E            257  J_AND       JSR         OPC_AND     *Jump to OPC_AND in the OPCODE table  
0000026A  4E75                     258              RTS
0000026C                           259  
0000026C                           260  *-----------------------ADD, ADDA--------------------------------
Line 261 ERROR: Undefined symbol
0000026C  4EB9 004DBB8E            261  JMP_DX      JSR         INVALID     *Temp, remove once implemented
00000272                           262  
00000272                           263  
00000272                           264  *------LSL/LSR REG/MEM, ASL/ASR REG/MEM, ROL/ROR REG/MEM---------
00000272                           265  
Line 266 ERROR: Undefined symbol
00000272  4EB9 004DBB8E            266  JMP_EX      JSR         INVALID     *Temp, remove once implemented
00000278                           267  
00000278                           268  *============================================================
00000278                           269  *==================ID THIRD OPCODE DIGIT=====================
00000278                           270  *============================================================
00000278                           271     
00000278  BE7C 4E71                272  JMP_47X     CMP.W       #$4E71,D7    *Is it NOP?
0000027C  6700 001C                273              BEQ         O_NOP
00000280  BE7C 4E75                274              CMP.W       #$4E75,D7       *Is it RTS?
00000284  6700 001C                275              BEQ         O_RTS
00000288  4EB8 011C                276              JSR         J_CLR2       *Isolate the 6th and 7th bit
0000028C  B43C 0002                277              CMP.B       #2,D2        *Is it JSR?
00000290  6700 0018                278              BEQ         O_JSR
Line 279 ERROR: Undefined symbol
00000294  4EF9 004DBB8E            279              JMP         INVALID      *Got here? Must be invalid data.
0000029A                           280  
0000029A  4EB9 0000047C            281  O_NOP       JSR         OPC_NOP
000002A0  4E75                     282              RTS
000002A2                           283  
000002A2  4EB9 0000048A            284  O_RTS       JSR         OPC_RTS
000002A8  4E75                     285              RTS
000002AA                           286  
000002AA  4EB9 00000460            287  O_JSR       JSR         OPC_JSR
000002B0  4E75                     288              RTS
000002B2                           289           
000002B2                           290  
000002B2                           291  *============================================================
000002B2                           292  *=====================OPCODE TABLE===========================
000002B2                           293  *================OPCODE KNOWN, PRINTING======================
000002B2                           294  *============================================================
000002B2                           295  * IF YOU DO NOT USE A GET_SIZE_X SUBROUTINE, YOU MUST
000002B2                           296  * MANUALLY SET THE SIZE CODE IN D4. (0 = B, 1 = W, 2 = L)
000002B2                           297  
000002B2                           298  *---------------------SUBI OPCODE----------------------------
000002B2  18FC 0053                299  OPC_SUBI    MOVE.B      #'S',(A4)+
000002B6  18FC 0055                300              MOVE.B      #'U',(A4)+
000002BA  18FC 0042                301              MOVE.B      #'B',(A4)+
000002BE  18FC 0049                302              MOVE.B      #'I',(A4)+
000002C2  18FC 002E                303              MOVE.B      #'.',(A4)+
000002C6                           304              
000002C6  4EB9 000004EA            305              JSR         GET_SIZE_2  *Get 2 bit size code
000002CC  4EB9 00000498            306              JSR         ADD_SIZE    *Add the size character based on size code
000002D2                           307              
Line 308 ERROR: Undefined symbol
000002D2  4EB9 004DBB8E            308              JSR         IDATASRC_EA *Jump to #<data>,<ea> operand flow.
000002D8                           309              
000002D8  4E75                     310              RTS
000002DA                           311  
000002DA                           312  *---------------------ADDI OPCODE----------------------------
000002DA  18FC 0041                313  OPC_ADDI    MOVE.B      #'A',(A4)+
000002DE  18FC 0044                314              MOVE.B      #'D',(A4)+
000002E2  18FC 0044                315              MOVE.B      #'D',(A4)+
000002E6  18FC 0049                316              MOVE.B      #'I',(A4)+
000002EA  18FC 002E                317              MOVE.B      #'.',(A4)+
000002EE                           318              
000002EE  4EB9 000004EA            319              JSR         GET_SIZE_2  *Get 2 bit size code
000002F4  4EB9 00000498            320              JSR         ADD_SIZE    *Add the size character based on size code
000002FA                           321              
Line 322 ERROR: Undefined symbol
000002FA  4EB9 004DBB8E            322              JSR         IDATASRC_EA *Jump to #<data>,<ea> operand flow.
00000300                           323              
00000300  4E75                     324              RTS
00000302                           325  
00000302                           326  *--------------------MOVE.B OPCODE---------------------------
00000302  18FC 004D                327  OPC_MOVEB   MOVE.B      #'M',(A4)+
00000306  18FC 004F                328              MOVE.B      #'O',(A4)+
0000030A  18FC 0056                329              MOVE.B      #'V',(A4)+
0000030E  18FC 0045                330              MOVE.B      #'E',(A4)+
00000312  18FC 002E                331              MOVE.B      #'.',(A4)+
00000316                           332  
00000316                           333  
00000316  4284                     334              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000318  4EB9 00000498            335              JSR         ADD_SIZE    *Add size characters
0000031E                           336              
Line 337 ERROR: Undefined symbol
0000031E  4EB9 004DBB8E            337              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
00000324                           338              
00000324  4E75                     339              RTS
00000326                           340  
00000326                           341  *--------------------ADDQ OPCODE----------------------------
00000326  18FC 0041                342  OPC_ADDQ    MOVE.B      #'A',(A4)+
0000032A  18FC 0044                343              MOVE.B      #'D',(A4)+
0000032E  18FC 0044                344              MOVE.B      #'D',(A4)+
00000332  18FC 0051                345              MOVE.B      #'Q',(A4)+
00000336  18FC 002E                346              MOVE.B      #'.',(A4)+
0000033A                           347  
0000033A  4EB9 000004EA            348              JSR         GET_SIZE_2   *Get size code (placed in D4)
00000340  4EB9 00000498            349              JSR         ADD_SIZE     *Add size character to string (B/W/L)
00000346                           350              
Line 351 ERROR: Undefined symbol
00000346  4EB9 004DBB8E            351              JSR         ADDQ_EA      *Start the EA/operand decode logic
0000034C                           352   
0000034C  4E75                     353              RTS
0000034E                           354  
0000034E                           355  *------------------MOVEQ OPCODE-----------------------------
0000034E  18FC 004D                356  OPC_MOVEQ   MOVE.B      #'M',(A4)+
00000352  18FC 004F                357              MOVE.B      #'O',(A4)+
00000356  18FC 0056                358              MOVE.B      #'V',(A4)+
0000035A  18FC 0045                359              MOVE.B      #'E',(A4)+
0000035E  18FC 0051                360              MOVE.B      #'Q',(A4)+
00000362                           361              
Line 362 ERROR: Undefined symbol
00000362  4EB9 004DBB8E            362              JSR         MOVEQ_EA     *Start the EA/opderand decode logic for moveq
00000368                           363            
00000368  4E75                     364              RTS
0000036A                           365  
0000036A                           366  *------------------SUB OPCODE-------------------------------
0000036A  18FC 0053                367  OPC_9XXX    MOVE.B      #'S',(A4)+
0000036E  18FC 0055                368              MOVE.B      #'U',(A4)+
00000372  18FC 0042                369              MOVE.B      #'B',(A4)+
00000376  18FC 002E                370              MOVE.B      #'.',(A4)+
0000037A                           371  
0000037A  4EB9 000004DA            372              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
00000380                           373              
00000380  4EB9 00000510            374              JSR         OR_ADD_SIZE    * This will add size characters and start operand decode sequence
00000386                           375  
00000386  4E75                     376              RTS
00000388                           377  
00000388                           378  *------------------LEA OPCODE-------------------------------            
00000388  18FC 004C                379  OPC_LEA     MOVE.B      #'L',(A4)+
0000038C  18FC 0045                380              MOVE.B      #'E',(A4)+
00000390  18FC 0041                381              MOVE.B      #'A',(A4)+
00000394  18FC 0020                382              MOVE.B      #' ',(A4)+
00000398  18FC 0020                383              MOVE.B      #' ',(A4)+
0000039C                           384              
0000039C  4284                     385              CLR.L       D4          *Manually set size to byte (D4 = 0)
0000039E  183C 0002                386              MOVE.B      #2,D4       *Manually set size to long.
000003A2                           387              
Line 388 ERROR: Undefined symbol
000003A2  4EB9 004DBB8E            388              JSR         EASRC_ADES
000003A8                           389              
000003A8  4E75                     390              RTS
000003AA                           391              
000003AA                           392  *------------------MOVEM OPCODE----------------------------- 
000003AA  4E75                     393  OPC_MOVEM   RTS
000003AC                           394  
000003AC                           395  
000003AC                           396  *------------------MOVEA.L OPCODE----------------------------
000003AC  18FC 004D                397  OPC_MOVEAL  MOVE.B      #'M',(A4)+
000003B0  18FC 004F                398              MOVE.B      #'O',(A4)+
000003B4  18FC 0056                399              MOVE.B      #'V',(A4)+
000003B8  18FC 0045                400              MOVE.B      #'E',(A4)+
000003BC  18FC 0041                401              MOVE.B      #'A',(A4)+
000003C0  18FC 002E                402              MOVE.B      #'.',(A4)+
000003C4                           403  
000003C4  4284                     404              CLR.L       D4          *Manually set size to byte (D4 = 0)
000003C6  183C 0002                405              MOVE.B      #2,D4       *Set size code to long
000003CA  4EB9 00000498            406              JSR         ADD_SIZE    *Add size characters
000003D0                           407              
Line 408 ERROR: Undefined symbol
000003D0  4EB9 004DBB8E            408              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
000003D6  4E75                     409              RTS
000003D8                           410  
000003D8                           411  
000003D8                           412  *------------------MOVEM.L OPCODE----------------------------
000003D8  18FC 004D                413  OPC_MOVEL   MOVE.B      #'M',(A4)+
000003DC  18FC 004F                414              MOVE.B      #'O',(A4)+
000003E0  18FC 0056                415              MOVE.B      #'V',(A4)+
000003E4  18FC 0045                416              MOVE.B      #'E',(A4)+
000003E8  18FC 002E                417              MOVE.B      #'.',(A4)+
000003EC                           418  
000003EC  4284                     419              CLR.L       D4          *Manually set size to byte (D4 = 0)
000003EE  183C 0002                420              MOVE.B      #2,D4       *Set size code to long
000003F2  4EB9 00000498            421              JSR         ADD_SIZE    *Add size characters
000003F8                           422              
Line 423 ERROR: Undefined symbol
000003F8  4EB9 004DBB8E            423              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
000003FE  4E75                     424              RTS
00000400                           425  
00000400                           426  *------------------MOVEA.W OPCODE----------------------------
00000400  18FC 004D                427  OPC_MOVEAW  MOVE.B      #'M',(A4)+
00000404  18FC 004F                428              MOVE.B      #'O',(A4)+
00000408  18FC 0056                429              MOVE.B      #'V',(A4)+
0000040C  18FC 0045                430              MOVE.B      #'E',(A4)+
00000410  18FC 0041                431              MOVE.B      #'A',(A4)+
00000414  18FC 002E                432              MOVE.B      #'.',(A4)+
00000418                           433  
00000418  4284                     434              CLR.L       D4          *Manually set size to byte (D4 = 0)
0000041A  183C 0001                435              MOVE.B      #1,D4       *Set size code to word
0000041E  4EB9 00000498            436              JSR         ADD_SIZE    *Add size characters
00000424                           437              
Line 438 ERROR: Undefined symbol
00000424  4EB9 004DBB8E            438              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
0000042A  4E75                     439              RTS
0000042C                           440  
0000042C                           441  
0000042C                           442  *------------------MOVE.W OPCODE----------------------------
0000042C  18FC 004D                443  OPC_MOVEW   MOVE.B      #'M',(A4)+
00000430  18FC 004F                444              MOVE.B      #'O',(A4)+
00000434  18FC 0056                445              MOVE.B      #'V',(A4)+
00000438  18FC 0045                446              MOVE.B      #'E',(A4)+
0000043C  18FC 002E                447              MOVE.B      #'.',(A4)+
00000440                           448  
00000440  4284                     449              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000442  183C 0001                450              MOVE.B      #1,D4       *Set size code to word
00000446  4EB9 00000498            451              JSR         ADD_SIZE    *Add size characters
0000044C                           452              
Line 453 ERROR: Undefined symbol
0000044C  4EB9 004DBB8E            453              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
00000452  4E75                     454              RTS
00000454                           455  
00000454                           456  
00000454                           457  *---------------------BRA OPCODE----------------------------
00000454  4E75                     458  OPC_BRA     RTS
00000456                           459  
00000456                           460  
00000456                           461  *---------------------Bcc OPCODE----------------------------
00000456  4E75                     462  OPC_Bcc     RTS
00000458                           463  
00000458                           464  
00000458                           465  *--------------------DIVU OPCODE----------------------------
00000458  4E75                     466  OPC_DIVU    RTS
0000045A                           467  
0000045A                           468  
0000045A                           469  *---------------------OR OPCODE-----------------------------
0000045A  4E75                     470  OPC_OR      RTS
0000045C                           471  
0000045C                           472  *---------------------MULS  OPCODE--------------------------
0000045C  4E75                     473  OPC_MULS    RTS
0000045E                           474  
0000045E                           475  *---------------------AND  OPCODE---------------------------
0000045E  4E75                     476  OPC_AND     RTS
00000460                           477  
00000460                           478  *--------------------JSR OPCODE-----------------------------
00000460  18FC 004A                479  OPC_JSR     MOVE.B      #'J',(A4)+
00000464  18FC 0053                480              MOVE.B      #'S',(A4)+
00000468  18FC 0052                481              MOVE.B      #'R',(A4)+
0000046C  18FC 0020                482              MOVE.B      #' ',(A4)+
00000470  18FC 0020                483              MOVE.B      #' ',(A4)+
Line 484 ERROR: Undefined symbol
00000474  4EB9 004DBB8E            484              JSR         GEN_EA_CODE *Get EA code
0000047A                           485              
0000047A  4E75                     486              RTS
0000047C                           487  
0000047C                           488  *--------------------NOP OPCODE-----------------------------
0000047C  18FC 004E                489  OPC_NOP     MOVE.B      #'N',(A4)+
00000480  18FC 004F                490              MOVE.B      #'O',(A4)+
00000484  18FC 0050                491              MOVE.B      #'P',(A4)+
00000488                           492              
00000488  4E75                     493              RTS
0000048A                           494  
0000048A                           495  *--------------------RTS OPCODE-----------------------------
0000048A  18FC 0052                496  OPC_RTS     MOVE.B      #'R',(A4)+
0000048E  18FC 0054                497              MOVE.B      #'T',(A4)+
00000492  18FC 0053                498              MOVE.B      #'S',(A4)+
00000496                           499              
00000496  4E75                     500              RTS
00000498                           501  
00000498                           502  *===========================================================
00000498                           503  *=====================HELPER SUBROUTINES====================
00000498                           504  *===========================================================
00000498                           505  
00000498                           506  *--------------------ADD SIZE-------------------------------
00000498                           507  * A simple helper that looks at the size code in D4 to add
00000498                           508  * the appropriate B,W,L to the string.
00000498                           509  *-----------------------------------------------------------
00000498  B83C 0000                510  ADD_SIZE    CMP.B       #0,D4       *Is it a B, <ea>,dn
0000049C  6700 0012                511              BEQ         B_SIZE
000004A0  B83C 0001                512              CMP.B       #1,D4       *Is it a W, <ea>,dn
000004A4  6700 0018                513              BEQ         W_SIZE
000004A8  B83C 0002                514              CMP.B       #2,D4       *Is it a L, <ea>,dn
000004AC  6700 001E                515              BEQ         L_SIZE 
000004B0                           516              
000004B0  18FC 0042                517  B_SIZE      MOVE.B      #'B',(A4)+  *Add size character to good string
000004B4  18FC 0020                518              MOVE.B      #' ',(A4)+
000004B8  18FC 0020                519              MOVE.B      #' ',(A4)+
000004BC  4E75                     520              RTS
000004BE                           521  
000004BE  18FC 0057                522  W_SIZE      MOVE.B      #'W',(A4)+  *Add size character to good string
000004C2  18FC 0020                523              MOVE.B      #' ',(A4)+
000004C6  18FC 0020                524              MOVE.B      #' ',(A4)+
000004CA  4E75                     525              RTS
000004CC                           526  
000004CC  18FC 004C                527  L_SIZE      MOVE.B      #'L',(A4)+  *Add size character to good string
000004D0  18FC 0020                528              MOVE.B      #' ',(A4)+
000004D4  18FC 0020                529              MOVE.B      #' ',(A4)+
000004D8  4E75                     530              RTS
000004DA                           531  
000004DA                           532  *--------------------GET SIZE CODE--------------------------
000004DA                           533  * The following three subroutines isolate the size bits for
000004DA                           534  * all opcodes. They are by number of bits (e.g. 3 bits for
000004DA                           535  * size implies GET_SIZE_3)
000004DA                           536  *-----------------------------------------------------------
000004DA  4284                     537  GET_SIZE_3  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
000004DC  3807                     538              MOVE.W      D7,D4       *Copy untouched opcode into D4
000004DE  EF4C                     539              LSL.W       #7,D4       *Clear more significant bits
000004E0  4283                     540              CLR.L       D3          *Make sure D3 is clear for shifting
000004E2  163C 000D                541              MOVE.B      #13,D3      *Shifting 13 times
000004E6  E66C                     542              LSR.W       D3,D4       *Move size bits to LSB position
000004E8  4E75                     543              RTS
000004EA                           544  
000004EA  4284                     545  GET_SIZE_2  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
000004EC  3807                     546              MOVE.W      D7,D4       *Copy untouched opcode into D4
000004EE  E14C                     547              LSL.W       #8,D4       *Clear more significant bits
000004F0  4283                     548              CLR.L       D3          *Make sure D3 is clear for shifting
000004F2  163C 000E                549              MOVE.B      #14,D3      *Shifting 14 times
000004F6  E66C                     550              LSR.W       D3,D4       *Move size bits to LSB position
000004F8  4E75                     551              RTS
000004FA                           552  
000004FA  4284                     553  GET_SIZE_1  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
000004FC  3807                     554              MOVE.W      D7,D4       *Copy untouched opcode into D4
000004FE  4283                     555              CLR.L       D3          *Make sure D3 is clear for shifting
00000500  163C 0009                556              MOVE.B      #9,D3       *Shift 9 times to the left
00000504  E76C                     557              LSL.W       D3,D4       *Clear more significant bits
00000506  4283                     558              CLR.L       D3          *Make sure D3 is clear for shifting
00000508  163C 000F                559              MOVE.B      #15,D3      *Shifting 15 times
0000050C  E66C                     560              LSR.W       D3,D4       *Move size bits to LSB position
0000050E  4E75                     561              RTS
00000510                           562  
00000510                           563  *--------------------ADD SIZE (Pseudo JMP TABLE)------------
00000510                           564  * This subroutine is for ADD, AND, OR, SUB.
00000510                           565  * It adds the appropriate "B", "W", "L" and space characters
00000510                           566  * to the output strings. It then starts the parameter decode
00000510                           567  * sequence for the above 4 subroutines.
00000510                           568  * Values 0, 1, 2 => B, W, L => <ea>,Dn => JSR EA_SRC
00000510                           569  * Values 4, 5, 6 => B, W, L => Dn,<ea> => JSR DN_SRC
00000510                           570  *-----------------------------------------------------------
00000510  B83C 0000                571  OR_ADD_SIZE CMP.B       #0,D4       *Is it a B, <ea>,dn
00000514  6700 002E                572              BEQ         B_EA
00000518  B83C 0001                573              CMP.B       #1,D4       *Is it a W, <ea>,dn
0000051C  6700 003A                574              BEQ         W_EA
00000520  B83C 0002                575              CMP.B       #2,D4       *Is it a L, <ea>,dn
00000524  6700 0046                576              BEQ         L_EA
00000528                           577  
00000528  B83C 0004                578              CMP.B       #4,D4       *Is it a B, dn,<ea>
0000052C  6700 0052                579              BEQ         B_DN
00000530  B83C 0005                580              CMP.B       #5,D4       *Is it a W, dn,<ea>
00000534  6700 005E                581              BEQ         W_DN
00000538  B83C 0006                582              CMP.B       #6,D4       *Is it a L, dn,<ea>
0000053C  6700 006A                583              BEQ         L_DN        
Line 584 ERROR: Undefined symbol
00000540  6000 B64C                584              BRA         INVALID     *Got here, must be invalid data.
00000544                           585              
00000544  18FC 0042                586  B_EA        MOVE.B      #'B',(A4)+  *Add size character to good string
00000548  18FC 0020                587              MOVE.B      #' ',(A4)+
0000054C  18FC 0020                588              MOVE.B      #' ',(A4)+
Line 589 ERROR: Undefined symbol
00000550  4EB9 004DBB8E            589              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
00000556  4E75                     590              RTS
00000558                           591  
00000558  18FC 0057                592  W_EA        MOVE.B      #'W',(A4)+  *Add size character to good string
0000055C  18FC 0020                593              MOVE.B      #' ',(A4)+
00000560  18FC 0020                594              MOVE.B      #' ',(A4)+
Line 595 ERROR: Undefined symbol
00000564  4EB9 004DBB8E            595              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
0000056A  4E75                     596              RTS
0000056C                           597  
0000056C  18FC 004C                598  L_EA        MOVE.B      #'L',(A4)+  *Add size character to good string
00000570  18FC 0020                599              MOVE.B      #' ',(A4)+
00000574  18FC 0020                600              MOVE.B      #' ',(A4)+
Line 601 ERROR: Undefined symbol
00000578  4EB9 004DBB8E            601              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
0000057E  4E75                     602              RTS
00000580                           603  
00000580  18FC 0042                604  B_DN        MOVE.B      #'B',(A4)+  *Add size character to good string
00000584  18FC 0020                605              MOVE.B      #' ',(A4)+
00000588  18FC 0020                606              MOVE.B      #' ',(A4)+
Line 607 ERROR: Undefined symbol
0000058C  4EB9 004DBB8E            607              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
00000592  4E75                     608              RTS
00000594                           609  
00000594  18FC 0057                610  W_DN        MOVE.B      #'W',(A4)+  *Add size character to good string
00000598  18FC 0020                611              MOVE.B      #' ',(A4)+
0000059C  18FC 0020                612              MOVE.B      #' ',(A4)+
Line 613 ERROR: Undefined symbol
000005A0  4EB9 004DBB8E            613              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
000005A6  4E75                     614              RTS
000005A8                           615  
000005A8  18FC 004C                616  L_DN        MOVE.B      #'L',(A4)+  *Add size character to good string
000005AC  18FC 0020                617              MOVE.B      #' ',(A4)+
000005B0  18FC 0020                618              MOVE.B      #' ',(A4)+
Line 619 ERROR: Undefined symbol
000005B4  4EB9 004DBB8E            619              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
000005BA  4E75                     620              RTS            
000005BC                           621              
000005BC                           622              
000005BC                           623              
000005BC                           624              
000005BC                           625              
000005BC                           626              
000005BC                           627              
000005BC                           628  
000005BC                           629  
000005BC                           630  
000005BC                           631  
Line 632 WARNING: END directive missing, starting address not set

26 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_SIZE            498
B_DN                580
B_EA                544
B_SIZE              4B0
GET_SIZE_1          4FA
GET_SIZE_2          4EA
GET_SIZE_3          4DA
JMP_0               C
JMP_0X              14C
JMP_1               1C
JMP_2               2C
JMP_2X              178
JMP_3               3C
JMP_3X              19C
JMP_4               4C
JMP_47X             278
JMP_4X              1C0
JMP_5               5C
JMP_6               6C
JMP_6X              200
JMP_7               7C
JMP_8               8C
JMP_8X              224
JMP_9               9C
JMP_A               AC
JMP_B               BC
JMP_C               CC
JMP_CX              248
JMP_D               DC
JMP_DX              26C
JMP_E               EC
JMP_EX              272
JMP_TBL             0
J_47X               1E8
J_ADDI              170
J_AND               264
J_BCC               21C
J_BRA               214
J_CLR1              12C
J_CLR2              11C
J_CLR3              10C
J_CLR4              FC
J_CLR_DM            13C
J_DIVU              238
J_LEA               1F0
J_MOVEAL            18C
J_MOVEAW            1B0
J_MOVEL             194
J_MOVEM             1F8
J_MOVEW             1B8
J_MULS              25C
J_OR                240
J_SUBI              168
L_DN                5A8
L_EA                56C
L_SIZE              4CC
OPC_9XXX            36A
OPC_ADDI            2DA
OPC_ADDQ            326
OPC_AND             45E
OPC_BCC             456
OPC_BRA             454
OPC_DIVU            458
OPC_JSR             460
OPC_LEA             388
OPC_MOVEAL          3AC
OPC_MOVEAW          400
OPC_MOVEB           302
OPC_MOVEL           3D8
OPC_MOVEM           3AA
OPC_MOVEQ           34E
OPC_MOVEW           42C
OPC_MULS            45C
OPC_NOP             47C
OPC_OR              45A
OPC_RTS             48A
OPC_SUBI            2B2
OR_ADD_SIZE         510
O_JSR               2AA
O_NOP               29A
O_RTS               2A2
W_DN                594
W_EA                558
W_SIZE              4BE
