00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2017 11:11:12 AM

00000000                             1  ************************************************************
00000000                             2  * TEAM NEVERY LUCKY DISSASSEMBLER
00000000                             3  * This file includes OPCODE logic (OPCODE and size decoding)
00000000                             4  ************************************************************
00000000                             5  
00000000                             6  
00000000                             7  *============================================================
00000000                             8  *===================ID FIRST OPCODE DIGIT====================
00000000                             9  *============================================================
00000000                            10  
00000000                            11  *-----------------------JMP_TBL------------------------------
00000000                            12  * Purpose: JMP_TBL takes a data register input (D7) and navigates to the correct OPCODE table
00000000                            13  *          entry.
00000000                            14  *          $FF is saved to D6 if OPCode is determined to be incorrect
00000000                            15  * Assumption: Whenever JMP_TBL is called, D7 contains the next new machine code instruction
00000000                            16  *------------------------------------------------------------
00000000  4282                      17  JMP_TBL     CLR.L       D2
00000002  3407                      18              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000004  4281                      19              CLR.L       D1
00000006  123C 000C                 20              MOVE.B      #12,D1      *Moves 12 into D1
0000000A  E26A                      21              LSR.W       D1,D2       *Shifts 12 bits so the remaining contents = the left 4 bits of D7
0000000C                            22                          
0000000C  B43C 0000                 23  JMP_0       CMP.B       #$0,D2      *Following section determines what hex value the first 4 digits are
00000010  6600 000A                 24              BNE         JMP_1       *If the first hex value is not 0, branch and see if its 1
00000014  4EB9 00000196             25              JSR         JMP_0X      *If the first hex value is 0, jump to JMP_0X to determine the next set of digits
0000001A  4E75                      26              RTS                     *Finished all jumping; whole instruction should be identified at this point
0000001C                            27              
0000001C  B43C 0001                 28  JMP_1       CMP.B       #$1,D2
00000020  6600 000A                 29              BNE         JMP_2       *If the first hex value is not 2, branch and see if its 3, and so on
00000024  4EB9 00000456             30              JSR         OPC_MOVEB   *If the first hex value is 1, the instruction is determined to be MOVE.B. Jump to OPC_MOVEB in OPCODE table.
0000002A  4E75                      31              RTS                     *Finished all jumping; whole instruction should be identified at this point, and so on       
0000002C                            32             
0000002C  B43C 0002                 33  JMP_2       CMP.B       #$2,D2
00000030  6600 000A                 34              BNE         JMP_3 
00000034  4EB9 000001C2             35              JSR         JMP_2X      *If the first hex value is 2, jump to JMP_2X to determine the next set of digits
0000003A  4E75                      36              RTS
0000003C                            37              
0000003C  B43C 0003                 38  JMP_3       CMP.B       #$3,D2
00000040  6600 000A                 39              BNE         JMP_4
00000044  4EB9 000001E6             40              JSR         JMP_3X      *If the first hex value is 3, jump to JMP_3X to determine the next set of digits
0000004A  4E75                      41              RTS
0000004C                            42           
0000004C  B43C 0004                 43  JMP_4       CMP.B       #$4,D2      *Where NOP SHOULD LAND
00000050  6600 000A                 44              BNE         JMP_5
00000054  4EB9 0000020A             45              JSR         JMP_4X      *If the first hex value is 4, jump to JMP_4X to determine the next set of digits
0000005A  4E75                      46              RTS
0000005C                            47              
0000005C  B43C 0005                 48  JMP_5       CMP.B       #$5,D2
00000060  6600 000A                 49              BNE         JMP_6
00000064  4EB9 0000047A             50              JSR         OPC_ADDQ    *If the first hex digit is 5, the instruction is determined to be ADDQ. Jump to OPC_ADDQ in OPCODE table.
0000006A  4E75                      51              RTS
0000006C                            52              
0000006C  B43C 0006                 53  JMP_6       CMP.B       #$6,D2
00000070  6600 000A                 54              BNE         JMP_7
00000074  4EB9 00000252             55              JSR         JMP_6X      *If the first hex value is 6, jump to JMP_6X to determine the next set of digits
0000007A  4E75                      56              RTS
0000007C                            57              
0000007C  B43C 0007                 58  JMP_7       CMP.B       #$7,D2
00000080  6600 000A                 59              BNE         JMP_8
00000084  4EB9 000004A2             60              JSR         OPC_MOVEQ    *If the first hex digit is 7, the instruction is determined to be MOVEQ. Jump to OPC_MOVEQ in OPCODE table.
0000008A  4E75                      61              RTS
0000008C                            62              
0000008C  B43C 0008                 63  JMP_8       CMP.B       #$8,D2
00000090  6600 000A                 64              BNE         JMP_9
00000094  4EB9 00000276             65              JSR         JMP_8X      *If the first hex value is 8, jump to JMP_8X to determine the next set of digits
0000009A  4E75                      66              RTS
0000009C                            67              
0000009C  B43C 0009                 68  JMP_9       CMP.B       #$9,D2
000000A0  6600 000A                 69              BNE         JMP_A
000000A4  4EB9 000004BE             70              JSR         OPC_SUB    *If the first hex digit is 9, the instruction is determined to be SUB. Jump to OPC_9XXX in OPCODE table.
000000AA  4E75                      71              RTS
000000AC                            72              
000000AC  B43C 000A                 73  JMP_A       CMP.B       #$A,D2
000000B0  6600 000A                 74              BNE         JMP_B
Line 75 ERROR: Undefined symbol
000000B4  4EB9 004DBB8E             75              JSR         INVALID     *0x A is an invalid first hex digit. Jump to INVALID
000000BA  4E75                      76              RTS
000000BC                            77              
000000BC  B43C 000B                 78  JMP_B       CMP.B       #$B,D2
000000C0  6600 000A                 79              BNE         JMP_C
Line 80 ERROR: Undefined symbol
000000C4  4EB9 004DBB8E             80              JSR         INVALID     *0xB is an invalid first hex digit. Jump to INVALID
000000CA  4E75                      81              RTS
000000CC                            82              
000000CC  B43C 000C                 83  JMP_C       CMP.B       #$C,D2
000000D0  6600 000A                 84              BNE         JMP_D
000000D4  4EB9 0000029A             85              JSR         JMP_CX
000000DA                            86        *If the first hex value is C, jump to JMP_CX to determine the next set of digits
000000DA  4E75                      87              RTS
000000DC                            88              
000000DC  B43C 000D                 89  JMP_D       CMP.B       #$D,D2
000000E0  6600 000A                 90              BNE         JMP_E   
000000E4  4EB9 000002BE             91              JSR         JMP_DX      *If the first hex value is D, jump to JMP_DX to determine the next set of digits
000000EA  4E75                      92              RTS
000000EC                            93              
000000EC  B43C 000F                 94  JMP_E       CMP.B       #$F,D2      *If first hex value is not 0-D, it must be E(valid) or F(invalid)
000000F0  6700 000A                 95              BEQ         INV_OP      *If first hex value is F, jump to INVALID
000000F4  4EB9 00000322             96              JSR         JMP_EX      *If the first hex value is E, jump to JMP_EX to determine the next set of digits
000000FA  4E75                      97              RTS
000000FC                            98              
Line 99 ERROR: Undefined symbol
000000FC  4EF9 004DBB8E             99  INV_OP      JMP         INVALID     *Got here? Must be invalid.
00000102  4E75                     100              RTS
00000104                           101   
00000104                           102  *============================================================
00000104                           103  *==================ID SECOND OPCODE DIGIT====================
00000104                           104  *============================================================
00000104                           105  *------------------ Helper functions ------------------------
00000104                           106  * J_CLR4 prepares the data registers for data manipulation on the second input hex digit by isolating the next 4 bits:
00000104                           107  * %0000 XXXX 0000 0000
00000104  4282                     108  J_CLR4      CLR.L       D2                                
00000106  3407                     109              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000108  4281                     110              CLR.L       D1
0000010A  E94A                     111              LSL.W       #4,D2       *Clear the most sig hex digit
0000010C  123C 000C                112              MOVE.B      #12,D1      *Moves 12 into D1
00000110  E26A                     113              LSR.W       D1,D2       *Shifts 12 right to isolate the bits we're working with
00000112  4E75                     114              RTS                     *Return back to JMP_Xn    
00000114                           115              
00000114                           116  * J_CLR3 prepares the data registers for data manipulation by isolating the next 3 bits:
00000114                           117  * %0000 XXX0 0000 0000 0000          
00000114  4282                     118  J_CLR3      CLR.L       D2          
00000116  3407                     119              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000118  4281                     120              CLR.L       D1
0000011A  E94A                     121              LSL.W       #4,D2       *Clear the most sig hex digit
0000011C  123C 000D                122              MOVE.B      #13,D1      *Moves 13 into D1
00000120  E26A                     123              LSR.W       D1,D2       *Shifts 13 right to isolate the bits we're working with 
00000122  4E75                     124              RTS                     *Return back to JMP_Xn  
00000124                           125  
00000124                           126  * J_CLR1 prepares the data registers for data manipulation by isolating the rightmost bit of the second hex dig:
00000124                           127  * %0000 0000 0000 XX00 0000                   
00000124  4282                     128  J_CLR2      CLR.L       D2          
00000126  3407                     129              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000128  4281                     130              CLR.L       D1
0000012A  E14A                     131              LSL.W       #8,D2       *Clear the most sig 7 bits
0000012C  123C 000E                132              MOVE.B      #14,D1      *Moves 16 into D1
00000130  E26A                     133              LSR.W       D1,D2       *Shifts 16 right to isolate the bit we're working with 
00000132  4E75                     134              RTS     
00000134                           135  
00000134                           136  * J_CLR1 prepares the data registers for data manipulation by isolating the rightmost bit of the second hex dig:
00000134                           137  * %0000 000X 0000 0000 0000                   
00000134  4282                     138  J_CLR1      CLR.L       D2          
00000136  3407                     139              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000138  4281                     140              CLR.L       D1
0000013A  EF4A                     141              LSL.W       #7,D2       *Clear the most sig 7 bits
0000013C  123C 000F                142              MOVE.B      #15,D1      *Moves 16 into D1
00000140  E26A                     143              LSR.W       D1,D2       *Shifts 16 right to isolate the bit we're working with 
00000142  4E75                     144              RTS                     *Return back to JMP_Xn
00000144                           145          
00000144                           146  * %0000 000X XX00 0000        
00000144  4282                     147  J_CLR_LEA   CLR.L       D2          
00000146  3407                     148              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000148  4281                     149              CLR.L       D1
0000014A  EF4A                     150              LSL.W       #7,D2       *Clear the most sig 7 bits
0000014C  123C 000D                151              MOVE.B      #13,D1      *Moves 13 into D1
00000150  E26A                     152              LSR.W       D1,D2       *Shifts 13 right to isolate the bit we're working with 
00000152  4E75                     153              RTS    
00000154                           154              
00000154                           155  * %XXXX X000 0000 0000   
00000154  4282                     156  J_CLR_MM    CLR.L       D2          
00000156  3407                     157              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000158  4281                     158              CLR.L       D1   
0000015A  123C 000B                159              MOVE.B      #11,D1      *Moves 11 into D1
0000015E  E26A                     160              LSR.W       D1,D2       *Shifts 11 right to isolate the bit we're working with 
00000160  4E75                     161              RTS
00000162                           162  
00000162                           163  * %0000 00XX X000 0000   
00000162  4282                     164  J_CLR_MM2   CLR.L       D2          
00000164  3407                     165              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000166  ED4A                     166              LSL.W       #6,D2
00000168  4281                     167              CLR.L       D1   
0000016A  123C 000D                168              MOVE.B      #13,D1      *Moves 11 into D1
0000016E  E26A                     169              LSR.W       D1,D2       *Shifts 11 right to isolate the bit we're working with 
00000170  4E75                     170              RTS
00000172                           171              
00000172                           172  * J_CLR_DM prepares the data registers for data manipulation by isolating the DESTINATION MODE bits:
00000172                           173  * Also alternatively known as the OPMODE bits for some OPCODES: OR, DIVU, SUB, ADDA, ADD
00000172                           174  * %0000 000X XX00 0000 0000          
00000172  4282                     175  J_CLR_DM    CLR.L       D2          
00000174  3407                     176              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000176  4281                     177              CLR.L       D1
00000178  EF4A                     178              LSL.W       #7,D2       *Clear the most sig 7 bits
0000017A  123C 000D                179              MOVE.B      #13,D1      *Moves 13 into D1
0000017E  E26A                     180              LSR.W       D1,D2       *Shifts 13 right to isolate the bits we're working with 
00000180  4E75                     181              RTS                     *Return back to JMP_Xn     
00000182                           182  
00000182                           183  * %0000 0000 000X X000            
00000182  4282                     184  J_CLR_SHFT  CLR.L       D2
00000184  3407                     185              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
00000186  4281                     186              CLR.L       D1
00000188  183C 000B                187              MOVE.B      #11,D4      *Moves 11 into D4
0000018C  E96A                     188              LSL.W       D4,D2      *Clear the most sig 11 bits
0000018E  123C 000E                189              MOVE.B      #14,D1      *Moves 14 into D1
00000192  E26A                     190              LSR.W       D1,D2       *Shifts 14 right to isolate the bits we're working with 
00000194  4E75                     191              RTS                     *Return back to JMP_Xn 
00000196                           192              
00000196                           193   
00000196                           194  *---------------End Helper functions ------------------------
00000196                           195  
00000196                           196          
00000196                           197  *---------------------SUBI, ADDI-----------------------------
00000196  4EB8 0104                198  JMP_0X      JSR         J_CLR4      *Isolate next hex digit
0000019A  B43C 0004                199              CMP.B       #$4,D2      *Is the next hex digit 4?
0000019E  6700 0012                200              BEQ         J_SUBI      *Instruction is determined to be SUBI. Jump to intermediate OPCODE table jump
000001A2  B43C 0006                201              CMP.B       #$6,D2      *Is the next hex digit 5?
000001A6  6700 0012                202              BEQ         J_ADDI      *Instruction is determined to be ADDI. Jump to intermediate OPCODE table jump
Line 203 ERROR: Undefined symbol
000001AA  4EB9 004DBB8E            203              JSR         INVALID     *If neither, OPCODE is invalid
000001B0  4E75                     204              RTS
000001B2                           205  
000001B2  4EB9 00000406            206  J_SUBI      JSR         OPC_SUBI    *Jump to OPC_SUBI in OPCODE table
000001B8  4E75                     207              RTS
000001BA                           208              
000001BA  4EB9 0000042E            209  J_ADDI      JSR         OPC_ADDI    *Jump to OPC_ADDI in OPCODE table
000001C0  4E75                     210              RTS              
000001C2                           211  
000001C2                           212  *---------------------MOVE.L, MOVEA.L----------------------------- 
000001C2                           213  * NOTE - NO INVALID CASE. Probably correct tho-
000001C2                           214  
000001C2  4EB8 0172                215  JMP_2X      JSR         J_CLR_DM    *Isolate the destination mode bits %0000 000X XX00 0000 0000  
000001C6  B43C 0001                216              CMP.B       #$1,D2      *is the DEST MODE 1?
000001CA  6700 000A                217              BEQ         J_MOVEAL    *Instruction is determined to be MOVEA.L Jump to intermediate OPCODE table jump
000001CE  4EB9 000001DE            218              JSR         J_MOVEL     *Otherwise, Instruction is determined to be MOVE.L Jump to intermediate OPCODE table jump
000001D4  4E75                     219              RTS
000001D6                           220  
000001D6  4EB9 0000055A            221  J_MOVEAL    JSR         OPC_MOVEAL  *Jump to OPC_MOVEAL in OPCODE table
000001DC  4E75                     222              RTS
000001DE                           223  
000001DE  4EB9 00000586            224  J_MOVEL     JSR         OPC_MOVEL   *Jump to OPC_MOVEL in OPCODE table   
000001E4  4E75                     225              RTS                           
000001E6                           226  *---------------------MOVE.W, MOVEA.W----------------------------- 
000001E6                           227  * NOTE - NO INVALID CASE. Probably correct tho- 
000001E6                           228              
000001E6  4EB8 0172                229  JMP_3X      JSR         J_CLR_DM    *Isolate the destination mode bits %0000 000X XX00 0000 0000  
000001EA  B43C 0001                230              CMP.B       #$1,D2      *is the DEST MODE 1?
000001EE  6700 000A                231              BEQ         J_MOVEAW    *Instruction is determined to be MOVEA.W Jump to intermediate OPCODE table jump
000001F2  4EB9 00000202            232              JSR         J_MOVEW     *Otherwise, Instruction is determined to be MOVE.W Jump to intermediate OPCODE table jump
000001F8  4E75                     233              RTS
000001FA                           234  
000001FA  4EB9 000005AE            235  J_MOVEAW    JSR         OPC_MOVEAW  *Jump to OPC_MOVEAW in OPCODE table
00000200  4E75                     236              RTS
00000202                           237  
00000202  4EB9 000005DA            238  J_MOVEW     JSR         OPC_MOVEW   *Jump to OPC_MOVEW in OPCODE table 
00000208  4E75                     239              RTS
0000020A                           240  *-----------------NOP, MOVEM, LEA, JSR, RTS-----------------------
0000020A  4EB8 0104                241  JMP_4X      JSR         J_CLR4      *Isolate next hex digit   
0000020E  B43C 000E                242              CMP.B       #$E,D2      *Is the next hex digit E?
00000212  6700 0026                243              BEQ         J_47X       *Instruction is determined to be NOP, JSR, or RTS. Jump to JMP_47X to determine.
00000216  4EB8 0134                244              JSR         J_CLR1      *Otherwise, isolate the %0000 000X 0000 0000 digit
0000021A  4EB8 0144                245              JSR         J_CLR_LEA
0000021E  B43C 0007                246              CMP.B       #7,D2       *Is the last bit 7?
00000222  6700 001E                247              BEQ         J_LEA       *Instruction is determined to be LEA. Jump to intermediate OPCODE table jump 
00000226  4EB8 0154                248              JSR         J_CLR_MM
0000022A  B43C 0009                249              CMP.B       #9,D2       *Is the last bit 0?
0000022E  6700 001A                250              BEQ         J_MOVEM     *Instruction is determined to be MOVEM. Jump to intermediate OPCODE table jump 
Line 251 ERROR: Undefined symbol
00000232  4EB9 004DBB8E            251              JSR         INVALID     *If none of the above, OPCODE is invalid
00000238  4E75                     252              RTS                                         
0000023A                           253              
0000023A  4EB9 000003CC            254  J_47X       JSR         JMP_47X     *Instruction is NOP, JSR, or RTS. Jump to JMP_47X to determine.
00000240  4E75                     255              RTS
00000242                           256              
00000242  4EB9 000004DC            257  J_LEA       JSR         OPC_LEA     *Jump to OPC_LEA in the OPCODE table    
00000248  4E75                     258              RTS
0000024A                           259              
0000024A  4EB9 000004FE            260  J_MOVEM     JSR         OPC_MOVEM   *Jump to OPC_MOVEM in the OPCODE table
00000250  4E75                     261              RTS
00000252                           262              
00000252                           263  *------------------Bcc(BCC, BLT, BGE), BRA------------------------
00000252  4EB8 0104                264  JMP_6X      JSR         J_CLR4       *Isolate next hex digit 
00000256  B43C 0000                265              CMP.B       #0,D2        *Is the next hex digit 0?
0000025A  6700 000A                266              BEQ         J_BRA        *Instruction is determined to be BRA. Jump to intermediate OPCODE table jump
0000025E  4EB9 0000026E            267              JSR         J_Bcc        *Otherwise, Instruction is determined to be some form of Bcc. Jump to intermediate OPCODE table jump
00000264  4E75                     268              RTS
00000266                           269              
00000266  4EB9 00000602            270  J_BRA       JSR         OPC_BRA      *Jump to OPC_BRA in the OPCODE table  
0000026C                           271  
0000026C  4E75                     272              RTS
0000026E                           273  
0000026E  4EB9 0000061E            274  J_Bcc       JSR         OPC_Bcc      *Jump to OPC_Bcc in the OPCODE table  
00000274                           275  
00000274  4E75                     276              RTS
00000276                           277              
00000276                           278  *------------------------OR, DIVU---------------------------------     
00000276  4EB8 0172                279  JMP_8X      JSR         J_CLR_DM    *Isolate the OPMODE bits %0000 000X XX00 0000 0000
0000027A  B43C 0003                280              CMP.B       #3,D2       *Are the bits equivalent to $3?
0000027E  6700 000A                281              BEQ         J_DIVU      *Instruction is determined to be DIVU. Jump to intermediate OPCODE table jump
00000282  4EB9 00000292            282              JSR         J_OR        *Otherwise, Instruction is determined to be OR. Jump to intermediate OPCODE table jump
00000288  4E75                     283              RTS
0000028A                           284  
0000028A  4EB9 0000062A            285  J_DIVU      JSR         OPC_DIVU    *Jump to OPC_DIVU in the OPCODE table  
00000290  4E75                     286              RTS
00000292                           287              
00000292  4EB9 00000650            288  J_OR        JSR         OPC_OR      *Jump to OPC_OR in the OPCODE table  
00000298  4E75                     289              RTS
0000029A                           290  
0000029A                           291  *-----------------------MULS, AND---------------------------------  
0000029A  4EB8 0172                292  JMP_CX      JSR         J_CLR_DM    *Isolate the OPMODE bits %0000 000X XX00 0000 0000
0000029E  B43C 0007                293              CMP.B       #7,D2       *Are the bits equivalent to $7?
000002A2  6700 000A                294              BEQ         J_MULS      *Instruction is determined to be MULS. Jump to intermediate OPCODE table jump
000002A6  4EB9 000002B6            295              JSR         J_AND       *Otherwise, Instruction is determined to be AND. Jump to intermediate OPCODE table jump
000002AC  4E75                     296              RTS
000002AE                           297  
000002AE  4EB9 0000066A            298  J_MULS      JSR         OPC_MULS    *Jump to OPC_MULS in the OPCODE table  
000002B4  4E75                     299              RTS
000002B6                           300              
000002B6  4EB9 00000690            301  J_AND       JSR         OPC_AND     *Jump to OPC_AND in the OPCODE table  
000002BC  4E75                     302              RTS
000002BE                           303  
000002BE                           304  *-----------------------ADD, ADDA--------------------------------
000002BE  4EB8 0172                305  JMP_DX      JSR         J_CLR_DM    *Isolate OPMODE bits to determine if ADD or ADDA
000002C2  4284                     306              CLR.L       D4          *For adding size (easy to do it here).
000002C4  183C 0001                307              MOVE.B      #1,D4       *Set size to WORD
000002C8  B43C 0003                308              CMP.B       #3,D2       *Is it Word ADDA?
000002CC  6700 0044                309              BEQ         OP_ADDA
000002D0  183C 0002                310              MOVE.B      #2,D4       *set size to LONG
000002D4  B43C 0007                311              CMP.B       #7,D2       *is it Long ADDA?
000002D8  6700 0038                312              BEQ         OP_ADDA
000002DC                           313              
000002DC  4284                     314              CLR.L       D4          *Not ADDA? Clear the manual size sets
000002DE                           315              
000002DE  B83C 0000                316              CMP.B       #0,D4       Is it ADD?
000002E2  6700 0036                317              BEQ         OP_ADD
000002E6  B83C 0001                318              CMP.B       #1,D4       
000002EA  6700 002E                319              BEQ         OP_ADD
000002EE  B83C 0002                320              CMP.B       #2,D4       
000002F2  6700 0026                321              BEQ         OP_ADD
000002F6  B83C 0004                322              CMP.B       #4,D4 
000002FA  6700 001E                323              BEQ         OP_ADD
000002FE  B83C 0005                324              CMP.B       #5,D4     
00000302  6700 0016                325              BEQ         OP_ADD
00000306  B83C 0006                326              CMP.B       #6,D4     
0000030A  6700 000E                327              BEQ         OP_ADD       
0000030E                           328           
Line 329 ERROR: Undefined symbol
0000030E  6000 B87E                329              BRA         INVALID     *Got here, must be invalid data.    
00000312                           330              
00000312  4EB9 000006AE            331  OP_ADDA     JSR         OPC_ADDA
00000318  4E75                     332              RTS
0000031A                           333              
0000031A  4EB9 000006D0            334  OP_ADD      JSR         OPC_ADD
00000320  4E75                     335              RTS
00000322                           336              
00000322                           337  *------LSL/LSR REG/MEM, ASL/ASR REG/MEM, ROL/ROR REG/MEM---------
00000322                           338  
00000322  4EB8 0124                339  JMP_EX      JSR         J_CLR2
00000326  B43C 0003                340              CMP.B       #3,D2       *Is it a memory variant?
0000032A  6700 0020                341              BEQ         SR_MEM_VAR  
0000032E  B43C 0000                342              CMP.B       #0,D2
00000332  6700 0020                343              BEQ         SR_REG_VAR  *Is it a reg variant
00000336  B43C 0001                344              CMP.B       #1,D2
0000033A  6700 0018                345              BEQ         SR_REG_VAR
0000033E  B43C 0002                346              CMP.B       #2,D2
00000342  6700 0010                347              BEQ         SR_REG_VAR
Line 348 ERROR: Undefined symbol
00000346  4EF9 004DBB8E            348              JMP         INVALID     *Got here? Mus be invalid.
0000034C                           349              
0000034C  4EB9 0000035C            350  SR_MEM_VAR  JSR         SRMEM_VAR
00000352  4E75                     351              RTS
00000354                           352  
00000354  4EB9 00000394            353  SR_REG_VAR  JSR         SRREG_VAR
0000035A  4E75                     354              RTS
0000035C                           355              
0000035C                           356  *------------------SHIFT AND ROTATE MEM VAR-----------------
0000035C                           357  * For MEMORY variant shifts and rotations
0000035C                           358  *-----------------------------------------------------------   
0000035C  4EB8 0114                359  SRMEM_VAR   JSR         J_CLR3      *Isolate unique hardcoded mem section
00000360  B43C 0000                360              CMP.B       #0,D2
00000364  6700 0016                361              BEQ         OP_AS_MEM  *Is it as AS?
00000368  B43C 0001                362              CMP.B       #1,D2
0000036C  6700 0016                363              BEQ         OP_LS_MEM  *Is it a LS
00000370  B43C 0003                364              CMP.B       #3,D2
00000374  6700 0016                365              BEQ         OP_RO_MEM  *Is it a RO
Line 366 ERROR: Undefined symbol
00000378  6000 B814                366              BRA         INVALID     *Got here? Must be invalid
0000037C                           367              
0000037C  4EB9 00000726            368  OP_AS_MEM   JSR         OPC_AS_MEM
00000382  4E75                     369              RTS
00000384                           370  
00000384  4EB9 00000740            371  OP_LS_MEM   JSR         OPC_LS_MEM
0000038A  4E75                     372              RTS
0000038C                           373  
0000038C  4EB9 0000075A            374  OP_RO_MEM   JSR         OPC_RO_MEM
00000392  4E75                     375              RTS
00000394                           376              
00000394                           377  *------------------SHIFT AND ROTATE REG VAR-----------------
00000394                           378  * For REGISTER variant shifts and rotations
00000394                           379  *-----------------------------------------------------------
00000394  4EB8 0182                380  SRREG_VAR   JSR         J_CLR_SHFT *Isolate hardoced unique
00000398  B43C 0000                381              CMP.B       #0,D2       *Is it a AS?
0000039C  6700 0016                382              BEQ         OP_AS_REG
000003A0  B43C 0001                383              CMP.B       #1,D2       *Is it a LS?
000003A4  6700 0016                384              BEQ         OP_LS_REG
000003A8  B43C 0003                385              CMP.B       #3,D2       *is it a RO?
000003AC  6700 0016                386              BEQ         OP_RO_REG
Line 387 ERROR: Undefined symbol
000003B0  6000 B7DC                387              BRA         INVALID     *Got here? Must be invalid.
000003B4                           388  
000003B4  4EB9 00000774            389  OP_AS_REG   JSR         OPC_AS_REG
000003BA  4E75                     390              RTS   
000003BC                           391  
000003BC  4EB9 0000079A            392  OP_LS_REG   JSR         OPC_LS_REG
000003C2  4E75                     393              RTS
000003C4                           394  
000003C4  4EB9 000007C0            395  OP_RO_REG   JSR         OPC_RO_REG
000003CA  4E75                     396              RTS
000003CC                           397  
000003CC                           398  *============================================================
000003CC                           399  *==================ID THIRD OPCODE DIGIT=====================
000003CC                           400  *============================================================
000003CC                           401     
000003CC  BE7C 4E71                402  JMP_47X     CMP.W       #$4E71,D7    *Is it NOP?
000003D0  6700 001C                403              BEQ         O_NOP
000003D4  BE7C 4E75                404              CMP.W       #$4E75,D7       *Is it RTS?
000003D8  6700 001C                405              BEQ         O_RTS
000003DC  4EB8 0124                406              JSR         J_CLR2       *Isolate the 6th and 7th bit
000003E0  B43C 0002                407              CMP.B       #2,D2        *Is it JSR?
000003E4  6700 0018                408              BEQ         O_JSR
Line 409 ERROR: Undefined symbol
000003E8  4EF9 004DBB8E            409              JMP         INVALID      *Got here? Must be invalid data.
000003EE                           410  
000003EE  4EB9 0000070A            411  O_NOP       JSR         OPC_NOP
000003F4  4E75                     412              RTS
000003F6                           413  
000003F6  4EB9 00000718            414  O_RTS       JSR         OPC_RTS
000003FC  4E75                     415              RTS
000003FE                           416  
000003FE  4EB9 000006EE            417  O_JSR       JSR         OPC_JSR
00000404  4E75                     418              RTS
00000406                           419           
00000406                           420  
00000406                           421  *============================================================
00000406                           422  *=====================OPCODE TABLE===========================
00000406                           423  *================OPCODE KNOWN, PRINTING======================
00000406                           424  *============================================================
00000406                           425  * IF YOU DO NOT USE A GET_SIZE_X SUBROUTINE, YOU MUST
00000406                           426  * MANUALLY SET THE SIZE CODE IN D4. (0 = B, 1 = W, 2 = L)
00000406                           427  
00000406                           428  *---------------------SUBI OPCODE----------------------------
00000406  18FC 0053                429  OPC_SUBI    MOVE.B      #'S',(A4)+
0000040A  18FC 0055                430              MOVE.B      #'U',(A4)+
0000040E  18FC 0042                431              MOVE.B      #'B',(A4)+
00000412  18FC 0049                432              MOVE.B      #'I',(A4)+
00000416  18FC 002E                433              MOVE.B      #'.',(A4)+
0000041A                           434              
0000041A  4EB9 00000A3A            435              JSR         GET_SIZE_2  *Get 2 bit size code
00000420  4EB9 000009E8            436              JSR         ADD_SIZE    *Add the size character based on size code
00000426                           437              
Line 438 ERROR: Undefined symbol
00000426  4EB9 004DBB8E            438              JSR         IDATASRC_EA *Jump to #<data>,<ea> operand flow.
0000042C                           439              
0000042C  4E75                     440              RTS
0000042E                           441  
0000042E                           442  *---------------------ADDI OPCODE----------------------------
0000042E  18FC 0041                443  OPC_ADDI    MOVE.B      #'A',(A4)+
00000432  18FC 0044                444              MOVE.B      #'D',(A4)+
00000436  18FC 0044                445              MOVE.B      #'D',(A4)+
0000043A  18FC 0049                446              MOVE.B      #'I',(A4)+
0000043E  18FC 002E                447              MOVE.B      #'.',(A4)+
00000442                           448              
00000442  4EB9 00000A3A            449              JSR         GET_SIZE_2  *Get 2 bit size code
00000448  4EB9 000009E8            450              JSR         ADD_SIZE    *Add the size character based on size code
0000044E                           451              
Line 452 ERROR: Undefined symbol
0000044E  4EB9 004DBB8E            452              JSR         IDATASRC_EA *Jump to #<data>,<ea> operand flow.
00000454                           453              
00000454  4E75                     454              RTS
00000456                           455  
00000456                           456  *--------------------MOVE.B OPCODE---------------------------
00000456  18FC 004D                457  OPC_MOVEB   MOVE.B      #'M',(A4)+
0000045A  18FC 004F                458              MOVE.B      #'O',(A4)+
0000045E  18FC 0056                459              MOVE.B      #'V',(A4)+
00000462  18FC 0045                460              MOVE.B      #'E',(A4)+
00000466  18FC 002E                461              MOVE.B      #'.',(A4)+
0000046A                           462  
0000046A                           463  
0000046A  4284                     464              CLR.L       D4          *Manually set size to byte (D4 = 0)
0000046C  4EB9 000009E8            465              JSR         ADD_SIZE    *Add size characters
00000472                           466              
Line 467 ERROR: Undefined symbol
00000472  4EB9 004DBB8E            467              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
00000478                           468              
00000478  4E75                     469              RTS
0000047A                           470  
0000047A                           471  *--------------------ADDQ OPCODE----------------------------
0000047A  18FC 0041                472  OPC_ADDQ    MOVE.B      #'A',(A4)+
0000047E  18FC 0044                473              MOVE.B      #'D',(A4)+
00000482  18FC 0044                474              MOVE.B      #'D',(A4)+
00000486  18FC 0051                475              MOVE.B      #'Q',(A4)+
0000048A  18FC 002E                476              MOVE.B      #'.',(A4)+
0000048E                           477  
0000048E  4EB9 00000A3A            478              JSR         GET_SIZE_2   *Get size code (placed in D4)
00000494  4EB9 000009E8            479              JSR         ADD_SIZE     *Add size character to string (B/W/L)
0000049A                           480              
Line 481 ERROR: Undefined symbol
0000049A  4EB9 004DBB8E            481              JSR         ADDQ_EA      *Start the EA/operand decode logic
000004A0                           482   
000004A0  4E75                     483              RTS
000004A2                           484  
000004A2                           485  *------------------MOVEQ OPCODE-----------------------------
000004A2  18FC 004D                486  OPC_MOVEQ   MOVE.B      #'M',(A4)+
000004A6  18FC 004F                487              MOVE.B      #'O',(A4)+
000004AA  18FC 0056                488              MOVE.B      #'V',(A4)+
000004AE  18FC 0045                489              MOVE.B      #'E',(A4)+
000004B2  18FC 0051                490              MOVE.B      #'Q',(A4)+
000004B6                           491              
Line 492 ERROR: Undefined symbol
000004B6  4EB9 004DBB8E            492              JSR         MOVEQ_EA     *Start the EA/opderand decode logic for moveq
000004BC                           493            
000004BC  4E75                     494              RTS
000004BE                           495  
000004BE                           496  *------------------SUB OPCODE-------------------------------
000004BE  18FC 0053                497  OPC_SUB     MOVE.B      #'S',(A4)+
000004C2  18FC 0055                498              MOVE.B      #'U',(A4)+
000004C6  18FC 0042                499              MOVE.B      #'B',(A4)+
000004CA  18FC 002E                500              MOVE.B      #'.',(A4)+
000004CE                           501  
000004CE  4EB9 00000A2A            502              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
000004D4                           503              
000004D4  4EB9 00000A60            504              JSR         OR_ADD_SIZE    * This will add size characters and start operand decode sequence
000004DA                           505  
000004DA  4E75                     506              RTS
000004DC                           507  
000004DC                           508  *------------------LEA OPCODE-------------------------------            
000004DC  18FC 004C                509  OPC_LEA     MOVE.B      #'L',(A4)+
000004E0  18FC 0045                510              MOVE.B      #'E',(A4)+
000004E4  18FC 0041                511              MOVE.B      #'A',(A4)+
000004E8  18FC 0020                512              MOVE.B      #' ',(A4)+
000004EC  18FC 0020                513              MOVE.B      #' ',(A4)+
000004F0                           514              
000004F0  4284                     515              CLR.L       D4          *Manually set size to byte (D4 = 0)
000004F2  183C 0002                516              MOVE.B      #2,D4       *Manually set size to long.
000004F6                           517              
Line 518 ERROR: Undefined symbol
000004F6  4EB9 004DBB8E            518              JSR         EASRC_ADES
000004FC                           519              
000004FC  4E75                     520              RTS
000004FE                           521              
000004FE                           522  *------------------MOVEM OPCODE----------------------------- 
000004FE  18FC 004D                523  OPC_MOVEM   MOVE.B      #'M',(A4)+
00000502  18FC 004F                524              MOVE.B      #'O',(A4)+
00000506  18FC 0056                525              MOVE.B      #'V',(A4)+
0000050A  18FC 0045                526              MOVE.B      #'E',(A4)+
0000050E  18FC 004D                527              MOVE.B      #'M',(A4)+
00000512  18FC 002E                528              MOVE.B      #'.',(A4)+
00000516                           529              
00000516                           530              *Extra movem check
00000516  4EB8 0162                531              JSR         J_CLR_MM2
0000051A  B43C 0001                532              CMP.B       #1,D2
0000051E  6700 0032                533              BEQ         INVMM2
00000522                           534              
00000522  4EB9 00000A4A            535              JSR         GET_SIZE_1
00000528                           536              
00000528  B83C 0000                537              CMP.B       #0,D4       *Change size code so it matches standard formatting
0000052C  6700 000A                538              BEQ         MM_WORD
00000530  B83C 0001                539              CMP.B       #1,D4
00000534  6700 000A                540              BEQ         MM_LONG
00000538                           541  
00000538  183C 0001                542  MM_WORD     MOVE.B      #1,D4
0000053C  6000 0006                543              BRA         MM_ADD_S
00000540                           544  
00000540  183C 0002                545  MM_LONG     MOVE.B      #2,D4
00000544                           546         
00000544  4EB9 000009E8            547  MM_ADD_S    JSR         ADD_SIZE
Line 548 ERROR: Undefined symbol
0000054A  4EB9 004DBB8E            548              JSR         MM_OP_ORD
00000550  4E75                     549              RTS
00000552                           550  
Line 551 ERROR: Undefined symbol
00000552  4EF9 004DBB8E            551  INVMM2      JMP         INVALID            
00000558  4E75                     552              RTS
0000055A                           553  
0000055A                           554  
0000055A                           555  *------------------MOVEA.L OPCODE----------------------------
0000055A  18FC 004D                556  OPC_MOVEAL  MOVE.B      #'M',(A4)+
0000055E  18FC 004F                557              MOVE.B      #'O',(A4)+
00000562  18FC 0056                558              MOVE.B      #'V',(A4)+
00000566  18FC 0045                559              MOVE.B      #'E',(A4)+
0000056A  18FC 0041                560              MOVE.B      #'A',(A4)+
0000056E  18FC 002E                561              MOVE.B      #'.',(A4)+
00000572                           562  
00000572  4284                     563              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000574  183C 0002                564              MOVE.B      #2,D4       *Set size code to long
00000578  4EB9 000009E8            565              JSR         ADD_SIZE    *Add size characters
0000057E                           566              
Line 567 ERROR: Undefined symbol
0000057E  4EB9 004DBB8E            567              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
00000584  4E75                     568              RTS
00000586                           569  
00000586                           570  
00000586                           571  *------------------MOVEM.L OPCODE----------------------------
00000586  18FC 004D                572  OPC_MOVEL   MOVE.B      #'M',(A4)+
0000058A  18FC 004F                573              MOVE.B      #'O',(A4)+
0000058E  18FC 0056                574              MOVE.B      #'V',(A4)+
00000592  18FC 0045                575              MOVE.B      #'E',(A4)+
00000596  18FC 002E                576              MOVE.B      #'.',(A4)+
0000059A                           577  
0000059A  4284                     578              CLR.L       D4          *Manually set size to byte (D4 = 0)
0000059C  183C 0002                579              MOVE.B      #2,D4       *Set size code to long
000005A0  4EB9 000009E8            580              JSR         ADD_SIZE    *Add size characters
000005A6                           581              
Line 582 ERROR: Undefined symbol
000005A6  4EB9 004DBB8E            582              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
000005AC  4E75                     583              RTS
000005AE                           584  
000005AE                           585  *------------------MOVEA.W OPCODE----------------------------
000005AE  18FC 004D                586  OPC_MOVEAW  MOVE.B      #'M',(A4)+
000005B2  18FC 004F                587              MOVE.B      #'O',(A4)+
000005B6  18FC 0056                588              MOVE.B      #'V',(A4)+
000005BA  18FC 0045                589              MOVE.B      #'E',(A4)+
000005BE  18FC 0041                590              MOVE.B      #'A',(A4)+
000005C2  18FC 002E                591              MOVE.B      #'.',(A4)+
000005C6                           592  
000005C6  4284                     593              CLR.L       D4          *Manually set size to byte (D4 = 0)
000005C8  183C 0001                594              MOVE.B      #1,D4       *Set size code to word
000005CC  4EB9 000009E8            595              JSR         ADD_SIZE    *Add size characters
000005D2                           596              
Line 597 ERROR: Undefined symbol
000005D2  4EB9 004DBB8E            597              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
000005D8  4E75                     598              RTS
000005DA                           599  
000005DA                           600  
000005DA                           601  *------------------MOVE.W OPCODE----------------------------
000005DA  18FC 004D                602  OPC_MOVEW   MOVE.B      #'M',(A4)+
000005DE  18FC 004F                603              MOVE.B      #'O',(A4)+
000005E2  18FC 0056                604              MOVE.B      #'V',(A4)+
000005E6  18FC 0045                605              MOVE.B      #'E',(A4)+
000005EA  18FC 002E                606              MOVE.B      #'.',(A4)+
000005EE                           607  
000005EE  4284                     608              CLR.L       D4          *Manually set size to byte (D4 = 0)
000005F0  183C 0001                609              MOVE.B      #1,D4       *Set size code to word
000005F4  4EB9 000009E8            610              JSR         ADD_SIZE    *Add size characters
000005FA                           611              
Line 612 ERROR: Undefined symbol
000005FA  4EB9 004DBB8E            612              JSR         MOV_EA_CODE *JUMP to EACODE table for MOVE/MOVEA
00000600  4E75                     613              RTS
00000602                           614  
00000602                           615  
00000602                           616  *---------------------BRA OPCODE----------------------------
00000602  18FC 0042                617  OPC_BRA     MOVE.B      #'B',(A4)+
00000606  18FC 0052                618              MOVE.B      #'R',(A4)+
0000060A  18FC 0041                619              MOVE.B      #'A',(A4)+
0000060E  18FC 0020                620              MOVE.B      #' ',(A4)+
00000612  18FC 0020                621              MOVE.B      #' ',(A4)+
00000616                           622              
Line 623 ERROR: Undefined symbol
00000616  4EB9 004DBB8E            623              JSR         ABW       *Grab the next word value (BRA bug)
0000061C                           624                          
0000061C  4E75                     625              RTS
0000061E                           626  
0000061E                           627  *---------------------Bcc OPCODE----------------------------
0000061E  18FC 0042                628  OPC_Bcc     MOVE.B      #'B',(A4)+
00000622                           629              *BCC bug, does not use 8bit displacment, but is next word value (ABSW)
00000622  4EB9 0000080C            630              JSR         BCC_CODE    *Get condition code and start decoding
00000628                           631              
00000628  4E75                     632              RTS
0000062A                           633  
0000062A                           634  *--------------------DIVU OPCODE----------------------------
0000062A  18FC 0044                635  OPC_DIVU    MOVE.B      #'D',(A4)+
0000062E  18FC 0049                636              MOVE.B      #'I',(A4)+
00000632  18FC 0056                637              MOVE.B      #'V',(A4)+
00000636  18FC 0055                638              MOVE.B      #'U',(A4)+
0000063A  18FC 0020                639              MOVE.B      #' ',(A4)+
0000063E  18FC 0020                640              MOVE.B      #' ',(A4)+
00000642                           641              
00000642  4284                     642              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000644  183C 0001                643              MOVE.B      #1,D4       *Set size code to word
00000648                           644              
Line 645 ERROR: Undefined symbol
00000648  4EB9 004DBB8E            645              JSR         EASRC_DDES  *Start operand <ea>,Dn
0000064E                           646              
0000064E                           647              
0000064E  4E75                     648              RTS
00000650                           649  
00000650                           650  *---------------------OR OPCODE-----------------------------
00000650  18FC 004F                651  OPC_OR      MOVE.B      #'O',(A4)+
00000654  18FC 0052                652              MOVE.B      #'R',(A4)+
00000658  18FC 002E                653              MOVE.B      #'.',(A4)+
0000065C                           654  
0000065C  4EB9 00000A2A            655              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
00000662                           656              
00000662  4EB9 00000A60            657              JSR         OR_ADD_SIZE    * This will add size characters and start operand decode sequence
00000668                           658  
00000668  4E75                     659              RTS
0000066A                           660  
0000066A                           661  *---------------------MULS  OPCODE--------------------------
0000066A  18FC 004D                662  OPC_MULS    MOVE.B      #'M',(A4)+
0000066E  18FC 0055                663              MOVE.B      #'U',(A4)+
00000672  18FC 004C                664              MOVE.B      #'L',(A4)+
00000676  18FC 0053                665              MOVE.B      #'S',(A4)+
0000067A  18FC 0020                666              MOVE.B      #' ',(A4)+
0000067E  18FC 0020                667              MOVE.B      #' ',(A4)+
00000682                           668              
00000682  4284                     669              CLR.L       D4          *Manually set size to byte (D4 = 0)
00000684  183C 0001                670              MOVE.B      #1,D4       *Set size code to word
00000688                           671              
Line 672 ERROR: Undefined symbol
00000688  4EB9 004DBB8E            672              JSR         EASRC_DDES  *Jump to <ea>,Dn
0000068E                           673              
0000068E  4E75                     674              RTS
00000690                           675  
00000690                           676  *---------------------AND  OPCODE---------------------------
00000690  18FC 0041                677  OPC_AND     MOVE.B      #'A',(A4)+
00000694  18FC 004E                678              MOVE.B      #'N',(A4)+
00000698  18FC 0044                679              MOVE.B      #'D',(A4)+
0000069C  18FC 002E                680              MOVE.B      #'.',(A4)+
000006A0                           681  
000006A0  4EB9 00000A2A            682              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
000006A6                           683              
000006A6  4EB9 00000A60            684              JSR         OR_ADD_SIZE *This will add size characters and start operand decode sequence
000006AC                           685  
000006AC  4E75                     686              RTS
000006AE                           687              
000006AE                           688  *-------------------ADDA OPCODE-----------------------------
000006AE  18FC 0041                689  OPC_ADDA    MOVE.B      #'A',(A4)+
000006B2  18FC 0044                690              MOVE.B      #'D',(A4)+
000006B6  18FC 0044                691              MOVE.B      #'D',(A4)+
000006BA  18FC 0041                692              MOVE.B      #'A',(A4)+
000006BE  18FC 002E                693              MOVE.B      #'.',(A4)+
000006C2                           694              
000006C2  4EB9 000009E8            695              JSR         ADD_SIZE    *Size should already be in D4 (special case for ADDA)
000006C8                           696              
Line 697 ERROR: Undefined symbol
000006C8  4EB9 004DBB8E            697              JSR         EASRC_ADES  *Start operand decode for <ea>,An format
000006CE                           698              
000006CE  4E75                     699              RTS
000006D0                           700  
000006D0                           701  *--------------------ADD OPCODE-----------------------------
000006D0  18FC 0041                702  OPC_ADD     MOVE.B      #'A',(A4)+
000006D4  18FC 0044                703              MOVE.B      #'D',(A4)+
000006D8  18FC 0044                704              MOVE.B      #'D',(A4)+
000006DC  18FC 002E                705              MOVE.B      #'.',(A4)+
000006E0                           706  
000006E0  4EB9 00000A2A            707              JSR         GET_SIZE_3  * Size bits will be in D4 after this statement
000006E6                           708              
000006E6  4EB9 00000A60            709              JSR         OR_ADD_SIZE *This will add size characters and start operand decode sequence
000006EC                           710  
000006EC  4E75                     711              RTS
000006EE                           712  
000006EE                           713  *--------------------JSR OPCODE-----------------------------
000006EE  18FC 004A                714  OPC_JSR     MOVE.B      #'J',(A4)+
000006F2  18FC 0053                715              MOVE.B      #'S',(A4)+
000006F6  18FC 0052                716              MOVE.B      #'R',(A4)+
000006FA  18FC 0020                717              MOVE.B      #' ',(A4)+
000006FE  18FC 0020                718              MOVE.B      #' ',(A4)+
Line 719 ERROR: Undefined symbol
00000702  4EB9 004DBB8E            719              JSR         GEN_EA_CODE *Get EA code
00000708                           720              
00000708  4E75                     721              RTS
0000070A                           722  
0000070A                           723  *--------------------NOP OPCODE-----------------------------
0000070A  18FC 004E                724  OPC_NOP     MOVE.B      #'N',(A4)+
0000070E  18FC 004F                725              MOVE.B      #'O',(A4)+
00000712  18FC 0050                726              MOVE.B      #'P',(A4)+
00000716                           727              
00000716  4E75                     728              RTS
00000718                           729  
00000718                           730  *--------------------RTS OPCODE-----------------------------
00000718  18FC 0052                731  OPC_RTS     MOVE.B      #'R',(A4)+
0000071C  18FC 0054                732              MOVE.B      #'T',(A4)+
00000720  18FC 0053                733              MOVE.B      #'S',(A4)+
00000724                           734              
00000724  4E75                     735              RTS
00000726                           736              
00000726                           737  *-LSL/LSR REG/MEM, ASL/ASR REG/MEM, ROL/ROR REG/MEM OPCODE--  
00000726                           738  *------------AS(L/R) OPCODE MEMORY variant------------------          
00000726  18FC 0041                739  OPC_AS_MEM  MOVE.B      #'A',(A4)+
0000072A  18FC 0053                740              MOVE.B      #'S',(A4)+
0000072E  4EB9 000007E6            741              JSR         SHFT_DECODE
00000734  18FC 002E                742              MOVE.B      #'.',(A4)+
00000738                           743                         
Line 744 ERROR: Undefined symbol
00000738  4EB9 004DBB8E            744              JSR         SR_MEM
0000073E  4E75                     745              RTS
00000740                           746  
00000740                           747  *------------LS(L/R) OPCODE MEMORY variant------------------    
00000740  18FC 004C                748  OPC_LS_MEM  MOVE.B      #'L',(A4)+
00000744  18FC 0053                749              MOVE.B      #'S',(A4)+
00000748  4EB9 000007E6            750              JSR         SHFT_DECODE
0000074E  18FC 002E                751              MOVE.B      #'.',(A4)+
00000752                           752                          
Line 753 ERROR: Undefined symbol
00000752  4EB9 004DBB8E            753              JSR         SR_MEM
00000758  4E75                     754              RTS
0000075A                           755  
0000075A                           756  *------------RO(L/R) OPCODE MEMORY variant------------------     
0000075A  18FC 0052                757  OPC_RO_MEM  MOVE.B      #'R',(A4)+
0000075E  18FC 004F                758              MOVE.B      #'O',(A4)+
00000762  4EB9 000007E6            759              JSR         SHFT_DECODE
00000768  18FC 002E                760              MOVE.B      #'.',(A4)+
0000076C                           761                         
Line 762 ERROR: Undefined symbol
0000076C  4EB9 004DBB8E            762              JSR         SR_MEM
00000772  4E75                     763              RTS   
00000774                           764  
00000774                           765  *----------AS(L/R) OPCODE REGISTER variant------------------      
00000774  18FC 0041                766  OPC_AS_REG  MOVE.B      #'A',(A4)+
00000778  18FC 0053                767              MOVE.B      #'S',(A4)+
0000077C  4EB9 000007E6            768              JSR         SHFT_DECODE
00000782  18FC 002E                769              MOVE.B      #'.',(A4)+
00000786                           770              
00000786  4EB9 00000A3A            771              JSR         GET_SIZE_2
0000078C  4EB9 000009E8            772              JSR         ADD_SIZE
Line 773 ERROR: Undefined symbol
00000792  4EB9 004DBB8E            773              JSR         SR_REG
00000798                           774              
00000798  4E75                     775              RTS
0000079A                           776  
0000079A                           777  *----------LS(L/R) OPCODE REGISTER variant------------------ 
0000079A  18FC 004C                778  OPC_LS_REG  MOVE.B      #'L',(A4)+
0000079E  18FC 0053                779              MOVE.B      #'S',(A4)+
000007A2  4EB9 000007E6            780              JSR         SHFT_DECODE
000007A8  18FC 002E                781              MOVE.B      #'.',(A4)+
000007AC                           782              
000007AC  4EB9 00000A3A            783              JSR         GET_SIZE_2
000007B2  4EB9 000009E8            784              JSR         ADD_SIZE
Line 785 ERROR: Undefined symbol
000007B8  4EB9 004DBB8E            785              JSR         SR_REG
000007BE  4E75                     786              RTS
000007C0                           787  
000007C0                           788  *----------RO(L/R) OPCODE REGISTER variant------------------ 
000007C0  18FC 0052                789  OPC_RO_REG  MOVE.B      #'R',(A4)+
000007C4  18FC 004F                790              MOVE.B      #'O',(A4)+
000007C8  4EB9 000007E6            791              JSR         SHFT_DECODE
000007CE  18FC 002E                792              MOVE.B      #'.',(A4)+
000007D2                           793  
000007D2  4EB9 00000A3A            794              JSR         GET_SIZE_2
000007D8  4EB9 000009E8            795              JSR         ADD_SIZE
Line 796 ERROR: Undefined symbol
000007DE  4EB9 004DBB8E            796              JSR         SR_REG
000007E4  4E75                     797              RTS          
000007E6                           798  
000007E6                           799  *===========================================================
000007E6                           800  *=====================HELPER SUBROUTINES====================
000007E6                           801  *===========================================================
000007E6                           802  
000007E6                           803  *---------------Determine Shift Direction-------------------
000007E6                           804  * %0000 000X 0000 0000 
000007E6  4282                     805  SHFT_DECODE CLR.L       D2
000007E8  3407                     806              MOVE.W      D7,D2       *Copies D7 contents to D2 for manipulation
000007EA  4281                     807              CLR.L       D1
000007EC  EF4A                     808              LSL.W       #7,D2       *Clear the most sig 7 bits
000007EE  123C 000F                809              MOVE.B      #15,D1      *Moves 15 into D1
000007F2  E26A                     810              LSR.W       D1,D2       *Shifts 15 right to isolate the bits we're working with 
000007F4  B43C 0000                811              CMP.B       #0,D2       *If 0, direction is determined to be R       
000007F8  6700 0006                812              BEQ         DECODE_R
000007FC  6000 0008                813              BRA         DECODE_L
00000800                           814              
00000800  18FC 0052                815  DECODE_R    MOVE.B      #'R',(A4)+  *Adds R to the output
00000804  4E75                     816              RTS
00000806                           817  
00000806  18FC 004C                818  DECODE_L    MOVE.B      #'L',(A4)+  *Adds L to the output
0000080A  4E75                     819              RTS
0000080C                           820                      
0000080C                           821  
0000080C                           822  *-------------------------BCC_DECODE------------------------
0000080C                           823  * Isolates the 4 bit condition code for BCC OPCODES
0000080C                           824  *-----------------------------------------------------------
0000080C  4283                     825  BCC_CODE    CLR.L       D3          *Make sure D3 is empty to hold condition code
0000080E  3607                     826              MOVE.W      D7,D3       *Move in original address to be shifted
00000810  E94B                     827              LSL.W       #4,D3
00000812  4282                     828              CLR.L       D2
00000814  143C 000C                829              MOVE.B      #12,D2
00000818  E46B                     830              LSR.W       D2,D3
0000081A  4EB9 00000822            831              JSR         BCC_TABLE   *Jump to BCC table now that condition code is in D3
00000820  4E75                     832              RTS
00000822                           833  
00000822                           834  *-------------------------BCC_TABLE-------------------------
00000822                           835  * This jump table looks at the condition code in D3 to
00000822                           836  * select the correct B"CC" for the BCC OPCODE. After the
00000822                           837  * correct condition code is selected, it then jumps to the
00000822                           838  * 8 bit displacment.
00000822                           839  *-----------------------------------------------------------
00000822  B63C 0002                840  BCC_TABLE   CMP.B       #$2,D3      *Is it BHI?
00000826  6700 0070                841              BEQ         BCC_HI
0000082A  B63C 0003                842              CMP.B       #$3,D3      *Is it BLS?
0000082E  6700 0080                843              BEQ         BCC_LS      
00000832  B63C 0004                844              CMP.B       #$4,D3      *Is it BCC?
00000836  6700 0090                845              BEQ         BCC_CC
0000083A  B63C 0005                846              CMP.B       #$5,D3      *Is it BCS?
0000083E  6700 00A0                847              BEQ         BCC_CS
00000842  B63C 0006                848              CMP.B       #$6,D3      *Is it BNE?
00000846  6700 00B0                849              BEQ         BCC_NE
0000084A  B63C 0007                850              CMP.B       #$7,D3      *Is it BEQ?
0000084E  6700 00C0                851              BEQ         BCC_EQ
00000852  B63C 0008                852              CMP.B       #$8,D3      *Is it BVC?
00000856  6700 00D0                853              BEQ         BCC_VC      
0000085A  B63C 0009                854              CMP.B       #$9,D3      *Is it BVS?
0000085E  6700 00E0                855              BEQ         BCC_VS
00000862  B63C 000A                856              CMP.B       #$A,D3      *Is it BPL?
00000866  6700 00F0                857              BEQ         BCC_PL
0000086A  B63C 000B                858              CMP.B       #$B,D3      *Is it BMI?
0000086E  6700 0100                859              BEQ         BCC_MI
00000872  B63C 000C                860              CMP.B       #$C,D3      *Is it BGE?
00000876  6700 0110                861              BEQ         BCC_GE
0000087A  B63C 000D                862              CMP.B       #$D,D3      *Is it BLT?
0000087E  6700 0120                863              BEQ         BCC_LT
00000882  B63C 000E                864              CMP.B       #$E,D3      *Is it BGT?
00000886  6700 0130                865              BEQ         BCC_GT      
0000088A  B63C 000F                866              CMP.B       #$F,D3      *Is it BLE?
0000088E  6700 0140                867              BEQ         BCC_LE
Line 868 ERROR: Undefined symbol
00000892  4EF9 004DBB8E            868              JMP         INVALID     *Got here? Something is wrong.
00000898                           869  
00000898  18FC 0048                870  BCC_HI      MOVE.B      #'H',(A4)+
0000089C  18FC 0049                871              MOVE.B      #'I',(A4)+
000008A0  18FC 0020                872              MOVE.B      #' ',(A4)+
000008A4  18FC 0020                873              MOVE.B      #' ',(A4)+
Line 874 ERROR: Undefined symbol
000008A8  4EB9 004DBB8E            874              JSR         ABW         *Add absolute word in next word address.
000008AE  4E75                     875              RTS
000008B0                           876  
000008B0  18FC 004C                877  BCC_LS      MOVE.B      #'L',(A4)+
000008B4  18FC 0053                878              MOVE.B      #'S',(A4)+
000008B8  18FC 0020                879              MOVE.B      #' ',(A4)+
000008BC  18FC 0020                880              MOVE.B      #' ',(A4)+
Line 881 ERROR: Undefined symbol
000008C0  4EB9 004DBB8E            881              JSR         ABW         *Add absolute word in next word address.
000008C6  4E75                     882              RTS
000008C8                           883  
000008C8  18FC 0043                884  BCC_CC      MOVE.B      #'C',(A4)+
000008CC  18FC 0043                885              MOVE.B      #'C',(A4)+
000008D0  18FC 0020                886              MOVE.B      #' ',(A4)+
000008D4  18FC 0020                887              MOVE.B      #' ',(A4)+
Line 888 ERROR: Undefined symbol
000008D8  4EB9 004DBB8E            888              JSR         ABW         *Add absolute word in next word address.
000008DE  4E75                     889              RTS
000008E0                           890              
000008E0  18FC 0043                891  BCC_CS      MOVE.B      #'C',(A4)+
000008E4  18FC 0053                892              MOVE.B      #'S',(A4)+
000008E8  18FC 0020                893              MOVE.B      #' ',(A4)+
000008EC  18FC 0020                894              MOVE.B      #' ',(A4)+
Line 895 ERROR: Undefined symbol
000008F0  4EB9 004DBB8E            895              JSR         ABW         *Add absolute word in next word address.
000008F6  4E75                     896              RTS
000008F8                           897              
000008F8  18FC 004E                898  BCC_NE      MOVE.B      #'N',(A4)+
000008FC  18FC 0045                899              MOVE.B      #'E',(A4)+
00000900  18FC 0020                900              MOVE.B      #' ',(A4)+
00000904  18FC 0020                901              MOVE.B      #' ',(A4)+
Line 902 ERROR: Undefined symbol
00000908  4EB9 004DBB8E            902              JSR         ABW         *Add absolute word in next word address.
0000090E  4E75                     903              RTS
00000910                           904              
00000910  18FC 0045                905  BCC_EQ      MOVE.B      #'E',(A4)+
00000914  18FC 0051                906              MOVE.B      #'Q',(A4)+
00000918  18FC 0020                907              MOVE.B      #' ',(A4)+
0000091C  18FC 0020                908              MOVE.B      #' ',(A4)+
Line 909 ERROR: Undefined symbol
00000920  4EB9 004DBB8E            909              JSR         ABW         *Add absolute word in next word address.
00000926  4E75                     910              RTS
00000928                           911              
00000928  18FC 0056                912  BCC_VC      MOVE.B      #'V',(A4)+
0000092C  18FC 0043                913              MOVE.B      #'C',(A4)+
00000930  18FC 0020                914              MOVE.B      #' ',(A4)+
00000934  18FC 0020                915              MOVE.B      #' ',(A4)+
Line 916 ERROR: Undefined symbol
00000938  4EB9 004DBB8E            916              JSR         ABW         *Add absolute word in next word address.
0000093E  4E75                     917              RTS
00000940                           918  
00000940  18FC 0056                919  BCC_VS      MOVE.B      #'V',(A4)+
00000944  18FC 0053                920              MOVE.B      #'S',(A4)+
00000948  18FC 0020                921              MOVE.B      #' ',(A4)+
0000094C  18FC 0020                922              MOVE.B      #' ',(A4)+
Line 923 ERROR: Undefined symbol
00000950  4EB9 004DBB8E            923              JSR         ABW         *Add absolute word in next word address.
00000956  4E75                     924              RTS
00000958                           925              
00000958  18FC 0050                926  BCC_PL      MOVE.B      #'P',(A4)+
0000095C  18FC 004C                927              MOVE.B      #'L',(A4)+
00000960  18FC 0020                928              MOVE.B      #' ',(A4)+
00000964  18FC 0020                929              MOVE.B      #' ',(A4)+
Line 930 ERROR: Undefined symbol
00000968  4EB9 004DBB8E            930              JSR         ABW         *Add absolute word in next word address.
0000096E  4E75                     931              RTS
00000970                           932              
00000970  18FC 004D                933  BCC_MI      MOVE.B      #'M',(A4)+
00000974  18FC 0049                934              MOVE.B      #'I',(A4)+
00000978  18FC 0020                935              MOVE.B      #' ',(A4)+
0000097C  18FC 0020                936              MOVE.B      #' ',(A4)+
Line 937 ERROR: Undefined symbol
00000980  4EB9 004DBB8E            937              JSR         ABW         *Add absolute word in next word address.
00000986  4E75                     938              RTS
00000988                           939              
00000988  18FC 0047                940  BCC_GE      MOVE.B      #'G',(A4)+
0000098C  18FC 0045                941              MOVE.B      #'E',(A4)+
00000990  18FC 0020                942              MOVE.B      #' ',(A4)+
00000994  18FC 0020                943              MOVE.B      #' ',(A4)+
Line 944 ERROR: Undefined symbol
00000998  4EB9 004DBB8E            944              JSR         ABW         *Add absolute word in next word address.
0000099E  4E75                     945              RTS
000009A0                           946              
000009A0  18FC 004C                947  BCC_LT      MOVE.B      #'L',(A4)+
000009A4  18FC 0054                948              MOVE.B      #'T',(A4)+
000009A8  18FC 0020                949              MOVE.B      #' ',(A4)+
000009AC  18FC 0020                950              MOVE.B      #' ',(A4)+
Line 951 ERROR: Undefined symbol
000009B0  4EB9 004DBB8E            951              JSR         ABW         *Add absolute word in next word address.
000009B6  4E75                     952              RTS
000009B8                           953              
000009B8  18FC 0047                954  BCC_GT      MOVE.B      #'G',(A4)+
000009BC  18FC 0054                955              MOVE.B      #'T',(A4)+
000009C0  18FC 0020                956              MOVE.B      #' ',(A4)+
000009C4  18FC 0020                957              MOVE.B      #' ',(A4)+
Line 958 ERROR: Undefined symbol
000009C8  4EB9 004DBB8E            958              JSR         ABW         *Add absolute word in next word address.
000009CE  4E75                     959              RTS
000009D0                           960              
000009D0  18FC 004C                961  BCC_LE      MOVE.B      #'L',(A4)+
000009D4  18FC 0045                962              MOVE.B      #'E',(A4)+
000009D8  18FC 0020                963              MOVE.B      #' ',(A4)+
000009DC  18FC 0020                964              MOVE.B      #' ',(A4)+
Line 965 ERROR: Undefined symbol
000009E0  4EB9 004DBB8E            965              JSR         ABW         *Add absolute word in next word address.
000009E6  4E75                     966              RTS
000009E8                           967  
000009E8                           968  
000009E8                           969  *--------------------ADD SIZE-------------------------------
000009E8                           970  * A simple helper that looks at the size code in D4 to add
000009E8                           971  * the appropriate B,W,L to the string.
000009E8                           972  *-----------------------------------------------------------
000009E8  B83C 0000                973  ADD_SIZE    CMP.B       #0,D4       *Is it a B, <ea>,dn/an
000009EC  6700 0012                974              BEQ         B_SIZE
000009F0  B83C 0001                975              CMP.B       #1,D4       *Is it a W, <ea>,dn/an
000009F4  6700 0018                976              BEQ         W_SIZE
000009F8  B83C 0002                977              CMP.B       #2,D4       *Is it a L, <ea>,dn/an
000009FC  6700 001E                978              BEQ         L_SIZE 
00000A00                           979              
00000A00  18FC 0042                980  B_SIZE      MOVE.B      #'B',(A4)+  *Add size character to good string
00000A04  18FC 0020                981              MOVE.B      #' ',(A4)+
00000A08  18FC 0020                982              MOVE.B      #' ',(A4)+
00000A0C  4E75                     983              RTS
00000A0E                           984  
00000A0E  18FC 0057                985  W_SIZE      MOVE.B      #'W',(A4)+  *Add size character to good string
00000A12  18FC 0020                986              MOVE.B      #' ',(A4)+
00000A16  18FC 0020                987              MOVE.B      #' ',(A4)+
00000A1A  4E75                     988              RTS
00000A1C                           989  
00000A1C  18FC 004C                990  L_SIZE      MOVE.B      #'L',(A4)+  *Add size character to good string
00000A20  18FC 0020                991              MOVE.B      #' ',(A4)+
00000A24  18FC 0020                992              MOVE.B      #' ',(A4)+
00000A28  4E75                     993              RTS
00000A2A                           994  
00000A2A                           995  *--------------------GET SIZE CODE--------------------------
00000A2A                           996  * The following three subroutines isolate the size bits for
00000A2A                           997  * all opcodes. They are by number of bits (e.g. 3 bits for
00000A2A                           998  * size implies GET_SIZE_3). Bit(s) are isolated into D4)
00000A2A                           999  *-----------------------------------------------------------
00000A2A  4284                    1000  GET_SIZE_3  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
00000A2C  3807                    1001              MOVE.W      D7,D4       *Copy untouched opcode into D4
00000A2E  EF4C                    1002              LSL.W       #7,D4       *Clear more significant bits
00000A30  4283                    1003              CLR.L       D3          *Make sure D3 is clear for shifting
00000A32  163C 000D               1004              MOVE.B      #13,D3      *Shifting 13 times
00000A36  E66C                    1005              LSR.W       D3,D4       *Move size bits to LSB position
00000A38  4E75                    1006              RTS
00000A3A                          1007  
00000A3A  4284                    1008  GET_SIZE_2  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
00000A3C  3807                    1009              MOVE.W      D7,D4       *Copy untouched opcode into D4
00000A3E  E14C                    1010              LSL.W       #8,D4       *Clear more significant bits
00000A40  4283                    1011              CLR.L       D3          *Make sure D3 is clear for shifting
00000A42  163C 000E               1012              MOVE.B      #14,D3      *Shifting 14 times
00000A46  E66C                    1013              LSR.W       D3,D4       *Move size bits to LSB position
00000A48  4E75                    1014              RTS
00000A4A                          1015  
00000A4A  4284                    1016  GET_SIZE_1  CLR.L       D4          *Make sure D4 is clear to isolate size bits.
00000A4C  3807                    1017              MOVE.W      D7,D4       *Copy untouched opcode into D4
00000A4E  4283                    1018              CLR.L       D3          *Make sure D3 is clear for shifting
00000A50  163C 0009               1019              MOVE.B      #9,D3       *Shift 9 times to the left
00000A54  E76C                    1020              LSL.W       D3,D4       *Clear more significant bits
00000A56  4283                    1021              CLR.L       D3          *Make sure D3 is clear for shifting
00000A58  163C 000F               1022              MOVE.B      #15,D3      *Shifting 15 times
00000A5C  E66C                    1023              LSR.W       D3,D4       *Move size bits to LSB position
00000A5E  4E75                    1024              RTS
00000A60                          1025  
00000A60                          1026  *--------------------ADD SIZE (Pseudo JMP TABLE)------------
00000A60                          1027  * This subroutine is for ADD, AND, OR, SUB.
00000A60                          1028  * It adds the appropriate "B", "W", "L" and space characters
00000A60                          1029  * to the output strings. It then starts the parameter decode
00000A60                          1030  * sequence for the above 4 subroutines.
00000A60                          1031  * Values 0, 1, 2 => B, W, L => <ea>,Dn => JSR EA_SRC
00000A60                          1032  * Values 4, 5, 6 => B, W, L => Dn,<ea> => JSR DN_SRC
00000A60                          1033  *-----------------------------------------------------------
00000A60  B83C 0000               1034  OR_ADD_SIZE CMP.B       #0,D4       *Is it a B, <ea>,dn
00000A64  6700 002E               1035              BEQ         B_EA
00000A68  B83C 0001               1036              CMP.B       #1,D4       *Is it a W, <ea>,dn
00000A6C  6700 003A               1037              BEQ         W_EA
00000A70  B83C 0002               1038              CMP.B       #2,D4       *Is it a L, <ea>,dn
00000A74  6700 0046               1039              BEQ         L_EA
00000A78                          1040  
00000A78  B83C 0004               1041              CMP.B       #4,D4       *Is it a B, dn,<ea>
00000A7C  6700 0052               1042              BEQ         B_DN
00000A80  B83C 0005               1043              CMP.B       #5,D4       *Is it a W, dn,<ea>
00000A84  6700 005E               1044              BEQ         W_DN
00000A88  B83C 0006               1045              CMP.B       #6,D4       *Is it a L, dn,<ea>
00000A8C  6700 006A               1046              BEQ         L_DN        
Line 1047 ERROR: Undefined symbol
00000A90  6000 B0FC               1047              BRA         INVALID     *Got here, must be invalid data.
00000A94                          1048              
00000A94  18FC 0042               1049  B_EA        MOVE.B      #'B',(A4)+  *Add size character to good string
00000A98  18FC 0020               1050              MOVE.B      #' ',(A4)+
00000A9C  18FC 0020               1051              MOVE.B      #' ',(A4)+
Line 1052 ERROR: Undefined symbol
00000AA0  4EB9 004DBB8E           1052              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
00000AA6  4E75                    1053              RTS
00000AA8                          1054  
00000AA8  18FC 0057               1055  W_EA        MOVE.B      #'W',(A4)+  *Add size character to good string
00000AAC  18FC 0020               1056              MOVE.B      #' ',(A4)+
00000AB0  18FC 0020               1057              MOVE.B      #' ',(A4)+
Line 1058 ERROR: Undefined symbol
00000AB4  4EB9 004DBB8E           1058              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
00000ABA  4E75                    1059              RTS
00000ABC                          1060  
00000ABC  18FC 004C               1061  L_EA        MOVE.B      #'L',(A4)+  *Add size character to good string
00000AC0  18FC 0020               1062              MOVE.B      #' ',(A4)+
00000AC4  18FC 0020               1063              MOVE.B      #' ',(A4)+
Line 1064 ERROR: Undefined symbol
00000AC8  4EB9 004DBB8E           1064              JSR         EASRC_DDES *Move to EA_SRC to start parameter decode sequence
00000ACE  4E75                    1065              RTS
00000AD0                          1066  
00000AD0  18FC 0042               1067  B_DN        MOVE.B      #'B',(A4)+  *Add size character to good string
00000AD4  18FC 0020               1068              MOVE.B      #' ',(A4)+
00000AD8  18FC 0020               1069              MOVE.B      #' ',(A4)+
Line 1070 ERROR: Undefined symbol
00000ADC  4EB9 004DBB8E           1070              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
00000AE2  4E75                    1071              RTS
00000AE4                          1072  
00000AE4  18FC 0057               1073  W_DN        MOVE.B      #'W',(A4)+  *Add size character to good string
00000AE8  18FC 0020               1074              MOVE.B      #' ',(A4)+
00000AEC  18FC 0020               1075              MOVE.B      #' ',(A4)+
Line 1076 ERROR: Undefined symbol
00000AF0  4EB9 004DBB8E           1076              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
00000AF6  4E75                    1077              RTS
00000AF8                          1078  
00000AF8  18FC 004C               1079  L_DN        MOVE.B      #'L',(A4)+  *Add size character to good string
00000AFC  18FC 0020               1080              MOVE.B      #' ',(A4)+
00000B00  18FC 0020               1081              MOVE.B      #' ',(A4)+
Line 1082 ERROR: Undefined symbol
00000B04  4EB9 004DBB8E           1082              JSR         DN_SRC      *Move to DN_SRC to start parameter decode sequence
00000B0A  4E75                    1083              RTS            
00000B0C                          1084              
00000B0C                          1085              
00000B0C                          1086              
00000B0C                          1087              
00000B0C                          1088              
00000B0C                          1089              
00000B0C                          1090              
00000B0C                          1091  
00000B0C                          1092  
00000B0C                          1093  
00000B0C                          1094  
00000B0C                          1095  
00000B0C                          1096  
00000B0C                          1097  
00000B0C                          1098  
00000B0C                          1099  
00000B0C                          1100  
00000B0C                          1101  
00000B0C                          1102  
00000B0C                          1103  
Line 1104 WARNING: END directive missing, starting address not set

55 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_SIZE            9E8
BCC_CC              8C8
BCC_CODE            80C
BCC_CS              8E0
BCC_EQ              910
BCC_GE              988
BCC_GT              9B8
BCC_HI              898
BCC_LE              9D0
BCC_LS              8B0
BCC_LT              9A0
BCC_MI              970
BCC_NE              8F8
BCC_PL              958
BCC_TABLE           822
BCC_VC              928
BCC_VS              940
B_DN                AD0
B_EA                A94
B_SIZE              A00
DECODE_L            806
DECODE_R            800
GET_SIZE_1          A4A
GET_SIZE_2          A3A
GET_SIZE_3          A2A
INVMM2              552
INV_OP              FC
JMP_0               C
JMP_0X              196
JMP_1               1C
JMP_2               2C
JMP_2X              1C2
JMP_3               3C
JMP_3X              1E6
JMP_4               4C
JMP_47X             3CC
JMP_4X              20A
JMP_5               5C
JMP_6               6C
JMP_6X              252
JMP_7               7C
JMP_8               8C
JMP_8X              276
JMP_9               9C
JMP_A               AC
JMP_B               BC
JMP_C               CC
JMP_CX              29A
JMP_D               DC
JMP_DX              2BE
JMP_E               EC
JMP_EX              322
JMP_TBL             0
J_47X               23A
J_ADDI              1BA
J_AND               2B6
J_BCC               26E
J_BRA               266
J_CLR1              134
J_CLR2              124
J_CLR3              114
J_CLR4              104
J_CLR_DM            172
J_CLR_LEA           144
J_CLR_MM            154
J_CLR_MM2           162
J_CLR_SHFT          182
J_DIVU              28A
J_LEA               242
J_MOVEAL            1D6
J_MOVEAW            1FA
J_MOVEL             1DE
J_MOVEM             24A
J_MOVEW             202
J_MULS              2AE
J_OR                292
J_SUBI              1B2
L_DN                AF8
L_EA                ABC
L_SIZE              A1C
MM_ADD_S            544
MM_LONG             540
MM_WORD             538
OPC_ADD             6D0
OPC_ADDA            6AE
OPC_ADDI            42E
OPC_ADDQ            47A
OPC_AND             690
OPC_AS_MEM          726
OPC_AS_REG          774
OPC_BCC             61E
OPC_BRA             602
OPC_DIVU            62A
OPC_JSR             6EE
OPC_LEA             4DC
OPC_LS_MEM          740
OPC_LS_REG          79A
OPC_MOVEAL          55A
OPC_MOVEAW          5AE
OPC_MOVEB           456
OPC_MOVEL           586
OPC_MOVEM           4FE
OPC_MOVEQ           4A2
OPC_MOVEW           5DA
OPC_MULS            66A
OPC_NOP             70A
OPC_OR              650
OPC_RO_MEM          75A
OPC_RO_REG          7C0
OPC_RTS             718
OPC_SUB             4BE
OPC_SUBI            406
OP_ADD              31A
OP_ADDA             312
OP_AS_MEM           37C
OP_AS_REG           3B4
OP_LS_MEM           384
OP_LS_REG           3BC
OP_RO_MEM           38C
OP_RO_REG           3C4
OR_ADD_SIZE         A60
O_JSR               3FE
O_NOP               3EE
O_RTS               3F6
SHFT_DECODE         7E6
SRMEM_VAR           35C
SRREG_VAR           394
SR_MEM_VAR          34C
SR_REG_VAR          354
W_DN                AE4
W_EA                AA8
W_SIZE              A0E
